/* ###
 * IP: Public Domain
 */

if (findProject(':Generic') != null) {
	apply from: "$rootProject.projectDir/gradle/javaProject.gradle"
	apply from: "$rootProject.projectDir/gradle/distributableGPLModule.gradle"
	
	rootProject.assembleDistribution {
		doLast {
			// eliminate standard module lib directory
			def assemblePath = destinationDir.path + "/" + getZipPath(this.project)
			delete assemblePath + "/lib"
		}
	}
}
else {
	apply plugin: 'java-library'
}
apply plugin: 'eclipse'

eclipse.project.name = 'GPL DMG'

/*********************************************************************************
 *
 * Define a new source set for dmg source because it is not part of Ghidra, it is 
 * a standalone application that is executed and called from Ghidra. 
 *  			
 * see DmgServerProcessManager 
 *
 *********************************************************************************/
sourceSets {
	
	dmg {
		java {
			srcDir 'src/dmg/java'
		}
	}
}

repositories {
	flatDir name: "flat", dirs:["data/lib"]
}

dependencies {
	dmgImplementation ':csframework@jar'
	dmgImplementation ':hfsx@jar'
	dmgImplementation ':hfsx_dmglib@jar'
}

/***************************************************************************************
 *
 * Task to create the DMG.jar file
 *
 ***************************************************************************************/

jar {
	destinationDirectory = file("build/data/lib")
	from sourceSets.dmg.output
}
