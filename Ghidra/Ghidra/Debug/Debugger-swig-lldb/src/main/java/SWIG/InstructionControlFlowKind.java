/* ###
 * IP: Apache License 2.0 with LLVM Exceptions
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package SWIG;

public final class InstructionControlFlowKind {
  public final static InstructionControlFlowKind eInstructionControlFlowKindUnknown = new InstructionControlFlowKind("eInstructionControlFlowKindUnknown", lldbJNI.eInstructionControlFlowKindUnknown_get());
  public final static InstructionControlFlowKind eInstructionControlFlowKindOther = new InstructionControlFlowKind("eInstructionControlFlowKindOther");
  public final static InstructionControlFlowKind eInstructionControlFlowKindCall = new InstructionControlFlowKind("eInstructionControlFlowKindCall");
  public final static InstructionControlFlowKind eInstructionControlFlowKindReturn = new InstructionControlFlowKind("eInstructionControlFlowKindReturn");
  public final static InstructionControlFlowKind eInstructionControlFlowKindJump = new InstructionControlFlowKind("eInstructionControlFlowKindJump");
  public final static InstructionControlFlowKind eInstructionControlFlowKindCondJump = new InstructionControlFlowKind("eInstructionControlFlowKindCondJump");
  public final static InstructionControlFlowKind eInstructionControlFlowKindFarCall = new InstructionControlFlowKind("eInstructionControlFlowKindFarCall");
  public final static InstructionControlFlowKind eInstructionControlFlowKindFarReturn = new InstructionControlFlowKind("eInstructionControlFlowKindFarReturn");
  public final static InstructionControlFlowKind eInstructionControlFlowKindFarJump = new InstructionControlFlowKind("eInstructionControlFlowKindFarJump");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static InstructionControlFlowKind swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + InstructionControlFlowKind.class + " with value " + swigValue);
  }

  private InstructionControlFlowKind(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private InstructionControlFlowKind(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private InstructionControlFlowKind(String swigName, InstructionControlFlowKind swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static InstructionControlFlowKind[] swigValues = { eInstructionControlFlowKindUnknown, eInstructionControlFlowKindOther, eInstructionControlFlowKindCall, eInstructionControlFlowKindReturn, eInstructionControlFlowKindJump, eInstructionControlFlowKindCondJump, eInstructionControlFlowKindFarCall, eInstructionControlFlowKindFarReturn, eInstructionControlFlowKindFarJump };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

