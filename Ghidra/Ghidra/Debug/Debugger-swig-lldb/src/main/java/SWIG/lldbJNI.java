/* ###
 * IP: Apache License 2.0 with LLVM Exceptions
 */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package SWIG;

public class lldbJNI {
  public final static native long new_ByteArray(int jarg1);
  public final static native void delete_ByteArray(long jarg1);
  public final static native byte ByteArray_getitem(long jarg1, ByteArray jarg1_, int jarg2);
  public final static native void ByteArray_setitem(long jarg1, ByteArray jarg1_, int jarg2, byte jarg3);
  public final static native long ByteArray_cast(long jarg1, ByteArray jarg1_);
  public final static native long ByteArray_frompointer(long jarg1);
  public final static native int INT32_MAX_get();
  public final static native long UINT32_MAX_get();
  public final static native java.math.BigInteger UINT64_MAX_get();
  public final static native long LLDB_GENERIC_ERROR_get();
  public final static native int LLDB_INVALID_BREAK_ID_get();
  public final static native int LLDB_DEFAULT_BREAK_SIZE_get();
  public final static native int LLDB_INVALID_WATCH_ID_get();
  public final static native long LLDB_WATCH_TYPE_READ_get();
  public final static native long LLDB_WATCH_TYPE_WRITE_get();
  public final static native int LLDB_REGNUM_GENERIC_PC_get();
  public final static native int LLDB_REGNUM_GENERIC_SP_get();
  public final static native int LLDB_REGNUM_GENERIC_FP_get();
  public final static native int LLDB_REGNUM_GENERIC_RA_get();
  public final static native int LLDB_REGNUM_GENERIC_FLAGS_get();
  public final static native int LLDB_REGNUM_GENERIC_ARG1_get();
  public final static native int LLDB_REGNUM_GENERIC_ARG2_get();
  public final static native int LLDB_REGNUM_GENERIC_ARG3_get();
  public final static native int LLDB_REGNUM_GENERIC_ARG4_get();
  public final static native int LLDB_REGNUM_GENERIC_ARG5_get();
  public final static native int LLDB_REGNUM_GENERIC_ARG6_get();
  public final static native int LLDB_REGNUM_GENERIC_ARG7_get();
  public final static native int LLDB_REGNUM_GENERIC_ARG8_get();
  public final static native int LLDB_INVALID_STOP_ID_get();
  public final static native java.math.BigInteger LLDB_INVALID_ADDRESS_get();
  public final static native long LLDB_INVALID_INDEX32_get();
  public final static native long LLDB_INVALID_IVAR_OFFSET_get();
  public final static native long LLDB_INVALID_IMAGE_TOKEN_get();
  public final static native long LLDB_INVALID_MODULE_VERSION_get();
  public final static native long LLDB_INVALID_REGNUM_get();
  public final static native java.math.BigInteger LLDB_INVALID_UID_get();
  public final static native int LLDB_INVALID_PROCESS_ID_get();
  public final static native int LLDB_INVALID_THREAD_ID_get();
  public final static native long LLDB_INVALID_FRAME_ID_get();
  public final static native int LLDB_INVALID_SIGNAL_NUMBER_get();
  public final static native java.math.BigInteger LLDB_INVALID_OFFSET_get();
  public final static native long LLDB_INVALID_LINE_NUMBER_get();
  public final static native int LLDB_INVALID_COLUMN_NUMBER_get();
  public final static native int LLDB_INVALID_QUEUE_ID_get();
  public final static native long LLDB_INVALID_CPU_ID_get();
  public final static native String LLDB_ARCH_DEFAULT_get();
  public final static native String LLDB_ARCH_DEFAULT_32BIT_get();
  public final static native String LLDB_ARCH_DEFAULT_64BIT_get();
  public final static native long LLDB_INVALID_CPUTYPE_get();
  public final static native int LLDB_MAX_NUM_OPTION_SETS_get();
  public final static native long LLDB_OPT_SET_ALL_get();
  public final static native long LLDB_OPT_SET_1_get();
  public final static native long LLDB_OPT_SET_2_get();
  public final static native long LLDB_OPT_SET_3_get();
  public final static native long LLDB_OPT_SET_4_get();
  public final static native long LLDB_OPT_SET_5_get();
  public final static native long LLDB_OPT_SET_6_get();
  public final static native long LLDB_OPT_SET_7_get();
  public final static native long LLDB_OPT_SET_8_get();
  public final static native long LLDB_OPT_SET_9_get();
  public final static native long LLDB_OPT_SET_10_get();
  public final static native long LLDB_OPT_SET_11_get();
  public final static native long LLDB_OPT_SET_12_get();
  public final static native int eStateInvalid_get();
  public final static native int kLastStateType_get();
  public final static native int eLaunchFlagNone_get();
  public final static native int eLaunchFlagExec_get();
  public final static native int eLaunchFlagDebug_get();
  public final static native int eLaunchFlagStopAtEntry_get();
  public final static native int eLaunchFlagDisableASLR_get();
  public final static native int eLaunchFlagDisableSTDIO_get();
  public final static native int eLaunchFlagLaunchInTTY_get();
  public final static native int eLaunchFlagLaunchInShell_get();
  public final static native int eLaunchFlagLaunchInSeparateProcessGroup_get();
  public final static native int eLaunchFlagDontSetExitStatus_get();
  public final static native int eLaunchFlagDetachOnError_get();
  public final static native int eLaunchFlagShellExpandArguments_get();
  public final static native int eLaunchFlagCloseTTYOnExit_get();
  public final static native int eLaunchFlagInheritTCCFromParent_get();
  public final static native int eByteOrderInvalid_get();
  public final static native int eByteOrderBig_get();
  public final static native int eByteOrderPDP_get();
  public final static native int eByteOrderLittle_get();
  public final static native int eEncodingInvalid_get();
  public final static native int eFormatDefault_get();
  public final static native int eFormatInvalid_get();
  public final static native int eFormatComplexFloat_get();
  public final static native int eDescriptionLevelBrief_get();
  public final static native int eScriptLanguageNone_get();
  public final static native int eScriptLanguageDefault_get();
  public final static native int eRegisterKindEHFrame_get();
  public final static native int eStopReasonInvalid_get();
  public final static native int eExpressionCompleted_get();
  public final static native int eSearchDepthInvalid_get();
  public final static native int kLastSearchDepthKind_get();
  public final static native int eValueTypeInvalid_get();
  public final static native int eValueTypeVariableGlobal_get();
  public final static native int eValueTypeVariableStatic_get();
  public final static native int eValueTypeVariableArgument_get();
  public final static native int eValueTypeVariableLocal_get();
  public final static native int eValueTypeRegister_get();
  public final static native int eValueTypeRegisterSet_get();
  public final static native int eValueTypeConstResult_get();
  public final static native int eValueTypeVariableThreadLocal_get();
  public final static native int eInputReaderGranularityInvalid_get();
  public final static native int eSymbolContextTarget_get();
  public final static native int eSymbolContextModule_get();
  public final static native int eSymbolContextCompUnit_get();
  public final static native int eSymbolContextFunction_get();
  public final static native int eSymbolContextBlock_get();
  public final static native int eSymbolContextLineEntry_get();
  public final static native int eSymbolContextSymbol_get();
  public final static native int eSymbolContextEverything_get();
  public final static native int eSymbolContextVariable_get();
  public final static native int eSymbolContextLastItem_get();
  public final static native int ePermissionsWritable_get();
  public final static native int ePermissionsReadable_get();
  public final static native int ePermissionsExecutable_get();
  public final static native int eBreakpointEventTypeInvalidType_get();
  public final static native int eBreakpointEventTypeAdded_get();
  public final static native int eBreakpointEventTypeRemoved_get();
  public final static native int eBreakpointEventTypeLocationsAdded_get();
  public final static native int eBreakpointEventTypeLocationsRemoved_get();
  public final static native int eBreakpointEventTypeLocationsResolved_get();
  public final static native int eBreakpointEventTypeEnabled_get();
  public final static native int eBreakpointEventTypeDisabled_get();
  public final static native int eBreakpointEventTypeCommandChanged_get();
  public final static native int eBreakpointEventTypeConditionChanged_get();
  public final static native int eBreakpointEventTypeIgnoreChanged_get();
  public final static native int eBreakpointEventTypeThreadChanged_get();
  public final static native int eBreakpointEventTypeAutoContinueChanged_get();
  public final static native int eWatchpointEventTypeInvalidType_get();
  public final static native int eWatchpointEventTypeAdded_get();
  public final static native int eWatchpointEventTypeRemoved_get();
  public final static native int eWatchpointEventTypeEnabled_get();
  public final static native int eWatchpointEventTypeDisabled_get();
  public final static native int eWatchpointEventTypeCommandChanged_get();
  public final static native int eWatchpointEventTypeConditionChanged_get();
  public final static native int eWatchpointEventTypeIgnoreChanged_get();
  public final static native int eWatchpointEventTypeThreadChanged_get();
  public final static native int eWatchpointEventTypeTypeChanged_get();
  public final static native int eLanguageTypeUnknown_get();
  public final static native int eLanguageTypeC89_get();
  public final static native int eLanguageTypeC_get();
  public final static native int eLanguageTypeAda83_get();
  public final static native int eLanguageTypeC_plus_plus_get();
  public final static native int eLanguageTypeCobol74_get();
  public final static native int eLanguageTypeCobol85_get();
  public final static native int eLanguageTypeFortran77_get();
  public final static native int eLanguageTypeFortran90_get();
  public final static native int eLanguageTypePascal83_get();
  public final static native int eLanguageTypeModula2_get();
  public final static native int eLanguageTypeJava_get();
  public final static native int eLanguageTypeC99_get();
  public final static native int eLanguageTypeAda95_get();
  public final static native int eLanguageTypeFortran95_get();
  public final static native int eLanguageTypePLI_get();
  public final static native int eLanguageTypeObjC_get();
  public final static native int eLanguageTypeObjC_plus_plus_get();
  public final static native int eLanguageTypeUPC_get();
  public final static native int eLanguageTypeD_get();
  public final static native int eLanguageTypePython_get();
  public final static native int eLanguageTypeOpenCL_get();
  public final static native int eLanguageTypeGo_get();
  public final static native int eLanguageTypeModula3_get();
  public final static native int eLanguageTypeHaskell_get();
  public final static native int eLanguageTypeC_plus_plus_03_get();
  public final static native int eLanguageTypeC_plus_plus_11_get();
  public final static native int eLanguageTypeOCaml_get();
  public final static native int eLanguageTypeRust_get();
  public final static native int eLanguageTypeC11_get();
  public final static native int eLanguageTypeSwift_get();
  public final static native int eLanguageTypeJulia_get();
  public final static native int eLanguageTypeDylan_get();
  public final static native int eLanguageTypeC_plus_plus_14_get();
  public final static native int eLanguageTypeFortran03_get();
  public final static native int eLanguageTypeFortran08_get();
  public final static native int eLanguageTypeMipsAssembler_get();
  public final static native int eLanguageTypeExtRenderScript_get();
  public final static native int eInstrumentationRuntimeTypeAddressSanitizer_get();
  public final static native int eInstrumentationRuntimeTypeThreadSanitizer_get();
  public final static native int eInstrumentationRuntimeTypeUndefinedBehaviorSanitizer_get();
  public final static native int eInstrumentationRuntimeTypeMainThreadChecker_get();
  public final static native int eInstrumentationRuntimeTypeSwiftRuntimeReporting_get();
  public final static native int eNoDynamicValues_get();
  public final static native int eDynamicCanRunTarget_get();
  public final static native int eDynamicDontRunTarget_get();
  public final static native int eStopShowColumnAnsiOrCaret_get();
  public final static native int eStopShowColumnAnsi_get();
  public final static native int eStopShowColumnCaret_get();
  public final static native int eStopShowColumnNone_get();
  public final static native int eArgTypeAddress_get();
  public final static native int eSymbolTypeAny_get();
  public final static native int eSymbolTypeInvalid_get();
  public final static native int eEmulateInstructionOptionNone_get();
  public final static native int eEmulateInstructionOptionAutoAdvancePC_get();
  public final static native int eEmulateInstructionOptionIgnoreConditions_get();
  public final static native int eFunctionNameTypeNone_get();
  public final static native int eFunctionNameTypeAuto_get();
  public final static native int eFunctionNameTypeFull_get();
  public final static native int eFunctionNameTypeBase_get();
  public final static native int eFunctionNameTypeMethod_get();
  public final static native int eFunctionNameTypeSelector_get();
  public final static native int eFunctionNameTypeAny_get();
  public final static native int eBasicTypeInvalid_get();
  public final static native int eBasicTypeVoid_get();
  public final static native int eTraceTypeNone_get();
  public final static native int eStructuredDataTypeInvalid_get();
  public final static native int eStructuredDataTypeNull_get();
  public final static native int eTypeClassInvalid_get();
  public final static native int eTypeClassArray_get();
  public final static native int eTypeClassBlockPointer_get();
  public final static native int eTypeClassBuiltin_get();
  public final static native int eTypeClassClass_get();
  public final static native int eTypeClassComplexFloat_get();
  public final static native int eTypeClassComplexInteger_get();
  public final static native int eTypeClassEnumeration_get();
  public final static native int eTypeClassFunction_get();
  public final static native int eTypeClassMemberPointer_get();
  public final static native int eTypeClassObjCObject_get();
  public final static native int eTypeClassObjCInterface_get();
  public final static native int eTypeClassObjCObjectPointer_get();
  public final static native int eTypeClassPointer_get();
  public final static native int eTypeClassReference_get();
  public final static native int eTypeClassStruct_get();
  public final static native int eTypeClassTypedef_get();
  public final static native int eTypeClassUnion_get();
  public final static native int eTypeClassVector_get();
  public final static native int eTypeClassOther_get();
  public final static native int eTypeClassAny_get();
  public final static native int eTemplateArgumentKindNull_get();
  public final static native int eLastFormatterMatchType_get();
  public final static native int eTypeOptionNone_get();
  public final static native int eTypeOptionCascade_get();
  public final static native int eTypeOptionSkipPointers_get();
  public final static native int eTypeOptionSkipReferences_get();
  public final static native int eTypeOptionHideChildren_get();
  public final static native int eTypeOptionHideValue_get();
  public final static native int eTypeOptionShowOneLiner_get();
  public final static native int eTypeOptionHideNames_get();
  public final static native int eTypeOptionNonCacheable_get();
  public final static native int eTypeOptionHideEmptyAggregates_get();
  public final static native int eTypeOptionFrontEndWantsDereference_get();
  public final static native int eFilePermissionsUserRead_get();
  public final static native int eFilePermissionsUserWrite_get();
  public final static native int eFilePermissionsUserExecute_get();
  public final static native int eFilePermissionsGroupRead_get();
  public final static native int eFilePermissionsGroupWrite_get();
  public final static native int eFilePermissionsGroupExecute_get();
  public final static native int eFilePermissionsWorldRead_get();
  public final static native int eFilePermissionsWorldWrite_get();
  public final static native int eFilePermissionsWorldExecute_get();
  public final static native int eFilePermissionsUserRW_get();
  public final static native int eFileFilePermissionsUserRX_get();
  public final static native int eFilePermissionsUserRWX_get();
  public final static native int eFilePermissionsGroupRW_get();
  public final static native int eFilePermissionsGroupRX_get();
  public final static native int eFilePermissionsGroupRWX_get();
  public final static native int eFilePermissionsWorldRW_get();
  public final static native int eFilePermissionsWorldRX_get();
  public final static native int eFilePermissionsWorldRWX_get();
  public final static native int eFilePermissionsEveryoneR_get();
  public final static native int eFilePermissionsEveryoneW_get();
  public final static native int eFilePermissionsEveryoneX_get();
  public final static native int eFilePermissionsEveryoneRW_get();
  public final static native int eFilePermissionsEveryoneRX_get();
  public final static native int eFilePermissionsEveryoneRWX_get();
  public final static native int eFilePermissionsFileDefault_get();
  public final static native int eFilePermissionsDirectoryDefault_get();
  public final static native int eQueueItemKindUnknown_get();
  public final static native int eQueueKindUnknown_get();
  public final static native int eExpressionEvaluationParse_get();
  public final static native int eInstructionControlFlowKindUnknown_get();
  public final static native int eWatchpointKindWrite_get();
  public final static native int eWatchpointKindRead_get();
  public final static native int eGdbSignalBadAccess_get();
  public final static native int eGdbSignalBadInstruction_get();
  public final static native int eGdbSignalArithmetic_get();
  public final static native int eGdbSignalEmulation_get();
  public final static native int eGdbSignalSoftware_get();
  public final static native int eGdbSignalBreakpoint_get();
  public final static native int eMemberFunctionKindUnknown_get();
  public final static native int eTypeHasChildren_get();
  public final static native int eTypeHasValue_get();
  public final static native int eTypeIsArray_get();
  public final static native int eTypeIsBlock_get();
  public final static native int eTypeIsBuiltIn_get();
  public final static native int eTypeIsClass_get();
  public final static native int eTypeIsCPlusPlus_get();
  public final static native int eTypeIsEnumeration_get();
  public final static native int eTypeIsFuncPrototype_get();
  public final static native int eTypeIsMember_get();
  public final static native int eTypeIsObjC_get();
  public final static native int eTypeIsPointer_get();
  public final static native int eTypeIsReference_get();
  public final static native int eTypeIsStructUnion_get();
  public final static native int eTypeIsTemplate_get();
  public final static native int eTypeIsTypedef_get();
  public final static native int eTypeIsVector_get();
  public final static native int eTypeIsScalar_get();
  public final static native int eTypeIsInteger_get();
  public final static native int eTypeIsFloat_get();
  public final static native int eTypeIsComplex_get();
  public final static native int eTypeIsSigned_get();
  public final static native int eTypeInstanceIsPointer_get();
  public final static native int eCommandRequiresTarget_get();
  public final static native int eCommandRequiresProcess_get();
  public final static native int eCommandRequiresThread_get();
  public final static native int eCommandRequiresFrame_get();
  public final static native int eCommandRequiresRegContext_get();
  public final static native int eCommandTryTargetAPILock_get();
  public final static native int eCommandProcessMustBeLaunched_get();
  public final static native int eCommandProcessMustBePaused_get();
  public final static native int eCommandProcessMustBeTraced_get();
  public final static native int eTypeSummaryCapped_get();
  public final static native int eTypeSummaryUncapped_get();
  public final static native int eSaveCoreUnspecified_get();
  public final static native int eSaveCoreFull_get();
  public final static native int eSaveCoreDirtyOnly_get();
  public final static native int eSaveCoreStackOnly_get();
  public final static native int eTraceItemKindError_get();
  public final static native int eTraceCursorSeekTypeBeginning_get();
  public final static native long new_SBAddress__SWIG_0();
  public final static native long new_SBAddress__SWIG_1(long jarg1, SBAddress jarg1_);
  public final static native long new_SBAddress__SWIG_2(long jarg1, SBSection jarg1_, java.math.BigInteger jarg2);
  public final static native long new_SBAddress__SWIG_3(java.math.BigInteger jarg1, long jarg2, SBTarget jarg2_);
  public final static native void delete_SBAddress(long jarg1);
  public final static native boolean SBAddress_IsValid(long jarg1, SBAddress jarg1_);
  public final static native void SBAddress_Clear(long jarg1, SBAddress jarg1_);
  public final static native java.math.BigInteger SBAddress_GetFileAddress(long jarg1, SBAddress jarg1_);
  public final static native java.math.BigInteger SBAddress_GetLoadAddress(long jarg1, SBAddress jarg1_, long jarg2, SBTarget jarg2_);
  public final static native void SBAddress_SetLoadAddress(long jarg1, SBAddress jarg1_, java.math.BigInteger jarg2, long jarg3, SBTarget jarg3_);
  public final static native boolean SBAddress_OffsetAddress(long jarg1, SBAddress jarg1_, java.math.BigInteger jarg2);
  public final static native boolean SBAddress_GetDescription(long jarg1, SBAddress jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBAddress_GetSection(long jarg1, SBAddress jarg1_);
  public final static native java.math.BigInteger SBAddress_GetOffset(long jarg1, SBAddress jarg1_);
  public final static native void SBAddress_SetAddress(long jarg1, SBAddress jarg1_, long jarg2, SBSection jarg2_, java.math.BigInteger jarg3);
  public final static native long SBAddress_GetSymbolContext(long jarg1, SBAddress jarg1_, long jarg2);
  public final static native long SBAddress_GetModule(long jarg1, SBAddress jarg1_);
  public final static native long SBAddress_GetCompileUnit(long jarg1, SBAddress jarg1_);
  public final static native long SBAddress_GetFunction(long jarg1, SBAddress jarg1_);
  public final static native long SBAddress_GetBlock(long jarg1, SBAddress jarg1_);
  public final static native long SBAddress_GetSymbol(long jarg1, SBAddress jarg1_);
  public final static native long SBAddress_GetLineEntry(long jarg1, SBAddress jarg1_);
  public final static native String SBAddress___repr__(long jarg1, SBAddress jarg1_);
  public final static native long new_SBAttachInfo__SWIG_0();
  public final static native long new_SBAttachInfo__SWIG_1(java.math.BigInteger jarg1);
  public final static native long new_SBAttachInfo__SWIG_2(String jarg1, boolean jarg2);
  public final static native long new_SBAttachInfo__SWIG_3(String jarg1, boolean jarg2, boolean jarg3);
  public final static native long new_SBAttachInfo__SWIG_4(long jarg1, SBAttachInfo jarg1_);
  public final static native java.math.BigInteger SBAttachInfo_GetProcessID(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetProcessID(long jarg1, SBAttachInfo jarg1_, java.math.BigInteger jarg2);
  public final static native void SBAttachInfo_SetExecutable__SWIG_0(long jarg1, SBAttachInfo jarg1_, String jarg2);
  public final static native void SBAttachInfo_SetExecutable__SWIG_1(long jarg1, SBAttachInfo jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native boolean SBAttachInfo_GetWaitForLaunch(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetWaitForLaunch__SWIG_0(long jarg1, SBAttachInfo jarg1_, boolean jarg2);
  public final static native void SBAttachInfo_SetWaitForLaunch__SWIG_1(long jarg1, SBAttachInfo jarg1_, boolean jarg2, boolean jarg3);
  public final static native boolean SBAttachInfo_GetIgnoreExisting(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetIgnoreExisting(long jarg1, SBAttachInfo jarg1_, boolean jarg2);
  public final static native long SBAttachInfo_GetResumeCount(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetResumeCount(long jarg1, SBAttachInfo jarg1_, long jarg2);
  public final static native String SBAttachInfo_GetProcessPluginName(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetProcessPluginName(long jarg1, SBAttachInfo jarg1_, String jarg2);
  public final static native long SBAttachInfo_GetUserID(long jarg1, SBAttachInfo jarg1_);
  public final static native long SBAttachInfo_GetGroupID(long jarg1, SBAttachInfo jarg1_);
  public final static native boolean SBAttachInfo_UserIDIsValid(long jarg1, SBAttachInfo jarg1_);
  public final static native boolean SBAttachInfo_GroupIDIsValid(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetUserID(long jarg1, SBAttachInfo jarg1_, long jarg2);
  public final static native void SBAttachInfo_SetGroupID(long jarg1, SBAttachInfo jarg1_, long jarg2);
  public final static native long SBAttachInfo_GetEffectiveUserID(long jarg1, SBAttachInfo jarg1_);
  public final static native long SBAttachInfo_GetEffectiveGroupID(long jarg1, SBAttachInfo jarg1_);
  public final static native boolean SBAttachInfo_EffectiveUserIDIsValid(long jarg1, SBAttachInfo jarg1_);
  public final static native boolean SBAttachInfo_EffectiveGroupIDIsValid(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetEffectiveUserID(long jarg1, SBAttachInfo jarg1_, long jarg2);
  public final static native void SBAttachInfo_SetEffectiveGroupID(long jarg1, SBAttachInfo jarg1_, long jarg2);
  public final static native java.math.BigInteger SBAttachInfo_GetParentProcessID(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetParentProcessID(long jarg1, SBAttachInfo jarg1_, java.math.BigInteger jarg2);
  public final static native boolean SBAttachInfo_ParentProcessIDIsValid(long jarg1, SBAttachInfo jarg1_);
  public final static native long SBAttachInfo_GetListener(long jarg1, SBAttachInfo jarg1_);
  public final static native void SBAttachInfo_SetListener(long jarg1, SBAttachInfo jarg1_, long jarg2, SBListener jarg2_);
  public final static native void delete_SBAttachInfo(long jarg1);
  public final static native long new_SBBlock__SWIG_0();
  public final static native long new_SBBlock__SWIG_1(long jarg1, SBBlock jarg1_);
  public final static native void delete_SBBlock(long jarg1);
  public final static native boolean SBBlock_IsInlined(long jarg1, SBBlock jarg1_);
  public final static native boolean SBBlock_IsValid(long jarg1, SBBlock jarg1_);
  public final static native String SBBlock_GetInlinedName(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetInlinedCallSiteFile(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetInlinedCallSiteLine(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetInlinedCallSiteColumn(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetParent(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetContainingInlinedBlock(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetSibling(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetFirstChild(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetNumRanges(long jarg1, SBBlock jarg1_);
  public final static native long SBBlock_GetRangeStartAddress(long jarg1, SBBlock jarg1_, long jarg2);
  public final static native long SBBlock_GetRangeEndAddress(long jarg1, SBBlock jarg1_, long jarg2);
  public final static native long SBBlock_GetRangeIndexForBlockAddress(long jarg1, SBBlock jarg1_, long jarg2, SBAddress jarg2_);
  public final static native boolean SBBlock_GetDescription(long jarg1, SBBlock jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBBlock_GetVariables__SWIG_0(long jarg1, SBBlock jarg1_, long jarg2, SBFrame jarg2_, boolean jarg3, boolean jarg4, boolean jarg5, int jarg6);
  public final static native long SBBlock_GetVariables__SWIG_1(long jarg1, SBBlock jarg1_, long jarg2, SBTarget jarg2_, boolean jarg3, boolean jarg4, boolean jarg5);
  public final static native String SBBlock___repr__(long jarg1, SBBlock jarg1_);
  public final static native long new_SBBreakpoint__SWIG_0();
  public final static native long new_SBBreakpoint__SWIG_1(long jarg1, SBBreakpoint jarg1_);
  public final static native void delete_SBBreakpoint(long jarg1);
  public final static native int SBBreakpoint_GetID(long jarg1, SBBreakpoint jarg1_);
  public final static native boolean SBBreakpoint_IsValid(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_ClearAllBreakpointSites(long jarg1, SBBreakpoint jarg1_);
  public final static native long SBBreakpoint_GetTarget(long jarg1, SBBreakpoint jarg1_);
  public final static native long SBBreakpoint_FindLocationByAddress(long jarg1, SBBreakpoint jarg1_, java.math.BigInteger jarg2);
  public final static native int SBBreakpoint_FindLocationIDByAddress(long jarg1, SBBreakpoint jarg1_, java.math.BigInteger jarg2);
  public final static native long SBBreakpoint_FindLocationByID(long jarg1, SBBreakpoint jarg1_, int jarg2);
  public final static native long SBBreakpoint_GetLocationAtIndex(long jarg1, SBBreakpoint jarg1_, long jarg2);
  public final static native void SBBreakpoint_SetEnabled(long jarg1, SBBreakpoint jarg1_, boolean jarg2);
  public final static native boolean SBBreakpoint_IsEnabled(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetOneShot(long jarg1, SBBreakpoint jarg1_, boolean jarg2);
  public final static native boolean SBBreakpoint_IsOneShot(long jarg1, SBBreakpoint jarg1_);
  public final static native boolean SBBreakpoint_IsInternal(long jarg1, SBBreakpoint jarg1_);
  public final static native long SBBreakpoint_GetHitCount(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetIgnoreCount(long jarg1, SBBreakpoint jarg1_, long jarg2);
  public final static native long SBBreakpoint_GetIgnoreCount(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetCondition(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native String SBBreakpoint_GetCondition(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetAutoContinue(long jarg1, SBBreakpoint jarg1_, boolean jarg2);
  public final static native boolean SBBreakpoint_GetAutoContinue(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetThreadID(long jarg1, SBBreakpoint jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger SBBreakpoint_GetThreadID(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetThreadIndex(long jarg1, SBBreakpoint jarg1_, long jarg2);
  public final static native long SBBreakpoint_GetThreadIndex(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetThreadName(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native String SBBreakpoint_GetThreadName(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetQueueName(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native String SBBreakpoint_GetQueueName(long jarg1, SBBreakpoint jarg1_);
  public final static native void SBBreakpoint_SetScriptCallbackFunction__SWIG_0(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native long SBBreakpoint_SetScriptCallbackFunction__SWIG_1(long jarg1, SBBreakpoint jarg1_, String jarg2, long jarg3, SBStructuredData jarg3_);
  public final static native long SBBreakpoint_SetScriptCallbackBody(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native void SBBreakpoint_SetCommandLineCommands(long jarg1, SBBreakpoint jarg1_, long jarg2, SBStringList jarg2_);
  public final static native boolean SBBreakpoint_GetCommandLineCommands(long jarg1, SBBreakpoint jarg1_, long jarg2, SBStringList jarg2_);
  public final static native boolean SBBreakpoint_AddName(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native long SBBreakpoint_AddNameWithErrorHandling(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native void SBBreakpoint_RemoveName(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native boolean SBBreakpoint_MatchesName(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native void SBBreakpoint_GetNames(long jarg1, SBBreakpoint jarg1_, long jarg2, SBStringList jarg2_);
  public final static native long SBBreakpoint_GetNumResolvedLocations(long jarg1, SBBreakpoint jarg1_);
  public final static native long SBBreakpoint_GetNumLocations(long jarg1, SBBreakpoint jarg1_);
  public final static native boolean SBBreakpoint_GetDescription__SWIG_0(long jarg1, SBBreakpoint jarg1_, long jarg2, SBStream jarg2_);
  public final static native boolean SBBreakpoint_GetDescription__SWIG_1(long jarg1, SBBreakpoint jarg1_, long jarg2, SBStream jarg2_, boolean jarg3);
  public final static native long SBBreakpoint_AddLocation(long jarg1, SBBreakpoint jarg1_, long jarg2, SBAddress jarg2_);
  public final static native long SBBreakpoint_SerializeToStructuredData(long jarg1, SBBreakpoint jarg1_);
  public final static native boolean SBBreakpoint_EventIsBreakpointEvent(long jarg1, SBEvent jarg1_);
  public final static native int SBBreakpoint_GetBreakpointEventTypeFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBBreakpoint_GetBreakpointFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBBreakpoint_GetBreakpointLocationAtIndexFromEvent(long jarg1, SBEvent jarg1_, long jarg2);
  public final static native long SBBreakpoint_GetNumBreakpointLocationsFromEvent(long jarg1, SBEvent jarg1_);
  public final static native boolean SBBreakpoint_IsHardware(long jarg1, SBBreakpoint jarg1_);
  public final static native String SBBreakpoint___repr__(long jarg1, SBBreakpoint jarg1_);
  public final static native long new_SBBreakpointList(long jarg1, SBTarget jarg1_);
  public final static native void delete_SBBreakpointList(long jarg1);
  public final static native long SBBreakpointList_GetSize(long jarg1, SBBreakpointList jarg1_);
  public final static native long SBBreakpointList_GetBreakpointAtIndex(long jarg1, SBBreakpointList jarg1_, long jarg2);
  public final static native long SBBreakpointList_FindBreakpointByID(long jarg1, SBBreakpointList jarg1_, int jarg2);
  public final static native void SBBreakpointList_Append(long jarg1, SBBreakpointList jarg1_, long jarg2, SBBreakpoint jarg2_);
  public final static native boolean SBBreakpointList_AppendIfUnique(long jarg1, SBBreakpointList jarg1_, long jarg2, SBBreakpoint jarg2_);
  public final static native void SBBreakpointList_AppendByID(long jarg1, SBBreakpointList jarg1_, int jarg2);
  public final static native void SBBreakpointList_Clear(long jarg1, SBBreakpointList jarg1_);
  public final static native long new_SBBreakpointLocation__SWIG_0();
  public final static native long new_SBBreakpointLocation__SWIG_1(long jarg1, SBBreakpointLocation jarg1_);
  public final static native void delete_SBBreakpointLocation(long jarg1);
  public final static native int SBBreakpointLocation_GetID(long jarg1, SBBreakpointLocation jarg1_);
  public final static native boolean SBBreakpointLocation_IsValid(long jarg1, SBBreakpointLocation jarg1_);
  public final static native long SBBreakpointLocation_GetAddress(long jarg1, SBBreakpointLocation jarg1_);
  public final static native java.math.BigInteger SBBreakpointLocation_GetLoadAddress(long jarg1, SBBreakpointLocation jarg1_);
  public final static native void SBBreakpointLocation_SetEnabled(long jarg1, SBBreakpointLocation jarg1_, boolean jarg2);
  public final static native boolean SBBreakpointLocation_IsEnabled(long jarg1, SBBreakpointLocation jarg1_);
  public final static native long SBBreakpointLocation_GetHitCount(long jarg1, SBBreakpointLocation jarg1_);
  public final static native long SBBreakpointLocation_GetIgnoreCount(long jarg1, SBBreakpointLocation jarg1_);
  public final static native void SBBreakpointLocation_SetIgnoreCount(long jarg1, SBBreakpointLocation jarg1_, long jarg2);
  public final static native void SBBreakpointLocation_SetCondition(long jarg1, SBBreakpointLocation jarg1_, String jarg2);
  public final static native String SBBreakpointLocation_GetCondition(long jarg1, SBBreakpointLocation jarg1_);
  public final static native boolean SBBreakpointLocation_GetAutoContinue(long jarg1, SBBreakpointLocation jarg1_);
  public final static native void SBBreakpointLocation_SetAutoContinue(long jarg1, SBBreakpointLocation jarg1_, boolean jarg2);
  public final static native void SBBreakpointLocation_SetScriptCallbackFunction__SWIG_0(long jarg1, SBBreakpointLocation jarg1_, String jarg2);
  public final static native long SBBreakpointLocation_SetScriptCallbackFunction__SWIG_1(long jarg1, SBBreakpointLocation jarg1_, String jarg2, long jarg3, SBStructuredData jarg3_);
  public final static native long SBBreakpointLocation_SetScriptCallbackBody(long jarg1, SBBreakpointLocation jarg1_, String jarg2);
  public final static native void SBBreakpointLocation_SetCommandLineCommands(long jarg1, SBBreakpointLocation jarg1_, long jarg2, SBStringList jarg2_);
  public final static native boolean SBBreakpointLocation_GetCommandLineCommands(long jarg1, SBBreakpointLocation jarg1_, long jarg2, SBStringList jarg2_);
  public final static native void SBBreakpointLocation_SetThreadID(long jarg1, SBBreakpointLocation jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger SBBreakpointLocation_GetThreadID(long jarg1, SBBreakpointLocation jarg1_);
  public final static native void SBBreakpointLocation_SetThreadIndex(long jarg1, SBBreakpointLocation jarg1_, long jarg2);
  public final static native long SBBreakpointLocation_GetThreadIndex(long jarg1, SBBreakpointLocation jarg1_);
  public final static native void SBBreakpointLocation_SetThreadName(long jarg1, SBBreakpointLocation jarg1_, String jarg2);
  public final static native String SBBreakpointLocation_GetThreadName(long jarg1, SBBreakpointLocation jarg1_);
  public final static native void SBBreakpointLocation_SetQueueName(long jarg1, SBBreakpointLocation jarg1_, String jarg2);
  public final static native String SBBreakpointLocation_GetQueueName(long jarg1, SBBreakpointLocation jarg1_);
  public final static native boolean SBBreakpointLocation_IsResolved(long jarg1, SBBreakpointLocation jarg1_);
  public final static native boolean SBBreakpointLocation_GetDescription(long jarg1, SBBreakpointLocation jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native long SBBreakpointLocation_GetBreakpoint(long jarg1, SBBreakpointLocation jarg1_);
  public final static native String SBBreakpointLocation___repr__(long jarg1, SBBreakpointLocation jarg1_);
  public final static native long new_SBBreakpointName__SWIG_0();
  public final static native long new_SBBreakpointName__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long new_SBBreakpointName__SWIG_2(long jarg1, SBBreakpoint jarg1_, String jarg2);
  public final static native long new_SBBreakpointName__SWIG_3(long jarg1, SBBreakpointName jarg1_);
  public final static native void delete_SBBreakpointName(long jarg1);
  public final static native boolean SBBreakpointName_IsValid(long jarg1, SBBreakpointName jarg1_);
  public final static native String SBBreakpointName_GetName(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetEnabled(long jarg1, SBBreakpointName jarg1_, boolean jarg2);
  public final static native boolean SBBreakpointName_IsEnabled(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetOneShot(long jarg1, SBBreakpointName jarg1_, boolean jarg2);
  public final static native boolean SBBreakpointName_IsOneShot(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetIgnoreCount(long jarg1, SBBreakpointName jarg1_, long jarg2);
  public final static native long SBBreakpointName_GetIgnoreCount(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetCondition(long jarg1, SBBreakpointName jarg1_, String jarg2);
  public final static native String SBBreakpointName_GetCondition(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetAutoContinue(long jarg1, SBBreakpointName jarg1_, boolean jarg2);
  public final static native boolean SBBreakpointName_GetAutoContinue(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetThreadID(long jarg1, SBBreakpointName jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger SBBreakpointName_GetThreadID(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetThreadIndex(long jarg1, SBBreakpointName jarg1_, long jarg2);
  public final static native long SBBreakpointName_GetThreadIndex(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetThreadName(long jarg1, SBBreakpointName jarg1_, String jarg2);
  public final static native String SBBreakpointName_GetThreadName(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetQueueName(long jarg1, SBBreakpointName jarg1_, String jarg2);
  public final static native String SBBreakpointName_GetQueueName(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetScriptCallbackFunction__SWIG_0(long jarg1, SBBreakpointName jarg1_, String jarg2);
  public final static native long SBBreakpointName_SetScriptCallbackFunction__SWIG_1(long jarg1, SBBreakpointName jarg1_, String jarg2, long jarg3, SBStructuredData jarg3_);
  public final static native void SBBreakpointName_SetCommandLineCommands(long jarg1, SBBreakpointName jarg1_, long jarg2, SBStringList jarg2_);
  public final static native boolean SBBreakpointName_GetCommandLineCommands(long jarg1, SBBreakpointName jarg1_, long jarg2, SBStringList jarg2_);
  public final static native long SBBreakpointName_SetScriptCallbackBody(long jarg1, SBBreakpointName jarg1_, String jarg2);
  public final static native String SBBreakpointName_GetHelpString(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetHelpString(long jarg1, SBBreakpointName jarg1_, String jarg2);
  public final static native boolean SBBreakpointName_GetAllowList(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetAllowList(long jarg1, SBBreakpointName jarg1_, boolean jarg2);
  public final static native boolean SBBreakpointName_GetAllowDelete(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetAllowDelete(long jarg1, SBBreakpointName jarg1_, boolean jarg2);
  public final static native boolean SBBreakpointName_GetAllowDisable(long jarg1, SBBreakpointName jarg1_);
  public final static native void SBBreakpointName_SetAllowDisable(long jarg1, SBBreakpointName jarg1_, boolean jarg2);
  public final static native boolean SBBreakpointName_GetDescription(long jarg1, SBBreakpointName jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBBreakpointName___repr__(long jarg1, SBBreakpointName jarg1_);
  public final static native long new_SBBroadcaster__SWIG_0();
  public final static native long new_SBBroadcaster__SWIG_1(String jarg1);
  public final static native long new_SBBroadcaster__SWIG_2(long jarg1, SBBroadcaster jarg1_);
  public final static native void delete_SBBroadcaster(long jarg1);
  public final static native boolean SBBroadcaster_IsValid(long jarg1, SBBroadcaster jarg1_);
  public final static native void SBBroadcaster_Clear(long jarg1, SBBroadcaster jarg1_);
  public final static native void SBBroadcaster_BroadcastEventByType__SWIG_0(long jarg1, SBBroadcaster jarg1_, long jarg2, boolean jarg3);
  public final static native void SBBroadcaster_BroadcastEventByType__SWIG_1(long jarg1, SBBroadcaster jarg1_, long jarg2);
  public final static native void SBBroadcaster_BroadcastEvent__SWIG_0(long jarg1, SBBroadcaster jarg1_, long jarg2, SBEvent jarg2_, boolean jarg3);
  public final static native void SBBroadcaster_BroadcastEvent__SWIG_1(long jarg1, SBBroadcaster jarg1_, long jarg2, SBEvent jarg2_);
  public final static native void SBBroadcaster_AddInitialEventsToListener(long jarg1, SBBroadcaster jarg1_, long jarg2, SBListener jarg2_, long jarg3);
  public final static native long SBBroadcaster_AddListener(long jarg1, SBBroadcaster jarg1_, long jarg2, SBListener jarg2_, long jarg3);
  public final static native String SBBroadcaster_GetName(long jarg1, SBBroadcaster jarg1_);
  public final static native boolean SBBroadcaster_EventTypeHasListeners(long jarg1, SBBroadcaster jarg1_, long jarg2);
  public final static native boolean SBBroadcaster_RemoveListener__SWIG_0(long jarg1, SBBroadcaster jarg1_, long jarg2, SBListener jarg2_, long jarg3);
  public final static native boolean SBBroadcaster_RemoveListener__SWIG_1(long jarg1, SBBroadcaster jarg1_, long jarg2, SBListener jarg2_);
  public final static native int SBCommandInterpreter_eBroadcastBitThreadShouldExit_get();
  public final static native int SBCommandInterpreter_eBroadcastBitResetPrompt_get();
  public final static native int SBCommandInterpreter_eBroadcastBitQuitCommandReceived_get();
  public final static native int SBCommandInterpreter_eBroadcastBitAsynchronousOutputData_get();
  public final static native int SBCommandInterpreter_eBroadcastBitAsynchronousErrorData_get();
  public final static native long new_SBCommandInterpreter(long jarg1, SBCommandInterpreter jarg1_);
  public final static native void delete_SBCommandInterpreter(long jarg1);
  public final static native String SBCommandInterpreter_GetArgumentTypeAsCString(int jarg1);
  public final static native String SBCommandInterpreter_GetArgumentDescriptionAsCString(int jarg1);
  public final static native boolean SBCommandInterpreter_EventIsCommandInterpreterEvent(long jarg1, SBEvent jarg1_);
  public final static native boolean SBCommandInterpreter_IsValid(long jarg1, SBCommandInterpreter jarg1_);
  public final static native String SBCommandInterpreter_GetIOHandlerControlSequence(long jarg1, SBCommandInterpreter jarg1_, char jarg2);
  public final static native boolean SBCommandInterpreter_GetPromptOnQuit(long jarg1, SBCommandInterpreter jarg1_);
  public final static native void SBCommandInterpreter_SetPromptOnQuit(long jarg1, SBCommandInterpreter jarg1_, boolean jarg2);
  public final static native void SBCommandInterpreter_AllowExitCodeOnQuit(long jarg1, SBCommandInterpreter jarg1_, boolean jarg2);
  public final static native boolean SBCommandInterpreter_HasCustomQuitExitCode(long jarg1, SBCommandInterpreter jarg1_);
  public final static native int SBCommandInterpreter_GetQuitStatus(long jarg1, SBCommandInterpreter jarg1_);
  public final static native void SBCommandInterpreter_ResolveCommand(long jarg1, SBCommandInterpreter jarg1_, String jarg2, long jarg3, SBCommandReturnObject jarg3_);
  public final static native boolean SBCommandInterpreter_CommandExists(long jarg1, SBCommandInterpreter jarg1_, String jarg2);
  public final static native boolean SBCommandInterpreter_AliasExists(long jarg1, SBCommandInterpreter jarg1_, String jarg2);
  public final static native long SBCommandInterpreter_GetBroadcaster(long jarg1, SBCommandInterpreter jarg1_);
  public final static native String SBCommandInterpreter_GetBroadcasterClass();
  public final static native boolean SBCommandInterpreter_HasCommands(long jarg1, SBCommandInterpreter jarg1_);
  public final static native boolean SBCommandInterpreter_HasAliases(long jarg1, SBCommandInterpreter jarg1_);
  public final static native boolean SBCommandInterpreter_HasAliasOptions(long jarg1, SBCommandInterpreter jarg1_);
  public final static native boolean SBCommandInterpreter_IsInteractive(long jarg1, SBCommandInterpreter jarg1_);
  public final static native long SBCommandInterpreter_GetProcess(long jarg1, SBCommandInterpreter jarg1_);
  public final static native long SBCommandInterpreter_GetDebugger(long jarg1, SBCommandInterpreter jarg1_);
  public final static native void SBCommandInterpreter_SourceInitFileInHomeDirectory(long jarg1, SBCommandInterpreter jarg1_, long jarg2, SBCommandReturnObject jarg2_);
  public final static native void SBCommandInterpreter_SourceInitFileInCurrentWorkingDirectory(long jarg1, SBCommandInterpreter jarg1_, long jarg2, SBCommandReturnObject jarg2_);
  public final static native int SBCommandInterpreter_HandleCommand__SWIG_0(long jarg1, SBCommandInterpreter jarg1_, String jarg2, long jarg3, SBCommandReturnObject jarg3_, boolean jarg4);
  public final static native int SBCommandInterpreter_HandleCommand__SWIG_1(long jarg1, SBCommandInterpreter jarg1_, String jarg2, long jarg3, SBCommandReturnObject jarg3_);
  public final static native int SBCommandInterpreter_HandleCommand__SWIG_2(long jarg1, SBCommandInterpreter jarg1_, String jarg2, long jarg3, SBExecutionContext jarg3_, long jarg4, SBCommandReturnObject jarg4_, boolean jarg5);
  public final static native int SBCommandInterpreter_HandleCommand__SWIG_3(long jarg1, SBCommandInterpreter jarg1_, String jarg2, long jarg3, SBExecutionContext jarg3_, long jarg4, SBCommandReturnObject jarg4_);
  public final static native void SBCommandInterpreter_HandleCommandsFromFile(long jarg1, SBCommandInterpreter jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBExecutionContext jarg3_, long jarg4, SBCommandInterpreterRunOptions jarg4_, long jarg5, SBCommandReturnObject jarg5_);
  public final static native int SBCommandInterpreter_HandleCompletion(long jarg1, SBCommandInterpreter jarg1_, String jarg2, long jarg3, int jarg4, int jarg5, long jarg6, SBStringList jarg6_);
  public final static native int SBCommandInterpreter_HandleCompletionWithDescriptions(long jarg1, SBCommandInterpreter jarg1_, String jarg2, long jarg3, int jarg4, int jarg5, long jarg6, SBStringList jarg6_, long jarg7, SBStringList jarg7_);
  public final static native boolean SBCommandInterpreter_IsActive(long jarg1, SBCommandInterpreter jarg1_);
  public final static native boolean SBCommandInterpreter_WasInterrupted(long jarg1, SBCommandInterpreter jarg1_);
  public final static native long new_SBCommandInterpreterRunOptions();
  public final static native void delete_SBCommandInterpreterRunOptions(long jarg1);
  public final static native boolean SBCommandInterpreterRunOptions_GetStopOnContinue(long jarg1, SBCommandInterpreterRunOptions jarg1_);
  public final static native void SBCommandInterpreterRunOptions_SetStopOnContinue(long jarg1, SBCommandInterpreterRunOptions jarg1_, boolean jarg2);
  public final static native boolean SBCommandInterpreterRunOptions_GetStopOnError(long jarg1, SBCommandInterpreterRunOptions jarg1_);
  public final static native void SBCommandInterpreterRunOptions_SetStopOnError(long jarg1, SBCommandInterpreterRunOptions jarg1_, boolean jarg2);
  public final static native boolean SBCommandInterpreterRunOptions_GetStopOnCrash(long jarg1, SBCommandInterpreterRunOptions jarg1_);
  public final static native void SBCommandInterpreterRunOptions_SetStopOnCrash(long jarg1, SBCommandInterpreterRunOptions jarg1_, boolean jarg2);
  public final static native boolean SBCommandInterpreterRunOptions_GetEchoCommands(long jarg1, SBCommandInterpreterRunOptions jarg1_);
  public final static native void SBCommandInterpreterRunOptions_SetEchoCommands(long jarg1, SBCommandInterpreterRunOptions jarg1_, boolean jarg2);
  public final static native boolean SBCommandInterpreterRunOptions_GetPrintResults(long jarg1, SBCommandInterpreterRunOptions jarg1_);
  public final static native void SBCommandInterpreterRunOptions_SetPrintResults(long jarg1, SBCommandInterpreterRunOptions jarg1_, boolean jarg2);
  public final static native boolean SBCommandInterpreterRunOptions_GetPrintErrors(long jarg1, SBCommandInterpreterRunOptions jarg1_);
  public final static native void SBCommandInterpreterRunOptions_SetPrintErrors(long jarg1, SBCommandInterpreterRunOptions jarg1_, boolean jarg2);
  public final static native boolean SBCommandInterpreterRunOptions_GetAddToHistory(long jarg1, SBCommandInterpreterRunOptions jarg1_);
  public final static native void SBCommandInterpreterRunOptions_SetAddToHistory(long jarg1, SBCommandInterpreterRunOptions jarg1_, boolean jarg2);
  public final static native long new_SBCommandReturnObject__SWIG_0();
  public final static native long new_SBCommandReturnObject__SWIG_1(long jarg1, SBCommandReturnObject jarg1_);
  public final static native void delete_SBCommandReturnObject(long jarg1);
  public final static native boolean SBCommandReturnObject_IsValid(long jarg1, SBCommandReturnObject jarg1_);
  public final static native String SBCommandReturnObject_GetOutput__SWIG_0(long jarg1, SBCommandReturnObject jarg1_);
  public final static native String SBCommandReturnObject_GetError__SWIG_0(long jarg1, SBCommandReturnObject jarg1_);
  public final static native long SBCommandReturnObject_GetOutputSize(long jarg1, SBCommandReturnObject jarg1_);
  public final static native long SBCommandReturnObject_GetErrorSize(long jarg1, SBCommandReturnObject jarg1_);
  public final static native String SBCommandReturnObject_GetOutput__SWIG_1(long jarg1, SBCommandReturnObject jarg1_, boolean jarg2);
  public final static native String SBCommandReturnObject_GetError__SWIG_1(long jarg1, SBCommandReturnObject jarg1_, boolean jarg2);
  public final static native long SBCommandReturnObject_PutOutput__SWIG_0(long jarg1, SBCommandReturnObject jarg1_, long jarg2, SBFile jarg2_);
  public final static native long SBCommandReturnObject_PutError__SWIG_0(long jarg1, SBCommandReturnObject jarg1_, long jarg2, SBFile jarg2_);
  public final static native long SBCommandReturnObject_PutOutput__SWIG_1(long jarg1, SBCommandReturnObject jarg1_, long jarg2);
  public final static native long SBCommandReturnObject_PutError__SWIG_1(long jarg1, SBCommandReturnObject jarg1_, long jarg2);
  public final static native void SBCommandReturnObject_Clear(long jarg1, SBCommandReturnObject jarg1_);
  public final static native void SBCommandReturnObject_SetStatus(long jarg1, SBCommandReturnObject jarg1_, int jarg2);
  public final static native void SBCommandReturnObject_SetError__SWIG_0(long jarg1, SBCommandReturnObject jarg1_, long jarg2, SBError jarg2_, String jarg3);
  public final static native void SBCommandReturnObject_SetError__SWIG_1(long jarg1, SBCommandReturnObject jarg1_, long jarg2, SBError jarg2_);
  public final static native void SBCommandReturnObject_SetError__SWIG_2(long jarg1, SBCommandReturnObject jarg1_, String jarg2);
  public final static native int SBCommandReturnObject_GetStatus(long jarg1, SBCommandReturnObject jarg1_);
  public final static native boolean SBCommandReturnObject_Succeeded(long jarg1, SBCommandReturnObject jarg1_);
  public final static native boolean SBCommandReturnObject_HasResult(long jarg1, SBCommandReturnObject jarg1_);
  public final static native void SBCommandReturnObject_AppendMessage(long jarg1, SBCommandReturnObject jarg1_, String jarg2);
  public final static native void SBCommandReturnObject_AppendWarning(long jarg1, SBCommandReturnObject jarg1_, String jarg2);
  public final static native boolean SBCommandReturnObject_GetDescription(long jarg1, SBCommandReturnObject jarg1_, long jarg2, SBStream jarg2_);
  public final static native void SBCommandReturnObject_SetImmediateOutputFile__SWIG_0(long jarg1, SBCommandReturnObject jarg1_, long jarg2, SBFile jarg2_);
  public final static native void SBCommandReturnObject_SetImmediateErrorFile__SWIG_0(long jarg1, SBCommandReturnObject jarg1_, long jarg2, SBFile jarg2_);
  public final static native void SBCommandReturnObject_SetImmediateOutputFile__SWIG_1(long jarg1, SBCommandReturnObject jarg1_, long jarg2);
  public final static native void SBCommandReturnObject_SetImmediateErrorFile__SWIG_1(long jarg1, SBCommandReturnObject jarg1_, long jarg2);
  public final static native String SBCommandReturnObject___repr__(long jarg1, SBCommandReturnObject jarg1_);
  public final static native void SBCommandReturnObject_SetImmediateOutputFile__SWIG_2(long jarg1, SBCommandReturnObject jarg1_, long jarg2, boolean jarg3);
  public final static native void SBCommandReturnObject_SetImmediateErrorFile__SWIG_2(long jarg1, SBCommandReturnObject jarg1_, long jarg2, boolean jarg3);
  public final static native void SBCommandReturnObject_PutCString(long jarg1, SBCommandReturnObject jarg1_, String jarg2, int jarg3);
  public final static native void SBCommandReturnObject_Print(long jarg1, SBCommandReturnObject jarg1_, String jarg2);
  public final static native int SBCommunication_eBroadcastBitDisconnected_get();
  public final static native int SBCommunication_eBroadcastBitReadThreadGotBytes_get();
  public final static native int SBCommunication_eBroadcastBitReadThreadDidExit_get();
  public final static native int SBCommunication_eBroadcastBitReadThreadShouldExit_get();
  public final static native int SBCommunication_eBroadcastBitPacketAvailable_get();
  public final static native int SBCommunication_eAllEventBits_get();
  public final static native long new_SBCommunication__SWIG_0();
  public final static native long new_SBCommunication__SWIG_1(String jarg1);
  public final static native void delete_SBCommunication(long jarg1);
  public final static native boolean SBCommunication_IsValid(long jarg1, SBCommunication jarg1_);
  public final static native long SBCommunication_GetBroadcaster(long jarg1, SBCommunication jarg1_);
  public final static native String SBCommunication_GetBroadcasterClass();
  public final static native int SBCommunication_AdoptFileDesriptor(long jarg1, SBCommunication jarg1_, int jarg2, boolean jarg3);
  public final static native int SBCommunication_Connect(long jarg1, SBCommunication jarg1_, String jarg2);
  public final static native int SBCommunication_Disconnect(long jarg1, SBCommunication jarg1_);
  public final static native boolean SBCommunication_IsConnected(long jarg1, SBCommunication jarg1_);
  public final static native boolean SBCommunication_GetCloseOnEOF(long jarg1, SBCommunication jarg1_);
  public final static native void SBCommunication_SetCloseOnEOF(long jarg1, SBCommunication jarg1_, boolean jarg2);
  public final static native long SBCommunication_Read(long jarg1, SBCommunication jarg1_, long jarg2, long jarg3, long jarg4, long jarg5);
  public final static native long SBCommunication_Write(long jarg1, SBCommunication jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native boolean SBCommunication_ReadThreadStart(long jarg1, SBCommunication jarg1_);
  public final static native boolean SBCommunication_ReadThreadStop(long jarg1, SBCommunication jarg1_);
  public final static native boolean SBCommunication_ReadThreadIsRunning(long jarg1, SBCommunication jarg1_);
  public final static native boolean SBCommunication_SetReadThreadBytesReceivedCallback(long jarg1, SBCommunication jarg1_, long jarg2, long jarg3);
  public final static native long new_SBCompileUnit__SWIG_0();
  public final static native long new_SBCompileUnit__SWIG_1(long jarg1, SBCompileUnit jarg1_);
  public final static native void delete_SBCompileUnit(long jarg1);
  public final static native boolean SBCompileUnit_IsValid(long jarg1, SBCompileUnit jarg1_);
  public final static native long SBCompileUnit_GetFileSpec(long jarg1, SBCompileUnit jarg1_);
  public final static native long SBCompileUnit_GetNumLineEntries(long jarg1, SBCompileUnit jarg1_);
  public final static native long SBCompileUnit_GetLineEntryAtIndex(long jarg1, SBCompileUnit jarg1_, long jarg2);
  public final static native long SBCompileUnit_FindLineEntryIndex__SWIG_0(long jarg1, SBCompileUnit jarg1_, long jarg2, SBLineEntry jarg2_, boolean jarg3);
  public final static native long SBCompileUnit_FindLineEntryIndex__SWIG_1(long jarg1, SBCompileUnit jarg1_, long jarg2, SBLineEntry jarg2_);
  public final static native long SBCompileUnit_FindLineEntryIndex__SWIG_2(long jarg1, SBCompileUnit jarg1_, long jarg2, long jarg3, long jarg4, SBFileSpec jarg4_);
  public final static native long SBCompileUnit_FindLineEntryIndex__SWIG_3(long jarg1, SBCompileUnit jarg1_, long jarg2, long jarg3, long jarg4, SBFileSpec jarg4_, boolean jarg5);
  public final static native long SBCompileUnit_GetSupportFileAtIndex(long jarg1, SBCompileUnit jarg1_, long jarg2);
  public final static native long SBCompileUnit_GetNumSupportFiles(long jarg1, SBCompileUnit jarg1_);
  public final static native long SBCompileUnit_FindSupportFileIndex(long jarg1, SBCompileUnit jarg1_, long jarg2, long jarg3, SBFileSpec jarg3_, boolean jarg4);
  public final static native long SBCompileUnit_GetTypes__SWIG_0(long jarg1, SBCompileUnit jarg1_, long jarg2);
  public final static native long SBCompileUnit_GetTypes__SWIG_1(long jarg1, SBCompileUnit jarg1_);
  public final static native int SBCompileUnit_GetLanguage(long jarg1, SBCompileUnit jarg1_);
  public final static native boolean SBCompileUnit_GetDescription(long jarg1, SBCompileUnit jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBCompileUnit___repr__(long jarg1, SBCompileUnit jarg1_);
  public final static native long new_SBData__SWIG_0();
  public final static native long new_SBData__SWIG_1(long jarg1, SBData jarg1_);
  public final static native void delete_SBData(long jarg1);
  public final static native short SBData_GetAddressByteSize(long jarg1, SBData jarg1_);
  public final static native void SBData_SetAddressByteSize(long jarg1, SBData jarg1_, short jarg2);
  public final static native void SBData_Clear(long jarg1, SBData jarg1_);
  public final static native boolean SBData_IsValid(long jarg1, SBData jarg1_);
  public final static native long SBData_GetByteSize(long jarg1, SBData jarg1_);
  public final static native int SBData_GetByteOrder(long jarg1, SBData jarg1_);
  public final static native void SBData_SetByteOrder(long jarg1, SBData jarg1_, int jarg2);
  public final static native float SBData_GetFloat(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native double SBData_GetDouble(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native long SBData_GetLongDouble(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native java.math.BigInteger SBData_GetAddress(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native short SBData_GetUnsignedInt8(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native int SBData_GetUnsignedInt16(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native long SBData_GetUnsignedInt32(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native java.math.BigInteger SBData_GetUnsignedInt64(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native byte SBData_GetSignedInt8(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native short SBData_GetSignedInt16(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native int SBData_GetSignedInt32(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native long SBData_GetSignedInt64(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native String SBData_GetString(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native boolean SBData_GetDescription(long jarg1, SBData jarg1_, long jarg2, SBStream jarg2_, java.math.BigInteger jarg3);
  public final static native long SBData_ReadRawData(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3, long jarg4, long jarg5);
  public final static native void SBData_SetData(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, long jarg3, long jarg4, int jarg5, short jarg6);
  public final static native void SBData_SetDataWithOwnership(long jarg1, SBData jarg1_, long jarg2, SBError jarg2_, long jarg3, long jarg4, int jarg5, short jarg6);
  public final static native boolean SBData_Append(long jarg1, SBData jarg1_, long jarg2, SBData jarg2_);
  public final static native long SBData_CreateDataFromCString(int jarg1, long jarg2, String jarg3);
  public final static native long SBData_CreateDataFromUInt64Array(int jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SBData_CreateDataFromUInt32Array(int jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SBData_CreateDataFromSInt64Array(int jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SBData_CreateDataFromSInt32Array(int jarg1, long jarg2, long jarg3, long jarg4);
  public final static native long SBData_CreateDataFromDoubleArray(int jarg1, long jarg2, long jarg3, long jarg4);
  public final static native boolean SBData_SetDataFromCString(long jarg1, SBData jarg1_, String jarg2);
  public final static native boolean SBData_SetDataFromUInt64Array(long jarg1, SBData jarg1_, long jarg2, long jarg3);
  public final static native boolean SBData_SetDataFromUInt32Array(long jarg1, SBData jarg1_, long jarg2, long jarg3);
  public final static native boolean SBData_SetDataFromSInt64Array(long jarg1, SBData jarg1_, long jarg2, long jarg3);
  public final static native boolean SBData_SetDataFromSInt32Array(long jarg1, SBData jarg1_, long jarg2, long jarg3);
  public final static native boolean SBData_SetDataFromDoubleArray(long jarg1, SBData jarg1_, long jarg2, long jarg3);
  public final static native String SBData___repr__(long jarg1, SBData jarg1_);
  public final static native int SBDebugger_eBroadcastBitProgress_get();
  public final static native int SBDebugger_eBroadcastBitWarning_get();
  public final static native int SBDebugger_eBroadcastBitError_get();
  public final static native String SBDebugger_GetProgressFromEvent(long jarg1, SBEvent jarg1_, java.math.BigInteger[] jarg2, java.math.BigInteger[] jarg3, java.math.BigInteger[] jarg4, boolean[] jarg5);
  public final static native long SBDebugger_GetDiagnosticFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBDebugger_GetBroadcaster(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_Initialize();
  public final static native long SBDebugger_InitializeWithErrorHandling();
  public final static native void SBDebugger_PrintStackTraceOnError();
  public final static native void SBDebugger_Terminate();
  public final static native long SBDebugger_Create__SWIG_0();
  public final static native long SBDebugger_Create__SWIG_1(boolean jarg1);
  public final static native long SBDebugger_Create__SWIG_2(boolean jarg1, long jarg2, long jarg3);
  public final static native void SBDebugger_Destroy(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_MemoryPressureDetected();
  public final static native long new_SBDebugger__SWIG_0();
  public final static native long new_SBDebugger__SWIG_1(long jarg1, SBDebugger jarg1_);
  public final static native void delete_SBDebugger(long jarg1);
  public final static native boolean SBDebugger_IsValid(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_Clear(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_SetAsync(long jarg1, SBDebugger jarg1_, boolean jarg2);
  public final static native boolean SBDebugger_GetAsync(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_SkipLLDBInitFiles(long jarg1, SBDebugger jarg1_, boolean jarg2);
  public final static native long SBDebugger_GetInputFileHandle(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetOutputFileHandle(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetErrorFileHandle(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetSetting__SWIG_0(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native long SBDebugger_GetSetting__SWIG_1(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_SetInputString(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native long SBDebugger_SetInputFile__SWIG_0(long jarg1, SBDebugger jarg1_, long jarg2, SBFile jarg2_);
  public final static native long SBDebugger_SetOutputFile__SWIG_0(long jarg1, SBDebugger jarg1_, long jarg2, SBFile jarg2_);
  public final static native long SBDebugger_SetErrorFile__SWIG_0(long jarg1, SBDebugger jarg1_, long jarg2, SBFile jarg2_);
  public final static native long SBDebugger_SetInputFile__SWIG_1(long jarg1, SBDebugger jarg1_, long jarg2);
  public final static native long SBDebugger_SetOutputFile__SWIG_1(long jarg1, SBDebugger jarg1_, long jarg2);
  public final static native long SBDebugger_SetErrorFile__SWIG_1(long jarg1, SBDebugger jarg1_, long jarg2);
  public final static native long SBDebugger_GetInputFile(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetOutputFile(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetErrorFile(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetCommandInterpreter(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_HandleCommand(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native long SBDebugger_GetListener(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_HandleProcessEvent__SWIG_0(long jarg1, SBDebugger jarg1_, long jarg2, SBProcess jarg2_, long jarg3, SBEvent jarg3_, long jarg4, SBFile jarg4_, long jarg5, SBFile jarg5_);
  public final static native void SBDebugger_HandleProcessEvent__SWIG_1(long jarg1, SBDebugger jarg1_, long jarg2, SBProcess jarg2_, long jarg3, SBEvent jarg3_, long jarg4, long jarg5);
  public final static native long SBDebugger_CreateTarget__SWIG_0(long jarg1, SBDebugger jarg1_, String jarg2, String jarg3, String jarg4, boolean jarg5, long jarg6, SBError jarg6_);
  public final static native long SBDebugger_CreateTargetWithFileAndTargetTriple(long jarg1, SBDebugger jarg1_, String jarg2, String jarg3);
  public final static native long SBDebugger_CreateTargetWithFileAndArch(long jarg1, SBDebugger jarg1_, String jarg2, String jarg3);
  public final static native long SBDebugger_CreateTarget__SWIG_1(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native long SBDebugger_GetDummyTarget(long jarg1, SBDebugger jarg1_);
  public final static native boolean SBDebugger_DeleteTarget(long jarg1, SBDebugger jarg1_, long jarg2, SBTarget jarg2_);
  public final static native long SBDebugger_GetTargetAtIndex(long jarg1, SBDebugger jarg1_, long jarg2);
  public final static native long SBDebugger_GetIndexOfTarget(long jarg1, SBDebugger jarg1_, long jarg2, SBTarget jarg2_);
  public final static native long SBDebugger_FindTargetWithProcessID(long jarg1, SBDebugger jarg1_, java.math.BigInteger jarg2);
  public final static native long SBDebugger_FindTargetWithFileAndArch(long jarg1, SBDebugger jarg1_, String jarg2, String jarg3);
  public final static native long SBDebugger_GetNumTargets(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetSelectedTarget(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_SetSelectedTarget(long jarg1, SBDebugger jarg1_, long jarg2, SBTarget jarg2_);
  public final static native long SBDebugger_GetSelectedPlatform(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_SetSelectedPlatform(long jarg1, SBDebugger jarg1_, long jarg2, SBPlatform jarg2_);
  public final static native long SBDebugger_GetNumPlatforms(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetPlatformAtIndex(long jarg1, SBDebugger jarg1_, long jarg2);
  public final static native long SBDebugger_GetNumAvailablePlatforms(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetAvailablePlatformInfoAtIndex(long jarg1, SBDebugger jarg1_, long jarg2);
  public final static native long SBDebugger_GetSourceManager(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_SetCurrentPlatform(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native boolean SBDebugger_SetCurrentPlatformSDKRoot(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native boolean SBDebugger_SetUseExternalEditor(long jarg1, SBDebugger jarg1_, boolean jarg2);
  public final static native boolean SBDebugger_GetUseExternalEditor(long jarg1, SBDebugger jarg1_);
  public final static native boolean SBDebugger_SetUseColor(long jarg1, SBDebugger jarg1_, boolean jarg2);
  public final static native boolean SBDebugger_GetUseColor(long jarg1, SBDebugger jarg1_);
  public final static native boolean SBDebugger_GetDefaultArchitecture(String jarg1, long jarg2);
  public final static native boolean SBDebugger_SetDefaultArchitecture(String jarg1);
  public final static native int SBDebugger_GetScriptingLanguage(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native String SBDebugger_GetVersionString();
  public final static native String SBDebugger_StateAsCString(int jarg1);
  public final static native long SBDebugger_GetBuildConfiguration();
  public final static native boolean SBDebugger_StateIsRunningState(int jarg1);
  public final static native boolean SBDebugger_StateIsStoppedState(int jarg1);
  public final static native boolean SBDebugger_EnableLog(long jarg1, SBDebugger jarg1_, String jarg2, String[] jarg3);
  public final static native void SBDebugger_SetLoggingCallback(long jarg1, SBDebugger jarg1_, long jarg2, long jarg3);
  public final static native void SBDebugger_DispatchInput(long jarg1, SBDebugger jarg1_, long jarg2, long jarg3);
  public final static native void SBDebugger_DispatchInputInterrupt(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_DispatchInputEndOfFile(long jarg1, SBDebugger jarg1_);
  public final static native String SBDebugger_GetInstanceName(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_FindDebuggerWithID(int jarg1);
  public final static native long SBDebugger_SetInternalVariable(String jarg1, String jarg2, String jarg3);
  public final static native long SBDebugger_GetInternalVariableValue(String jarg1, String jarg2);
  public final static native boolean SBDebugger_GetDescription(long jarg1, SBDebugger jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBDebugger_GetTerminalWidth(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_SetTerminalWidth(long jarg1, SBDebugger jarg1_, long jarg2);
  public final static native java.math.BigInteger SBDebugger_GetID(long jarg1, SBDebugger jarg1_);
  public final static native String SBDebugger_GetPrompt(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_SetPrompt(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native String SBDebugger_GetReproducerPath(long jarg1, SBDebugger jarg1_);
  public final static native int SBDebugger_GetScriptLanguage(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_SetScriptLanguage(long jarg1, SBDebugger jarg1_, int jarg2);
  public final static native boolean SBDebugger_GetCloseInputOnEOF(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_SetCloseInputOnEOF(long jarg1, SBDebugger jarg1_, boolean jarg2);
  public final static native long SBDebugger_GetCategory__SWIG_0(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native long SBDebugger_GetCategory__SWIG_1(long jarg1, SBDebugger jarg1_, int jarg2);
  public final static native long SBDebugger_CreateCategory(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native boolean SBDebugger_DeleteCategory(long jarg1, SBDebugger jarg1_, String jarg2);
  public final static native long SBDebugger_GetNumCategories(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetCategoryAtIndex(long jarg1, SBDebugger jarg1_, long jarg2);
  public final static native long SBDebugger_GetDefaultCategory(long jarg1, SBDebugger jarg1_);
  public final static native long SBDebugger_GetFormatForType(long jarg1, SBDebugger jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native long SBDebugger_GetSummaryForType(long jarg1, SBDebugger jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native long SBDebugger_GetFilterForType(long jarg1, SBDebugger jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native long SBDebugger_GetSyntheticForType(long jarg1, SBDebugger jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native long SBDebugger_GetScriptInterpreterInfo(long jarg1, SBDebugger jarg1_, int jarg2);
  public final static native String SBDebugger___repr__(long jarg1, SBDebugger jarg1_);
  public final static native void SBDebugger_RunCommandInterpreter(long jarg1, SBDebugger jarg1_, boolean jarg2, boolean jarg3, long jarg4, SBCommandInterpreterRunOptions jarg4_, int[] jarg5, boolean[] jarg6, boolean[] jarg7);
  public final static native long SBDebugger_RunREPL(long jarg1, SBDebugger jarg1_, int jarg2, String jarg3);
  public final static native long SBDebugger_LoadTraceFromFile(long jarg1, SBDebugger jarg1_, long jarg2, SBError jarg2_, long jarg3, SBFileSpec jarg3_);
  public final static native long new_SBDeclaration__SWIG_0();
  public final static native long new_SBDeclaration__SWIG_1(long jarg1, SBDeclaration jarg1_);
  public final static native void delete_SBDeclaration(long jarg1);
  public final static native boolean SBDeclaration_IsValid(long jarg1, SBDeclaration jarg1_);
  public final static native long SBDeclaration_GetFileSpec(long jarg1, SBDeclaration jarg1_);
  public final static native long SBDeclaration_GetLine(long jarg1, SBDeclaration jarg1_);
  public final static native long SBDeclaration_GetColumn(long jarg1, SBDeclaration jarg1_);
  public final static native boolean SBDeclaration_GetDescription(long jarg1, SBDeclaration jarg1_, long jarg2, SBStream jarg2_);
  public final static native void SBDeclaration_SetFileSpec(long jarg1, SBDeclaration jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native void SBDeclaration_SetLine(long jarg1, SBDeclaration jarg1_, long jarg2);
  public final static native void SBDeclaration_SetColumn(long jarg1, SBDeclaration jarg1_, long jarg2);
  public final static native String SBDeclaration___repr__(long jarg1, SBDeclaration jarg1_);
  public final static native long new_SBError__SWIG_0();
  public final static native long new_SBError__SWIG_1(long jarg1, SBError jarg1_);
  public final static native void delete_SBError(long jarg1);
  public final static native String SBError_GetCString(long jarg1, SBError jarg1_);
  public final static native void SBError_Clear(long jarg1, SBError jarg1_);
  public final static native boolean SBError_Fail(long jarg1, SBError jarg1_);
  public final static native boolean SBError_Success(long jarg1, SBError jarg1_);
  public final static native long SBError_GetError(long jarg1, SBError jarg1_);
  public final static native int SBError_GetType(long jarg1, SBError jarg1_);
  public final static native void SBError_SetError(long jarg1, SBError jarg1_, long jarg2, int jarg3);
  public final static native void SBError_SetErrorToErrno(long jarg1, SBError jarg1_);
  public final static native void SBError_SetErrorToGenericError(long jarg1, SBError jarg1_);
  public final static native void SBError_SetErrorString(long jarg1, SBError jarg1_, String jarg2);
  public final static native int SBError_SetErrorStringWithFormat__SWIG_0(long jarg1, SBError jarg1_, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native int SBError_SetErrorStringWithFormat__SWIG_1(long jarg1, SBError jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native int SBError_SetErrorStringWithFormat__SWIG_2(long jarg1, SBError jarg1_, String jarg2, String jarg3);
  public final static native int SBError_SetErrorStringWithFormat__SWIG_3(long jarg1, SBError jarg1_, String jarg2);
  public final static native boolean SBError_IsValid(long jarg1, SBError jarg1_);
  public final static native boolean SBError_GetDescription(long jarg1, SBError jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBError___repr__(long jarg1, SBError jarg1_);
  public final static native long new_SBEnvironment__SWIG_0();
  public final static native long new_SBEnvironment__SWIG_1(long jarg1, SBEnvironment jarg1_);
  public final static native void delete_SBEnvironment(long jarg1);
  public final static native long SBEnvironment_GetNumValues(long jarg1, SBEnvironment jarg1_);
  public final static native String SBEnvironment_Get(long jarg1, SBEnvironment jarg1_, String jarg2);
  public final static native String SBEnvironment_GetNameAtIndex(long jarg1, SBEnvironment jarg1_, long jarg2);
  public final static native String SBEnvironment_GetValueAtIndex(long jarg1, SBEnvironment jarg1_, long jarg2);
  public final static native long SBEnvironment_GetEntries(long jarg1, SBEnvironment jarg1_);
  public final static native void SBEnvironment_PutEntry(long jarg1, SBEnvironment jarg1_, String jarg2);
  public final static native void SBEnvironment_SetEntries(long jarg1, SBEnvironment jarg1_, long jarg2, SBStringList jarg2_, boolean jarg3);
  public final static native boolean SBEnvironment_Set(long jarg1, SBEnvironment jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native boolean SBEnvironment_Unset(long jarg1, SBEnvironment jarg1_, String jarg2);
  public final static native void SBEnvironment_Clear(long jarg1, SBEnvironment jarg1_);
  public final static native long new_SBEvent__SWIG_0();
  public final static native long new_SBEvent__SWIG_1(long jarg1, SBEvent jarg1_);
  public final static native long new_SBEvent__SWIG_2(long jarg1, String jarg2, long jarg3);
  public final static native void delete_SBEvent(long jarg1);
  public final static native boolean SBEvent_IsValid(long jarg1, SBEvent jarg1_);
  public final static native String SBEvent_GetDataFlavor(long jarg1, SBEvent jarg1_);
  public final static native long SBEvent_GetType(long jarg1, SBEvent jarg1_);
  public final static native long SBEvent_GetBroadcaster(long jarg1, SBEvent jarg1_);
  public final static native String SBEvent_GetBroadcasterClass(long jarg1, SBEvent jarg1_);
  public final static native boolean SBEvent_BroadcasterMatchesRef(long jarg1, SBEvent jarg1_, long jarg2, SBBroadcaster jarg2_);
  public final static native void SBEvent_Clear(long jarg1, SBEvent jarg1_);
  public final static native String SBEvent_GetCStringFromEvent(long jarg1, SBEvent jarg1_);
  public final static native boolean SBEvent_GetDescription(long jarg1, SBEvent jarg1_, long jarg2, SBStream jarg2_);
  public final static native long new_SBExecutionContext__SWIG_0();
  public final static native long new_SBExecutionContext__SWIG_1(long jarg1, SBExecutionContext jarg1_);
  public final static native long new_SBExecutionContext__SWIG_2(long jarg1, SBTarget jarg1_);
  public final static native long new_SBExecutionContext__SWIG_3(long jarg1, SBProcess jarg1_);
  public final static native long new_SBExecutionContext__SWIG_4(long jarg1, SBThread jarg1_);
  public final static native long new_SBExecutionContext__SWIG_5(long jarg1, SBFrame jarg1_);
  public final static native void delete_SBExecutionContext(long jarg1);
  public final static native long SBExecutionContext_GetTarget(long jarg1, SBExecutionContext jarg1_);
  public final static native long SBExecutionContext_GetProcess(long jarg1, SBExecutionContext jarg1_);
  public final static native long SBExecutionContext_GetThread(long jarg1, SBExecutionContext jarg1_);
  public final static native long SBExecutionContext_GetFrame(long jarg1, SBExecutionContext jarg1_);
  public final static native long new_SBExpressionOptions__SWIG_0();
  public final static native long new_SBExpressionOptions__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native void delete_SBExpressionOptions(long jarg1);
  public final static native boolean SBExpressionOptions_GetCoerceResultToId(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetCoerceResultToId__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetCoerceResultToId__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetUnwindOnError(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetUnwindOnError__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetUnwindOnError__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetIgnoreBreakpoints(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetIgnoreBreakpoints__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetIgnoreBreakpoints__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native int SBExpressionOptions_GetFetchDynamicValue(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetFetchDynamicValue__SWIG_0(long jarg1, SBExpressionOptions jarg1_, int jarg2);
  public final static native void SBExpressionOptions_SetFetchDynamicValue__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native long SBExpressionOptions_GetTimeoutInMicroSeconds(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetTimeoutInMicroSeconds__SWIG_0(long jarg1, SBExpressionOptions jarg1_, long jarg2);
  public final static native void SBExpressionOptions_SetTimeoutInMicroSeconds__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native long SBExpressionOptions_GetOneThreadTimeoutInMicroSeconds(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds__SWIG_0(long jarg1, SBExpressionOptions jarg1_, long jarg2);
  public final static native void SBExpressionOptions_SetOneThreadTimeoutInMicroSeconds__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetTryAllThreads(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetTryAllThreads__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetTryAllThreads__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetStopOthers(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetStopOthers__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetStopOthers__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetTrapExceptions(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetTrapExceptions__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetTrapExceptions__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetLanguage(long jarg1, SBExpressionOptions jarg1_, int jarg2);
  public final static native boolean SBExpressionOptions_GetGenerateDebugInfo(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetGenerateDebugInfo__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetGenerateDebugInfo__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetSuppressPersistentResult(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetSuppressPersistentResult__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetSuppressPersistentResult__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native String SBExpressionOptions_GetPrefix(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetPrefix(long jarg1, SBExpressionOptions jarg1_, String jarg2);
  public final static native void SBExpressionOptions_SetAutoApplyFixIts__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetAutoApplyFixIts__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetAutoApplyFixIts(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetRetriesWithFixIts(long jarg1, SBExpressionOptions jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger SBExpressionOptions_GetRetriesWithFixIts(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetTopLevel(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetTopLevel__SWIG_0(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native void SBExpressionOptions_SetTopLevel__SWIG_1(long jarg1, SBExpressionOptions jarg1_);
  public final static native boolean SBExpressionOptions_GetAllowJIT(long jarg1, SBExpressionOptions jarg1_);
  public final static native void SBExpressionOptions_SetAllowJIT(long jarg1, SBExpressionOptions jarg1_, boolean jarg2);
  public final static native long new_SBFile__SWIG_0();
  public final static native long new_SBFile__SWIG_1(int jarg1, String jarg2, boolean jarg3);
  public final static native long new_SBFile__SWIG_2(long jarg1);
  public final static native long SBFile_MakeBorrowed(long jarg1);
  public final static native long SBFile_MakeForcingIOMethods(long jarg1);
  public final static native long SBFile_MakeBorrowedForcingIOMethods(long jarg1);
  public final static native void delete_SBFile(long jarg1);
  public final static native long SBFile_Read(long jarg1, SBFile jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native long SBFile_Write(long jarg1, SBFile jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void SBFile_Flush(long jarg1, SBFile jarg1_);
  public final static native boolean SBFile_IsValid(long jarg1, SBFile jarg1_);
  public final static native long SBFile_Close(long jarg1, SBFile jarg1_);
  public final static native long SBFile_GetFile(long jarg1, SBFile jarg1_);
  public final static native long new_SBFileSpec__SWIG_0();
  public final static native long new_SBFileSpec__SWIG_1(long jarg1, SBFileSpec jarg1_);
  public final static native long new_SBFileSpec__SWIG_2(String jarg1);
  public final static native long new_SBFileSpec__SWIG_3(String jarg1, boolean jarg2);
  public final static native void delete_SBFileSpec(long jarg1);
  public final static native boolean SBFileSpec_IsValid(long jarg1, SBFileSpec jarg1_);
  public final static native boolean SBFileSpec_Exists(long jarg1, SBFileSpec jarg1_);
  public final static native boolean SBFileSpec_ResolveExecutableLocation(long jarg1, SBFileSpec jarg1_);
  public final static native String SBFileSpec_GetFilename(long jarg1, SBFileSpec jarg1_);
  public final static native String SBFileSpec_GetDirectory(long jarg1, SBFileSpec jarg1_);
  public final static native void SBFileSpec_SetFilename(long jarg1, SBFileSpec jarg1_, String jarg2);
  public final static native void SBFileSpec_SetDirectory(long jarg1, SBFileSpec jarg1_, String jarg2);
  public final static native long SBFileSpec_GetPath(long jarg1, SBFileSpec jarg1_, String jarg2, long jarg3);
  public final static native int SBFileSpec_ResolvePath(String jarg1, String jarg2, long jarg3);
  public final static native boolean SBFileSpec_GetDescription(long jarg1, SBFileSpec jarg1_, long jarg2, SBStream jarg2_);
  public final static native void SBFileSpec_AppendPathComponent(long jarg1, SBFileSpec jarg1_, String jarg2);
  public final static native String SBFileSpec___repr__(long jarg1, SBFileSpec jarg1_);
  public final static native long new_SBFileSpecList__SWIG_0();
  public final static native long new_SBFileSpecList__SWIG_1(long jarg1, SBFileSpecList jarg1_);
  public final static native void delete_SBFileSpecList(long jarg1);
  public final static native long SBFileSpecList_GetSize(long jarg1, SBFileSpecList jarg1_);
  public final static native boolean SBFileSpecList_GetDescription(long jarg1, SBFileSpecList jarg1_, long jarg2, SBStream jarg2_);
  public final static native void SBFileSpecList_Append(long jarg1, SBFileSpecList jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native boolean SBFileSpecList_AppendIfUnique(long jarg1, SBFileSpecList jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native void SBFileSpecList_Clear(long jarg1, SBFileSpecList jarg1_);
  public final static native long SBFileSpecList_FindFileIndex(long jarg1, SBFileSpecList jarg1_, long jarg2, long jarg3, SBFileSpec jarg3_, boolean jarg4);
  public final static native long SBFileSpecList_GetFileSpecAtIndex(long jarg1, SBFileSpecList jarg1_, long jarg2);
  public final static native long new_SBFrame__SWIG_0();
  public final static native long new_SBFrame__SWIG_1(long jarg1, SBFrame jarg1_);
  public final static native void delete_SBFrame(long jarg1);
  public final static native boolean SBFrame_IsEqual(long jarg1, SBFrame jarg1_, long jarg2, SBFrame jarg2_);
  public final static native boolean SBFrame_IsValid(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetFrameID(long jarg1, SBFrame jarg1_);
  public final static native java.math.BigInteger SBFrame_GetCFA(long jarg1, SBFrame jarg1_);
  public final static native java.math.BigInteger SBFrame_GetPC(long jarg1, SBFrame jarg1_);
  public final static native boolean SBFrame_SetPC(long jarg1, SBFrame jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger SBFrame_GetSP(long jarg1, SBFrame jarg1_);
  public final static native java.math.BigInteger SBFrame_GetFP(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetPCAddress(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetSymbolContext(long jarg1, SBFrame jarg1_, long jarg2);
  public final static native long SBFrame_GetModule(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetCompileUnit(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetFunction(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetSymbol(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetBlock(long jarg1, SBFrame jarg1_);
  public final static native String SBFrame_GetFunctionName__SWIG_0(long jarg1, SBFrame jarg1_);
  public final static native String SBFrame_GetDisplayFunctionName(long jarg1, SBFrame jarg1_);
  public final static native int SBFrame_GuessLanguage(long jarg1, SBFrame jarg1_);
  public final static native boolean SBFrame_IsInlined__SWIG_0(long jarg1, SBFrame jarg1_);
  public final static native boolean SBFrame_IsArtificial__SWIG_0(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_EvaluateExpression__SWIG_0(long jarg1, SBFrame jarg1_, String jarg2);
  public final static native long SBFrame_EvaluateExpression__SWIG_1(long jarg1, SBFrame jarg1_, String jarg2, int jarg3);
  public final static native long SBFrame_EvaluateExpression__SWIG_2(long jarg1, SBFrame jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native long SBFrame_EvaluateExpression__SWIG_3(long jarg1, SBFrame jarg1_, String jarg2, long jarg3, SBExpressionOptions jarg3_);
  public final static native long SBFrame_GetFrameBlock(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetLineEntry(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetThread(long jarg1, SBFrame jarg1_);
  public final static native String SBFrame_Disassemble(long jarg1, SBFrame jarg1_);
  public final static native void SBFrame_Clear(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_GetVariables__SWIG_0(long jarg1, SBFrame jarg1_, boolean jarg2, boolean jarg3, boolean jarg4, boolean jarg5);
  public final static native long SBFrame_GetVariables__SWIG_1(long jarg1, SBFrame jarg1_, boolean jarg2, boolean jarg3, boolean jarg4, boolean jarg5, int jarg6);
  public final static native long SBFrame_GetVariables__SWIG_2(long jarg1, SBFrame jarg1_, long jarg2, SBVariablesOptions jarg2_);
  public final static native long SBFrame_GetRegisters(long jarg1, SBFrame jarg1_);
  public final static native long SBFrame_FindVariable__SWIG_0(long jarg1, SBFrame jarg1_, String jarg2);
  public final static native long SBFrame_FindVariable__SWIG_1(long jarg1, SBFrame jarg1_, String jarg2, int jarg3);
  public final static native long SBFrame_FindRegister(long jarg1, SBFrame jarg1_, String jarg2);
  public final static native long SBFrame_GetValueForVariablePath__SWIG_0(long jarg1, SBFrame jarg1_, String jarg2);
  public final static native long SBFrame_GetValueForVariablePath__SWIG_1(long jarg1, SBFrame jarg1_, String jarg2, int jarg3);
  public final static native long SBFrame_FindValue__SWIG_0(long jarg1, SBFrame jarg1_, String jarg2, int jarg3);
  public final static native long SBFrame_FindValue__SWIG_1(long jarg1, SBFrame jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native boolean SBFrame_GetDescription(long jarg1, SBFrame jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBFrame___repr__(long jarg1, SBFrame jarg1_);
  public final static native long new_SBFunction__SWIG_0();
  public final static native long new_SBFunction__SWIG_1(long jarg1, SBFunction jarg1_);
  public final static native void delete_SBFunction(long jarg1);
  public final static native boolean SBFunction_IsValid(long jarg1, SBFunction jarg1_);
  public final static native String SBFunction_GetName(long jarg1, SBFunction jarg1_);
  public final static native String SBFunction_GetDisplayName(long jarg1, SBFunction jarg1_);
  public final static native String SBFunction_GetMangledName(long jarg1, SBFunction jarg1_);
  public final static native long SBFunction_GetInstructions__SWIG_0(long jarg1, SBFunction jarg1_, long jarg2, SBTarget jarg2_);
  public final static native long SBFunction_GetInstructions__SWIG_1(long jarg1, SBFunction jarg1_, long jarg2, SBTarget jarg2_, String jarg3);
  public final static native long SBFunction_GetStartAddress(long jarg1, SBFunction jarg1_);
  public final static native long SBFunction_GetEndAddress(long jarg1, SBFunction jarg1_);
  public final static native String SBFunction_GetArgumentName(long jarg1, SBFunction jarg1_, long jarg2);
  public final static native long SBFunction_GetPrologueByteSize(long jarg1, SBFunction jarg1_);
  public final static native long SBFunction_GetType(long jarg1, SBFunction jarg1_);
  public final static native long SBFunction_GetBlock(long jarg1, SBFunction jarg1_);
  public final static native int SBFunction_GetLanguage(long jarg1, SBFunction jarg1_);
  public final static native boolean SBFunction_GetIsOptimized(long jarg1, SBFunction jarg1_);
  public final static native boolean SBFunction_GetDescription(long jarg1, SBFunction jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBFunction___repr__(long jarg1, SBFunction jarg1_);
  public final static native long SBHostOS_GetProgramFileSpec();
  public final static native long SBHostOS_GetLLDBPythonPath();
  public final static native long SBHostOS_GetLLDBPath(int jarg1);
  public final static native long SBHostOS_GetUserHomeDirectory();
  public final static native void SBHostOS_ThreadCreated(String jarg1);
  public final static native long SBHostOS_ThreadCreate(String jarg1, long jarg2, long jarg3, long jarg4, SBError jarg4_);
  public final static native boolean SBHostOS_ThreadCancel(long jarg1, long jarg2, SBError jarg2_);
  public final static native boolean SBHostOS_ThreadDetach(long jarg1, long jarg2, SBError jarg2_);
  public final static native boolean SBHostOS_ThreadJoin(long jarg1, long jarg2, long jarg3, SBError jarg3_);
  public final static native long new_SBHostOS();
  public final static native void delete_SBHostOS(long jarg1);
  public final static native long new_SBInstruction__SWIG_0();
  public final static native long new_SBInstruction__SWIG_1(long jarg1, SBInstruction jarg1_);
  public final static native void delete_SBInstruction(long jarg1);
  public final static native boolean SBInstruction_IsValid(long jarg1, SBInstruction jarg1_);
  public final static native long SBInstruction_GetAddress(long jarg1, SBInstruction jarg1_);
  public final static native String SBInstruction_GetMnemonic(long jarg1, SBInstruction jarg1_, long jarg2, SBTarget jarg2_);
  public final static native String SBInstruction_GetOperands(long jarg1, SBInstruction jarg1_, long jarg2, SBTarget jarg2_);
  public final static native String SBInstruction_GetComment(long jarg1, SBInstruction jarg1_, long jarg2, SBTarget jarg2_);
  public final static native int SBInstruction_GetControlFlowKind(long jarg1, SBInstruction jarg1_, long jarg2, SBTarget jarg2_);
  public final static native long SBInstruction_GetData(long jarg1, SBInstruction jarg1_, long jarg2, SBTarget jarg2_);
  public final static native long SBInstruction_GetByteSize(long jarg1, SBInstruction jarg1_);
  public final static native boolean SBInstruction_DoesBranch(long jarg1, SBInstruction jarg1_);
  public final static native boolean SBInstruction_HasDelaySlot(long jarg1, SBInstruction jarg1_);
  public final static native boolean SBInstruction_CanSetBreakpoint(long jarg1, SBInstruction jarg1_);
  public final static native void SBInstruction_Print__SWIG_0(long jarg1, SBInstruction jarg1_, long jarg2, SBFile jarg2_);
  public final static native void SBInstruction_Print__SWIG_1(long jarg1, SBInstruction jarg1_, long jarg2);
  public final static native boolean SBInstruction_GetDescription(long jarg1, SBInstruction jarg1_, long jarg2, SBStream jarg2_);
  public final static native boolean SBInstruction_EmulateWithFrame(long jarg1, SBInstruction jarg1_, long jarg2, SBFrame jarg2_, long jarg3);
  public final static native boolean SBInstruction_DumpEmulation(long jarg1, SBInstruction jarg1_, String jarg2);
  public final static native boolean SBInstruction_TestEmulation(long jarg1, SBInstruction jarg1_, long jarg2, SBStream jarg2_, String jarg3);
  public final static native String SBInstruction___repr__(long jarg1, SBInstruction jarg1_);
  public final static native long new_SBInstructionList__SWIG_0();
  public final static native long new_SBInstructionList__SWIG_1(long jarg1, SBInstructionList jarg1_);
  public final static native void delete_SBInstructionList(long jarg1);
  public final static native boolean SBInstructionList_IsValid(long jarg1, SBInstructionList jarg1_);
  public final static native long SBInstructionList_GetSize(long jarg1, SBInstructionList jarg1_);
  public final static native long SBInstructionList_GetInstructionAtIndex(long jarg1, SBInstructionList jarg1_, long jarg2);
  public final static native long SBInstructionList_GetInstructionsCount(long jarg1, SBInstructionList jarg1_, long jarg2, SBAddress jarg2_, long jarg3, SBAddress jarg3_, boolean jarg4);
  public final static native void SBInstructionList_Clear(long jarg1, SBInstructionList jarg1_);
  public final static native void SBInstructionList_AppendInstruction(long jarg1, SBInstructionList jarg1_, long jarg2, SBInstruction jarg2_);
  public final static native void SBInstructionList_Print__SWIG_0(long jarg1, SBInstructionList jarg1_, long jarg2, SBFile jarg2_);
  public final static native void SBInstructionList_Print__SWIG_1(long jarg1, SBInstructionList jarg1_, long jarg2);
  public final static native boolean SBInstructionList_GetDescription(long jarg1, SBInstructionList jarg1_, long jarg2, SBStream jarg2_);
  public final static native boolean SBInstructionList_DumpEmulationForAllInstructions(long jarg1, SBInstructionList jarg1_, String jarg2);
  public final static native String SBInstructionList___repr__(long jarg1, SBInstructionList jarg1_);
  public final static native int SBLanguageRuntime_GetLanguageTypeFromString(String jarg1);
  public final static native String SBLanguageRuntime_GetNameForLanguageType(int jarg1);
  public final static native long new_SBLanguageRuntime();
  public final static native void delete_SBLanguageRuntime(long jarg1);
  public final static native long new_SBLaunchInfo(String[] jarg1);
  public final static native java.math.BigInteger SBLaunchInfo_GetProcessID(long jarg1, SBLaunchInfo jarg1_);
  public final static native long SBLaunchInfo_GetUserID(long jarg1, SBLaunchInfo jarg1_);
  public final static native long SBLaunchInfo_GetGroupID(long jarg1, SBLaunchInfo jarg1_);
  public final static native boolean SBLaunchInfo_UserIDIsValid(long jarg1, SBLaunchInfo jarg1_);
  public final static native boolean SBLaunchInfo_GroupIDIsValid(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetUserID(long jarg1, SBLaunchInfo jarg1_, long jarg2);
  public final static native void SBLaunchInfo_SetGroupID(long jarg1, SBLaunchInfo jarg1_, long jarg2);
  public final static native long SBLaunchInfo_GetExecutableFile(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetExecutableFile(long jarg1, SBLaunchInfo jarg1_, long jarg2, SBFileSpec jarg2_, boolean jarg3);
  public final static native long SBLaunchInfo_GetListener(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetListener(long jarg1, SBLaunchInfo jarg1_, long jarg2, SBListener jarg2_);
  public final static native long SBLaunchInfo_GetNumArguments(long jarg1, SBLaunchInfo jarg1_);
  public final static native String SBLaunchInfo_GetArgumentAtIndex(long jarg1, SBLaunchInfo jarg1_, long jarg2);
  public final static native void SBLaunchInfo_SetArguments(long jarg1, SBLaunchInfo jarg1_, String[] jarg2, boolean jarg3);
  public final static native long SBLaunchInfo_GetNumEnvironmentEntries(long jarg1, SBLaunchInfo jarg1_);
  public final static native String SBLaunchInfo_GetEnvironmentEntryAtIndex(long jarg1, SBLaunchInfo jarg1_, long jarg2);
  public final static native void SBLaunchInfo_SetEnvironmentEntries(long jarg1, SBLaunchInfo jarg1_, String[] jarg2, boolean jarg3);
  public final static native void SBLaunchInfo_SetEnvironment(long jarg1, SBLaunchInfo jarg1_, long jarg2, SBEnvironment jarg2_, boolean jarg3);
  public final static native long SBLaunchInfo_GetEnvironment(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_Clear(long jarg1, SBLaunchInfo jarg1_);
  public final static native String SBLaunchInfo_GetWorkingDirectory(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetWorkingDirectory(long jarg1, SBLaunchInfo jarg1_, String jarg2);
  public final static native long SBLaunchInfo_GetLaunchFlags(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetLaunchFlags(long jarg1, SBLaunchInfo jarg1_, long jarg2);
  public final static native String SBLaunchInfo_GetProcessPluginName(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetProcessPluginName(long jarg1, SBLaunchInfo jarg1_, String jarg2);
  public final static native String SBLaunchInfo_GetShell(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetShell(long jarg1, SBLaunchInfo jarg1_, String jarg2);
  public final static native boolean SBLaunchInfo_GetShellExpandArguments(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetShellExpandArguments(long jarg1, SBLaunchInfo jarg1_, boolean jarg2);
  public final static native long SBLaunchInfo_GetResumeCount(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetResumeCount(long jarg1, SBLaunchInfo jarg1_, long jarg2);
  public final static native boolean SBLaunchInfo_AddCloseFileAction(long jarg1, SBLaunchInfo jarg1_, int jarg2);
  public final static native boolean SBLaunchInfo_AddDuplicateFileAction(long jarg1, SBLaunchInfo jarg1_, int jarg2, int jarg3);
  public final static native boolean SBLaunchInfo_AddOpenFileAction(long jarg1, SBLaunchInfo jarg1_, int jarg2, String jarg3, boolean jarg4, boolean jarg5);
  public final static native boolean SBLaunchInfo_AddSuppressFileAction(long jarg1, SBLaunchInfo jarg1_, int jarg2, boolean jarg3, boolean jarg4);
  public final static native void SBLaunchInfo_SetLaunchEventData(long jarg1, SBLaunchInfo jarg1_, String jarg2);
  public final static native String SBLaunchInfo_GetLaunchEventData(long jarg1, SBLaunchInfo jarg1_);
  public final static native boolean SBLaunchInfo_GetDetachOnError(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetDetachOnError(long jarg1, SBLaunchInfo jarg1_, boolean jarg2);
  public final static native String SBLaunchInfo_GetScriptedProcessClassName(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetScriptedProcessClassName(long jarg1, SBLaunchInfo jarg1_, String jarg2);
  public final static native long SBLaunchInfo_GetScriptedProcessDictionary(long jarg1, SBLaunchInfo jarg1_);
  public final static native void SBLaunchInfo_SetScriptedProcessDictionary(long jarg1, SBLaunchInfo jarg1_, long jarg2, SBStructuredData jarg2_);
  public final static native void delete_SBLaunchInfo(long jarg1);
  public final static native long new_SBLineEntry__SWIG_0();
  public final static native long new_SBLineEntry__SWIG_1(long jarg1, SBLineEntry jarg1_);
  public final static native void delete_SBLineEntry(long jarg1);
  public final static native long SBLineEntry_GetStartAddress(long jarg1, SBLineEntry jarg1_);
  public final static native long SBLineEntry_GetEndAddress(long jarg1, SBLineEntry jarg1_);
  public final static native boolean SBLineEntry_IsValid(long jarg1, SBLineEntry jarg1_);
  public final static native long SBLineEntry_GetFileSpec(long jarg1, SBLineEntry jarg1_);
  public final static native long SBLineEntry_GetLine(long jarg1, SBLineEntry jarg1_);
  public final static native long SBLineEntry_GetColumn(long jarg1, SBLineEntry jarg1_);
  public final static native boolean SBLineEntry_GetDescription(long jarg1, SBLineEntry jarg1_, long jarg2, SBStream jarg2_);
  public final static native void SBLineEntry_SetFileSpec(long jarg1, SBLineEntry jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native void SBLineEntry_SetLine(long jarg1, SBLineEntry jarg1_, long jarg2);
  public final static native void SBLineEntry_SetColumn(long jarg1, SBLineEntry jarg1_, long jarg2);
  public final static native String SBLineEntry___repr__(long jarg1, SBLineEntry jarg1_);
  public final static native long new_SBListener__SWIG_0();
  public final static native long new_SBListener__SWIG_1(String jarg1);
  public final static native long new_SBListener__SWIG_2(long jarg1, SBListener jarg1_);
  public final static native void delete_SBListener(long jarg1);
  public final static native void SBListener_AddEvent(long jarg1, SBListener jarg1_, long jarg2, SBEvent jarg2_);
  public final static native void SBListener_Clear(long jarg1, SBListener jarg1_);
  public final static native boolean SBListener_IsValid(long jarg1, SBListener jarg1_);
  public final static native long SBListener_StartListeningForEventClass(long jarg1, SBListener jarg1_, long jarg2, SBDebugger jarg2_, String jarg3, long jarg4);
  public final static native long SBListener_StopListeningForEventClass(long jarg1, SBListener jarg1_, long jarg2, SBDebugger jarg2_, String jarg3, long jarg4);
  public final static native long SBListener_StartListeningForEvents(long jarg1, SBListener jarg1_, long jarg2, SBBroadcaster jarg2_, long jarg3);
  public final static native boolean SBListener_StopListeningForEvents(long jarg1, SBListener jarg1_, long jarg2, SBBroadcaster jarg2_, long jarg3);
  public final static native boolean SBListener_WaitForEvent(long jarg1, SBListener jarg1_, long jarg2, long jarg3, SBEvent jarg3_);
  public final static native boolean SBListener_WaitForEventForBroadcaster(long jarg1, SBListener jarg1_, long jarg2, long jarg3, SBBroadcaster jarg3_, long jarg4, SBEvent jarg4_);
  public final static native boolean SBListener_WaitForEventForBroadcasterWithType(long jarg1, SBListener jarg1_, long jarg2, long jarg3, SBBroadcaster jarg3_, long jarg4, long jarg5, SBEvent jarg5_);
  public final static native boolean SBListener_PeekAtNextEvent(long jarg1, SBListener jarg1_, long jarg2, SBEvent jarg2_);
  public final static native boolean SBListener_PeekAtNextEventForBroadcaster(long jarg1, SBListener jarg1_, long jarg2, SBBroadcaster jarg2_, long jarg3, SBEvent jarg3_);
  public final static native boolean SBListener_PeekAtNextEventForBroadcasterWithType(long jarg1, SBListener jarg1_, long jarg2, SBBroadcaster jarg2_, long jarg3, long jarg4, SBEvent jarg4_);
  public final static native boolean SBListener_GetNextEvent(long jarg1, SBListener jarg1_, long jarg2, SBEvent jarg2_);
  public final static native boolean SBListener_GetNextEventForBroadcaster(long jarg1, SBListener jarg1_, long jarg2, SBBroadcaster jarg2_, long jarg3, SBEvent jarg3_);
  public final static native boolean SBListener_GetNextEventForBroadcasterWithType(long jarg1, SBListener jarg1_, long jarg2, SBBroadcaster jarg2_, long jarg3, long jarg4, SBEvent jarg4_);
  public final static native boolean SBListener_HandleBroadcastEvent(long jarg1, SBListener jarg1_, long jarg2, SBEvent jarg2_);
  public final static native long new_SBMemoryRegionInfo__SWIG_0();
  public final static native long new_SBMemoryRegionInfo__SWIG_1(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native long new_SBMemoryRegionInfo__SWIG_2(String jarg1, java.math.BigInteger jarg2, java.math.BigInteger jarg3, long jarg4, boolean jarg5, boolean jarg6);
  public final static native void delete_SBMemoryRegionInfo(long jarg1);
  public final static native void SBMemoryRegionInfo_Clear(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native java.math.BigInteger SBMemoryRegionInfo_GetRegionBase(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native java.math.BigInteger SBMemoryRegionInfo_GetRegionEnd(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native boolean SBMemoryRegionInfo_IsReadable(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native boolean SBMemoryRegionInfo_IsWritable(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native boolean SBMemoryRegionInfo_IsExecutable(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native boolean SBMemoryRegionInfo_IsMapped(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native String SBMemoryRegionInfo_GetName(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native boolean SBMemoryRegionInfo_HasDirtyMemoryPageList(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native long SBMemoryRegionInfo_GetNumDirtyPages(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native java.math.BigInteger SBMemoryRegionInfo_GetDirtyPageAddressAtIndex(long jarg1, SBMemoryRegionInfo jarg1_, long jarg2);
  public final static native int SBMemoryRegionInfo_GetPageSize(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native boolean SBMemoryRegionInfo_GetDescription(long jarg1, SBMemoryRegionInfo jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBMemoryRegionInfo___repr__(long jarg1, SBMemoryRegionInfo jarg1_);
  public final static native long new_SBMemoryRegionInfoList__SWIG_0();
  public final static native long new_SBMemoryRegionInfoList__SWIG_1(long jarg1, SBMemoryRegionInfoList jarg1_);
  public final static native void delete_SBMemoryRegionInfoList(long jarg1);
  public final static native long SBMemoryRegionInfoList_GetSize(long jarg1, SBMemoryRegionInfoList jarg1_);
  public final static native boolean SBMemoryRegionInfoList_GetMemoryRegionContainingAddress(long jarg1, SBMemoryRegionInfoList jarg1_, java.math.BigInteger jarg2, long jarg3, SBMemoryRegionInfo jarg3_);
  public final static native boolean SBMemoryRegionInfoList_GetMemoryRegionAtIndex(long jarg1, SBMemoryRegionInfoList jarg1_, long jarg2, long jarg3, SBMemoryRegionInfo jarg3_);
  public final static native void SBMemoryRegionInfoList_Append__SWIG_0(long jarg1, SBMemoryRegionInfoList jarg1_, long jarg2, SBMemoryRegionInfo jarg2_);
  public final static native void SBMemoryRegionInfoList_Append__SWIG_1(long jarg1, SBMemoryRegionInfoList jarg1_, long jarg2, SBMemoryRegionInfoList jarg2_);
  public final static native void SBMemoryRegionInfoList_Clear(long jarg1, SBMemoryRegionInfoList jarg1_);
  public final static native long new_SBModule__SWIG_0();
  public final static native long new_SBModule__SWIG_1(long jarg1, SBModule jarg1_);
  public final static native long new_SBModule__SWIG_2(long jarg1, SBModuleSpec jarg1_);
  public final static native long new_SBModule__SWIG_3(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2);
  public final static native void delete_SBModule(long jarg1);
  public final static native boolean SBModule_IsValid(long jarg1, SBModule jarg1_);
  public final static native void SBModule_Clear(long jarg1, SBModule jarg1_);
  public final static native boolean SBModule_IsFileBacked(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetFileSpec(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetPlatformFileSpec(long jarg1, SBModule jarg1_);
  public final static native boolean SBModule_SetPlatformFileSpec(long jarg1, SBModule jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native long SBModule_GetRemoteInstallFileSpec(long jarg1, SBModule jarg1_);
  public final static native boolean SBModule_SetRemoteInstallFileSpec(long jarg1, SBModule jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native String SBModule_GetUUIDString(long jarg1, SBModule jarg1_);
  public final static native long SBModule_FindSection(long jarg1, SBModule jarg1_, String jarg2);
  public final static native long SBModule_ResolveFileAddress(long jarg1, SBModule jarg1_, java.math.BigInteger jarg2);
  public final static native long SBModule_ResolveSymbolContextForAddress(long jarg1, SBModule jarg1_, long jarg2, SBAddress jarg2_, long jarg3);
  public final static native boolean SBModule_GetDescription(long jarg1, SBModule jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBModule_GetNumCompileUnits(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetCompileUnitAtIndex(long jarg1, SBModule jarg1_, long jarg2);
  public final static native long SBModule_FindCompileUnits(long jarg1, SBModule jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native long SBModule_GetNumSymbols(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetSymbolAtIndex(long jarg1, SBModule jarg1_, long jarg2);
  public final static native long SBModule_FindSymbol__SWIG_0(long jarg1, SBModule jarg1_, String jarg2, int jarg3);
  public final static native long SBModule_FindSymbol__SWIG_1(long jarg1, SBModule jarg1_, String jarg2);
  public final static native long SBModule_FindSymbols__SWIG_0(long jarg1, SBModule jarg1_, String jarg2, int jarg3);
  public final static native long SBModule_FindSymbols__SWIG_1(long jarg1, SBModule jarg1_, String jarg2);
  public final static native long SBModule_GetNumSections(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetSectionAtIndex(long jarg1, SBModule jarg1_, long jarg2);
  public final static native long SBModule_FindFunctions__SWIG_0(long jarg1, SBModule jarg1_, String jarg2, long jarg3);
  public final static native long SBModule_FindFunctions__SWIG_1(long jarg1, SBModule jarg1_, String jarg2);
  public final static native long SBModule_FindFirstType(long jarg1, SBModule jarg1_, String jarg2);
  public final static native long SBModule_FindTypes(long jarg1, SBModule jarg1_, String jarg2);
  public final static native long SBModule_GetTypeByID(long jarg1, SBModule jarg1_, java.math.BigInteger jarg2);
  public final static native long SBModule_GetBasicType(long jarg1, SBModule jarg1_, int jarg2);
  public final static native long SBModule_GetTypes__SWIG_0(long jarg1, SBModule jarg1_, long jarg2);
  public final static native long SBModule_GetTypes__SWIG_1(long jarg1, SBModule jarg1_);
  public final static native long SBModule_FindGlobalVariables(long jarg1, SBModule jarg1_, long jarg2, SBTarget jarg2_, String jarg3, long jarg4);
  public final static native long SBModule_FindFirstGlobalVariable(long jarg1, SBModule jarg1_, long jarg2, SBTarget jarg2_, String jarg3);
  public final static native int SBModule_GetByteOrder(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetAddressByteSize(long jarg1, SBModule jarg1_);
  public final static native String SBModule_GetTriple(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetVersion(long jarg1, SBModule jarg1_, long jarg2, long jarg3);
  public final static native long SBModule_GetSymbolFileSpec(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetObjectFileHeaderAddress(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetObjectFileEntryPointAddress(long jarg1, SBModule jarg1_);
  public final static native long SBModule_GetNumberAllocatedModules();
  public final static native void SBModule_GarbageCollectAllocatedModules();
  public final static native String SBModule___repr__(long jarg1, SBModule jarg1_);
  public final static native long new_SBModuleSpec__SWIG_0();
  public final static native long new_SBModuleSpec__SWIG_1(long jarg1, SBModuleSpec jarg1_);
  public final static native void delete_SBModuleSpec(long jarg1);
  public final static native boolean SBModuleSpec_IsValid(long jarg1, SBModuleSpec jarg1_);
  public final static native void SBModuleSpec_Clear(long jarg1, SBModuleSpec jarg1_);
  public final static native long SBModuleSpec_GetFileSpec(long jarg1, SBModuleSpec jarg1_);
  public final static native void SBModuleSpec_SetFileSpec(long jarg1, SBModuleSpec jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native long SBModuleSpec_GetPlatformFileSpec(long jarg1, SBModuleSpec jarg1_);
  public final static native void SBModuleSpec_SetPlatformFileSpec(long jarg1, SBModuleSpec jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native long SBModuleSpec_GetSymbolFileSpec(long jarg1, SBModuleSpec jarg1_);
  public final static native void SBModuleSpec_SetSymbolFileSpec(long jarg1, SBModuleSpec jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native String SBModuleSpec_GetObjectName(long jarg1, SBModuleSpec jarg1_);
  public final static native void SBModuleSpec_SetObjectName(long jarg1, SBModuleSpec jarg1_, String jarg2);
  public final static native String SBModuleSpec_GetTriple(long jarg1, SBModuleSpec jarg1_);
  public final static native void SBModuleSpec_SetTriple(long jarg1, SBModuleSpec jarg1_, String jarg2);
  public final static native long SBModuleSpec_GetUUIDBytes(long jarg1, SBModuleSpec jarg1_);
  public final static native long SBModuleSpec_GetUUIDLength(long jarg1, SBModuleSpec jarg1_);
  public final static native boolean SBModuleSpec_SetUUIDBytes(long jarg1, SBModuleSpec jarg1_, long jarg2, long jarg3);
  public final static native boolean SBModuleSpec_GetDescription(long jarg1, SBModuleSpec jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBModuleSpec___repr__(long jarg1, SBModuleSpec jarg1_);
  public final static native long new_SBModuleSpecList__SWIG_0();
  public final static native long new_SBModuleSpecList__SWIG_1(long jarg1, SBModuleSpecList jarg1_);
  public final static native void delete_SBModuleSpecList(long jarg1);
  public final static native long SBModuleSpecList_GetModuleSpecifications(String jarg1);
  public final static native void SBModuleSpecList_Append__SWIG_0(long jarg1, SBModuleSpecList jarg1_, long jarg2, SBModuleSpec jarg2_);
  public final static native void SBModuleSpecList_Append__SWIG_1(long jarg1, SBModuleSpecList jarg1_, long jarg2, SBModuleSpecList jarg2_);
  public final static native long SBModuleSpecList_FindFirstMatchingSpec(long jarg1, SBModuleSpecList jarg1_, long jarg2, SBModuleSpec jarg2_);
  public final static native long SBModuleSpecList_FindMatchingSpecs(long jarg1, SBModuleSpecList jarg1_, long jarg2, SBModuleSpec jarg2_);
  public final static native long SBModuleSpecList_GetSize(long jarg1, SBModuleSpecList jarg1_);
  public final static native long SBModuleSpecList_GetSpecAtIndex(long jarg1, SBModuleSpecList jarg1_, long jarg2);
  public final static native boolean SBModuleSpecList_GetDescription(long jarg1, SBModuleSpecList jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBModuleSpecList___repr__(long jarg1, SBModuleSpecList jarg1_);
  public final static native long new_SBPlatformConnectOptions__SWIG_0(String jarg1);
  public final static native long new_SBPlatformConnectOptions__SWIG_1(long jarg1, SBPlatformConnectOptions jarg1_);
  public final static native void delete_SBPlatformConnectOptions(long jarg1);
  public final static native String SBPlatformConnectOptions_GetURL(long jarg1, SBPlatformConnectOptions jarg1_);
  public final static native void SBPlatformConnectOptions_SetURL(long jarg1, SBPlatformConnectOptions jarg1_, String jarg2);
  public final static native boolean SBPlatformConnectOptions_GetRsyncEnabled(long jarg1, SBPlatformConnectOptions jarg1_);
  public final static native void SBPlatformConnectOptions_EnableRsync(long jarg1, SBPlatformConnectOptions jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native void SBPlatformConnectOptions_DisableRsync(long jarg1, SBPlatformConnectOptions jarg1_);
  public final static native String SBPlatformConnectOptions_GetLocalCacheDirectory(long jarg1, SBPlatformConnectOptions jarg1_);
  public final static native void SBPlatformConnectOptions_SetLocalCacheDirectory(long jarg1, SBPlatformConnectOptions jarg1_, String jarg2);
  public final static native long new_SBPlatformShellCommand__SWIG_0(String jarg1, String jarg2);
  public final static native long new_SBPlatformShellCommand__SWIG_1(String jarg1);
  public final static native long new_SBPlatformShellCommand__SWIG_2(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native void delete_SBPlatformShellCommand(long jarg1);
  public final static native void SBPlatformShellCommand_Clear(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native String SBPlatformShellCommand_GetShell(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native void SBPlatformShellCommand_SetShell(long jarg1, SBPlatformShellCommand jarg1_, String jarg2);
  public final static native String SBPlatformShellCommand_GetCommand(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native void SBPlatformShellCommand_SetCommand(long jarg1, SBPlatformShellCommand jarg1_, String jarg2);
  public final static native String SBPlatformShellCommand_GetWorkingDirectory(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native void SBPlatformShellCommand_SetWorkingDirectory(long jarg1, SBPlatformShellCommand jarg1_, String jarg2);
  public final static native long SBPlatformShellCommand_GetTimeoutSeconds(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native void SBPlatformShellCommand_SetTimeoutSeconds(long jarg1, SBPlatformShellCommand jarg1_, long jarg2);
  public final static native int SBPlatformShellCommand_GetSignal(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native int SBPlatformShellCommand_GetStatus(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native String SBPlatformShellCommand_GetOutput(long jarg1, SBPlatformShellCommand jarg1_);
  public final static native long new_SBPlatform__SWIG_0();
  public final static native long new_SBPlatform__SWIG_1(String jarg1);
  public final static native void delete_SBPlatform(long jarg1);
  public final static native long SBPlatform_GetHostPlatform();
  public final static native boolean SBPlatform_IsValid(long jarg1, SBPlatform jarg1_);
  public final static native void SBPlatform_Clear(long jarg1, SBPlatform jarg1_);
  public final static native String SBPlatform_GetWorkingDirectory(long jarg1, SBPlatform jarg1_);
  public final static native boolean SBPlatform_SetWorkingDirectory(long jarg1, SBPlatform jarg1_, String jarg2);
  public final static native String SBPlatform_GetName(long jarg1, SBPlatform jarg1_);
  public final static native long SBPlatform_ConnectRemote(long jarg1, SBPlatform jarg1_, long jarg2, SBPlatformConnectOptions jarg2_);
  public final static native void SBPlatform_DisconnectRemote(long jarg1, SBPlatform jarg1_);
  public final static native boolean SBPlatform_IsConnected(long jarg1, SBPlatform jarg1_);
  public final static native String SBPlatform_GetTriple(long jarg1, SBPlatform jarg1_);
  public final static native String SBPlatform_GetHostname(long jarg1, SBPlatform jarg1_);
  public final static native String SBPlatform_GetOSBuild(long jarg1, SBPlatform jarg1_);
  public final static native String SBPlatform_GetOSDescription(long jarg1, SBPlatform jarg1_);
  public final static native long SBPlatform_GetOSMajorVersion(long jarg1, SBPlatform jarg1_);
  public final static native long SBPlatform_GetOSMinorVersion(long jarg1, SBPlatform jarg1_);
  public final static native long SBPlatform_GetOSUpdateVersion(long jarg1, SBPlatform jarg1_);
  public final static native void SBPlatform_SetSDKRoot(long jarg1, SBPlatform jarg1_, String jarg2);
  public final static native long SBPlatform_Get(long jarg1, SBPlatform jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBFileSpec jarg3_);
  public final static native long SBPlatform_Put(long jarg1, SBPlatform jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBFileSpec jarg3_);
  public final static native long SBPlatform_Install(long jarg1, SBPlatform jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBFileSpec jarg3_);
  public final static native long SBPlatform_Run(long jarg1, SBPlatform jarg1_, long jarg2, SBPlatformShellCommand jarg2_);
  public final static native long SBPlatform_Launch(long jarg1, SBPlatform jarg1_, long jarg2, SBLaunchInfo jarg2_);
  public final static native long SBPlatform_Kill(long jarg1, SBPlatform jarg1_, java.math.BigInteger jarg2);
  public final static native long SBPlatform_MakeDirectory__SWIG_0(long jarg1, SBPlatform jarg1_, String jarg2, long jarg3);
  public final static native long SBPlatform_MakeDirectory__SWIG_1(long jarg1, SBPlatform jarg1_, String jarg2);
  public final static native long SBPlatform_GetFilePermissions(long jarg1, SBPlatform jarg1_, String jarg2);
  public final static native long SBPlatform_SetFilePermissions(long jarg1, SBPlatform jarg1_, String jarg2, long jarg3);
  public final static native long SBPlatform_GetUnixSignals(long jarg1, SBPlatform jarg1_);
  public final static native long SBPlatform_GetEnvironment(long jarg1, SBPlatform jarg1_);
  public final static native int SBProcess_eBroadcastBitStateChanged_get();
  public final static native int SBProcess_eBroadcastBitInterrupt_get();
  public final static native int SBProcess_eBroadcastBitSTDOUT_get();
  public final static native int SBProcess_eBroadcastBitSTDERR_get();
  public final static native int SBProcess_eBroadcastBitProfileData_get();
  public final static native int SBProcess_eBroadcastBitStructuredData_get();
  public final static native long new_SBProcess__SWIG_0();
  public final static native long new_SBProcess__SWIG_1(long jarg1, SBProcess jarg1_);
  public final static native void delete_SBProcess(long jarg1);
  public final static native String SBProcess_GetBroadcasterClassName();
  public final static native String SBProcess_GetPluginName(long jarg1, SBProcess jarg1_);
  public final static native String SBProcess_GetShortPluginName(long jarg1, SBProcess jarg1_);
  public final static native void SBProcess_Clear(long jarg1, SBProcess jarg1_);
  public final static native boolean SBProcess_IsValid(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_GetTarget(long jarg1, SBProcess jarg1_);
  public final static native int SBProcess_GetByteOrder(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_PutSTDIN(long jarg1, SBProcess jarg1_, String jarg2, long jarg3);
  public final static native long SBProcess_GetSTDOUT(long jarg1, SBProcess jarg1_, String jarg2, long jarg3);
  public final static native long SBProcess_GetSTDERR(long jarg1, SBProcess jarg1_, String jarg2, long jarg3);
  public final static native long SBProcess_GetAsyncProfileData(long jarg1, SBProcess jarg1_, String jarg2, long jarg3);
  public final static native void SBProcess_ReportEventState__SWIG_0(long jarg1, SBProcess jarg1_, long jarg2, SBEvent jarg2_, long jarg3, SBFile jarg3_);
  public final static native void SBProcess_ReportEventState__SWIG_1(long jarg1, SBProcess jarg1_, long jarg2, SBEvent jarg2_, long jarg3);
  public final static native void SBProcess_AppendEventStateReport(long jarg1, SBProcess jarg1_, long jarg2, SBEvent jarg2_, long jarg3, SBCommandReturnObject jarg3_);
  public final static native boolean SBProcess_RemoteAttachToProcessWithID(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2, long jarg3, SBError jarg3_);
  public final static native boolean SBProcess_RemoteLaunch(long jarg1, SBProcess jarg1_, String[] jarg2, String[] jarg3, String jarg4, String jarg5, String jarg6, String jarg7, long jarg8, boolean jarg9, long jarg10, SBError jarg10_);
  public final static native long SBProcess_GetNumThreads(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_GetThreadAtIndex(long jarg1, SBProcess jarg1_, long jarg2);
  public final static native long SBProcess_GetThreadByID(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2);
  public final static native long SBProcess_GetThreadByIndexID(long jarg1, SBProcess jarg1_, long jarg2);
  public final static native long SBProcess_GetSelectedThread(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_CreateOSPluginThread(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3);
  public final static native boolean SBProcess_SetSelectedThread(long jarg1, SBProcess jarg1_, long jarg2, SBThread jarg2_);
  public final static native boolean SBProcess_SetSelectedThreadByID(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2);
  public final static native boolean SBProcess_SetSelectedThreadByIndexID(long jarg1, SBProcess jarg1_, long jarg2);
  public final static native long SBProcess_GetNumQueues(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_GetQueueAtIndex(long jarg1, SBProcess jarg1_, long jarg2);
  public final static native int SBProcess_GetState(long jarg1, SBProcess jarg1_);
  public final static native int SBProcess_GetExitStatus(long jarg1, SBProcess jarg1_);
  public final static native String SBProcess_GetExitDescription(long jarg1, SBProcess jarg1_);
  public final static native java.math.BigInteger SBProcess_GetProcessID(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_GetUniqueID(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_GetAddressByteSize(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_Destroy(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_Continue(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_Stop(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_Kill(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_Detach(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_Signal(long jarg1, SBProcess jarg1_, int jarg2);
  public final static native long SBProcess_GetUnixSignals(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_GetStopID__SWIG_0(long jarg1, SBProcess jarg1_, boolean jarg2);
  public final static native long SBProcess_GetStopID__SWIG_1(long jarg1, SBProcess jarg1_);
  public final static native void SBProcess_SendAsyncInterrupt(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_ReadMemory(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4, long jarg5, SBError jarg5_);
  public final static native long SBProcess_WriteMemory(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4, long jarg5, SBError jarg5_);
  public final static native long SBProcess_ReadCStringFromMemory(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4, long jarg5, SBError jarg5_);
  public final static native java.math.BigInteger SBProcess_ReadUnsignedFromMemory(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2, long jarg3, long jarg4, SBError jarg4_);
  public final static native java.math.BigInteger SBProcess_ReadPointerFromMemory(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2, long jarg3, SBError jarg3_);
  public final static native int SBProcess_GetStateFromEvent(long jarg1, SBEvent jarg1_);
  public final static native boolean SBProcess_GetRestartedFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBProcess_GetNumRestartedReasonsFromEvent(long jarg1, SBEvent jarg1_);
  public final static native String SBProcess_GetRestartedReasonAtIndexFromEvent(long jarg1, SBEvent jarg1_, long jarg2);
  public final static native long SBProcess_GetProcessFromEvent(long jarg1, SBEvent jarg1_);
  public final static native boolean SBProcess_GetInterruptedFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBProcess_GetStructuredDataFromEvent(long jarg1, SBEvent jarg1_);
  public final static native boolean SBProcess_EventIsProcessEvent(long jarg1, SBEvent jarg1_);
  public final static native boolean SBProcess_EventIsStructuredDataEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBProcess_GetBroadcaster(long jarg1, SBProcess jarg1_);
  public final static native boolean SBProcess_GetDescription(long jarg1, SBProcess jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBProcess_GetExtendedCrashInformation(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_GetNumSupportedHardwareWatchpoints(long jarg1, SBProcess jarg1_, long jarg2, SBError jarg2_);
  public final static native long SBProcess_LoadImage(long jarg1, SBProcess jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBError jarg3_);
  public final static native long SBProcess_LoadImageUsingPaths(long jarg1, SBProcess jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBStringList jarg3_, long jarg4, SBFileSpec jarg4_, long jarg5, SBError jarg5_);
  public final static native long SBProcess_UnloadImage(long jarg1, SBProcess jarg1_, long jarg2);
  public final static native long SBProcess_SendEventData(long jarg1, SBProcess jarg1_, String jarg2);
  public final static native long SBProcess_GetNumExtendedBacktraceTypes(long jarg1, SBProcess jarg1_);
  public final static native String SBProcess_GetExtendedBacktraceTypeAtIndex(long jarg1, SBProcess jarg1_, long jarg2);
  public final static native long SBProcess_GetHistoryThreads(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2);
  public final static native boolean SBProcess_IsInstrumentationRuntimePresent(long jarg1, SBProcess jarg1_, int jarg2);
  public final static native long SBProcess_SaveCore__SWIG_0(long jarg1, SBProcess jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long SBProcess_SaveCore__SWIG_1(long jarg1, SBProcess jarg1_, String jarg2);
  public final static native long SBProcess_GetMemoryRegionInfo(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2, long jarg3, SBMemoryRegionInfo jarg3_);
  public final static native long SBProcess_GetMemoryRegions(long jarg1, SBProcess jarg1_);
  public final static native long SBProcess_GetProcessInfo(long jarg1, SBProcess jarg1_);
  public final static native java.math.BigInteger SBProcess_AllocateMemory(long jarg1, SBProcess jarg1_, long jarg2, long jarg3, long jarg4, SBError jarg4_);
  public final static native long SBProcess_DeallocateMemory(long jarg1, SBProcess jarg1_, java.math.BigInteger jarg2);
  public final static native String SBProcess___repr__(long jarg1, SBProcess jarg1_);
  public final static native long new_SBProcessInfo__SWIG_0();
  public final static native long new_SBProcessInfo__SWIG_1(long jarg1, SBProcessInfo jarg1_);
  public final static native void delete_SBProcessInfo(long jarg1);
  public final static native boolean SBProcessInfo_IsValid(long jarg1, SBProcessInfo jarg1_);
  public final static native String SBProcessInfo_GetName(long jarg1, SBProcessInfo jarg1_);
  public final static native long SBProcessInfo_GetExecutableFile(long jarg1, SBProcessInfo jarg1_);
  public final static native java.math.BigInteger SBProcessInfo_GetProcessID(long jarg1, SBProcessInfo jarg1_);
  public final static native long SBProcessInfo_GetUserID(long jarg1, SBProcessInfo jarg1_);
  public final static native long SBProcessInfo_GetGroupID(long jarg1, SBProcessInfo jarg1_);
  public final static native boolean SBProcessInfo_UserIDIsValid(long jarg1, SBProcessInfo jarg1_);
  public final static native boolean SBProcessInfo_GroupIDIsValid(long jarg1, SBProcessInfo jarg1_);
  public final static native long SBProcessInfo_GetEffectiveUserID(long jarg1, SBProcessInfo jarg1_);
  public final static native long SBProcessInfo_GetEffectiveGroupID(long jarg1, SBProcessInfo jarg1_);
  public final static native boolean SBProcessInfo_EffectiveUserIDIsValid(long jarg1, SBProcessInfo jarg1_);
  public final static native boolean SBProcessInfo_EffectiveGroupIDIsValid(long jarg1, SBProcessInfo jarg1_);
  public final static native java.math.BigInteger SBProcessInfo_GetParentProcessID(long jarg1, SBProcessInfo jarg1_);
  public final static native String SBProcessInfo_GetTriple(long jarg1, SBProcessInfo jarg1_);
  public final static native long new_SBQueue__SWIG_0();
  public final static native long new_SBQueue__SWIG_1(long jarg1);
  public final static native void delete_SBQueue(long jarg1);
  public final static native boolean SBQueue_IsValid(long jarg1, SBQueue jarg1_);
  public final static native void SBQueue_Clear(long jarg1, SBQueue jarg1_);
  public final static native long SBQueue_GetProcess(long jarg1, SBQueue jarg1_);
  public final static native java.math.BigInteger SBQueue_GetQueueID(long jarg1, SBQueue jarg1_);
  public final static native String SBQueue_GetName(long jarg1, SBQueue jarg1_);
  public final static native int SBQueue_GetKind(long jarg1, SBQueue jarg1_);
  public final static native long SBQueue_GetIndexID(long jarg1, SBQueue jarg1_);
  public final static native long SBQueue_GetNumThreads(long jarg1, SBQueue jarg1_);
  public final static native long SBQueue_GetThreadAtIndex(long jarg1, SBQueue jarg1_, long jarg2);
  public final static native long SBQueue_GetNumPendingItems(long jarg1, SBQueue jarg1_);
  public final static native long SBQueue_GetPendingItemAtIndex(long jarg1, SBQueue jarg1_, long jarg2);
  public final static native long SBQueue_GetNumRunningItems(long jarg1, SBQueue jarg1_);
  public final static native long new_SBQueueItem__SWIG_0();
  public final static native long new_SBQueueItem__SWIG_1(long jarg1);
  public final static native void delete_SBQueueItem(long jarg1);
  public final static native boolean SBQueueItem_IsValid(long jarg1, SBQueueItem jarg1_);
  public final static native void SBQueueItem_Clear(long jarg1, SBQueueItem jarg1_);
  public final static native int SBQueueItem_GetKind(long jarg1, SBQueueItem jarg1_);
  public final static native void SBQueueItem_SetKind(long jarg1, SBQueueItem jarg1_, int jarg2);
  public final static native long SBQueueItem_GetAddress(long jarg1, SBQueueItem jarg1_);
  public final static native void SBQueueItem_SetAddress(long jarg1, SBQueueItem jarg1_, long jarg2, SBAddress jarg2_);
  public final static native void SBQueueItem_SetQueueItem(long jarg1, SBQueueItem jarg1_, long jarg2);
  public final static native long SBQueueItem_GetExtendedBacktraceThread(long jarg1, SBQueueItem jarg1_, String jarg2);
  public final static native String SBReproducer_Capture(String jarg1);
  public final static native String SBReproducer_PassiveReplay(String jarg1);
  public final static native boolean SBReproducer_SetAutoGenerate(boolean jarg1);
  public final static native void SBReproducer_SetWorkingDirectory(String jarg1);
  public final static native long new_SBReproducer();
  public final static native void delete_SBReproducer(long jarg1);
  public final static native long new_SBSection__SWIG_0();
  public final static native long new_SBSection__SWIG_1(long jarg1, SBSection jarg1_);
  public final static native void delete_SBSection(long jarg1);
  public final static native boolean SBSection_IsValid(long jarg1, SBSection jarg1_);
  public final static native String SBSection_GetName(long jarg1, SBSection jarg1_);
  public final static native long SBSection_GetParent(long jarg1, SBSection jarg1_);
  public final static native long SBSection_FindSubSection(long jarg1, SBSection jarg1_, String jarg2);
  public final static native long SBSection_GetNumSubSections(long jarg1, SBSection jarg1_);
  public final static native long SBSection_GetSubSectionAtIndex(long jarg1, SBSection jarg1_, long jarg2);
  public final static native java.math.BigInteger SBSection_GetFileAddress(long jarg1, SBSection jarg1_);
  public final static native java.math.BigInteger SBSection_GetLoadAddress(long jarg1, SBSection jarg1_, long jarg2, SBTarget jarg2_);
  public final static native java.math.BigInteger SBSection_GetByteSize(long jarg1, SBSection jarg1_);
  public final static native java.math.BigInteger SBSection_GetFileOffset(long jarg1, SBSection jarg1_);
  public final static native java.math.BigInteger SBSection_GetFileByteSize(long jarg1, SBSection jarg1_);
  public final static native long SBSection_GetSectionData__SWIG_0(long jarg1, SBSection jarg1_);
  public final static native long SBSection_GetSectionData__SWIG_1(long jarg1, SBSection jarg1_, java.math.BigInteger jarg2, java.math.BigInteger jarg3);
  public final static native int SBSection_GetSectionType(long jarg1, SBSection jarg1_);
  public final static native long SBSection_GetPermissions(long jarg1, SBSection jarg1_);
  public final static native long SBSection_GetTargetByteSize(long jarg1, SBSection jarg1_);
  public final static native long SBSection_GetAlignment(long jarg1, SBSection jarg1_);
  public final static native boolean SBSection_GetDescription(long jarg1, SBSection jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBSection___repr__(long jarg1, SBSection jarg1_);
  public final static native long new_SBSourceManager(long jarg1, SBSourceManager jarg1_);
  public final static native void delete_SBSourceManager(long jarg1);
  public final static native long SBSourceManager_DisplaySourceLinesWithLineNumbers(long jarg1, SBSourceManager jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, long jarg4, long jarg5, String jarg6, long jarg7, SBStream jarg7_);
  public final static native long SBSourceManager_DisplaySourceLinesWithLineNumbersAndColumn(long jarg1, SBSourceManager jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, long jarg4, long jarg5, long jarg6, String jarg7, long jarg8, SBStream jarg8_);
  public final static native long new_SBStream();
  public final static native void delete_SBStream(long jarg1);
  public final static native boolean SBStream_IsValid(long jarg1, SBStream jarg1_);
  public final static native String SBStream_GetData(long jarg1, SBStream jarg1_);
  public final static native long SBStream_GetSize(long jarg1, SBStream jarg1_);
  public final static native void SBStream_Print(long jarg1, SBStream jarg1_, String jarg2);
  public final static native void SBStream_RedirectToFile__SWIG_0(long jarg1, SBStream jarg1_, String jarg2, boolean jarg3);
  public final static native void SBStream_RedirectToFile__SWIG_1(long jarg1, SBStream jarg1_, long jarg2, SBFile jarg2_);
  public final static native void SBStream_RedirectToFile__SWIG_2(long jarg1, SBStream jarg1_, long jarg2);
  public final static native void SBStream_RedirectToFileHandle(long jarg1, SBStream jarg1_, long jarg2, boolean jarg3);
  public final static native void SBStream_RedirectToFileDescriptor(long jarg1, SBStream jarg1_, int jarg2, boolean jarg3);
  public final static native void SBStream_Clear(long jarg1, SBStream jarg1_);
  public final static native long new_SBStringList__SWIG_0();
  public final static native long new_SBStringList__SWIG_1(long jarg1, SBStringList jarg1_);
  public final static native void delete_SBStringList(long jarg1);
  public final static native boolean SBStringList_IsValid(long jarg1, SBStringList jarg1_);
  public final static native void SBStringList_AppendString(long jarg1, SBStringList jarg1_, String jarg2);
  public final static native void SBStringList_AppendList__SWIG_0(long jarg1, SBStringList jarg1_, String[] jarg2, int jarg3);
  public final static native void SBStringList_AppendList__SWIG_1(long jarg1, SBStringList jarg1_, long jarg2, SBStringList jarg2_);
  public final static native long SBStringList_GetSize(long jarg1, SBStringList jarg1_);
  public final static native String SBStringList_GetStringAtIndex(long jarg1, SBStringList jarg1_, long jarg2);
  public final static native void SBStringList_Clear(long jarg1, SBStringList jarg1_);
  public final static native long new_SBStructuredData__SWIG_0();
  public final static native long new_SBStructuredData__SWIG_1(long jarg1, SBStructuredData jarg1_);
  public final static native long new_SBStructuredData__SWIG_2(long jarg1);
  public final static native void delete_SBStructuredData(long jarg1);
  public final static native boolean SBStructuredData_IsValid(long jarg1, SBStructuredData jarg1_);
  public final static native void SBStructuredData_Clear(long jarg1, SBStructuredData jarg1_);
  public final static native int SBStructuredData_GetType(long jarg1, SBStructuredData jarg1_);
  public final static native long SBStructuredData_GetSize(long jarg1, SBStructuredData jarg1_);
  public final static native boolean SBStructuredData_GetKeys(long jarg1, SBStructuredData jarg1_, long jarg2, SBStringList jarg2_);
  public final static native long SBStructuredData_GetValueForKey(long jarg1, SBStructuredData jarg1_, String jarg2);
  public final static native long SBStructuredData_GetItemAtIndex(long jarg1, SBStructuredData jarg1_, long jarg2);
  public final static native java.math.BigInteger SBStructuredData_GetIntegerValue__SWIG_0(long jarg1, SBStructuredData jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger SBStructuredData_GetIntegerValue__SWIG_1(long jarg1, SBStructuredData jarg1_);
  public final static native double SBStructuredData_GetFloatValue__SWIG_0(long jarg1, SBStructuredData jarg1_, double jarg2);
  public final static native double SBStructuredData_GetFloatValue__SWIG_1(long jarg1, SBStructuredData jarg1_);
  public final static native boolean SBStructuredData_GetBooleanValue__SWIG_0(long jarg1, SBStructuredData jarg1_, boolean jarg2);
  public final static native boolean SBStructuredData_GetBooleanValue__SWIG_1(long jarg1, SBStructuredData jarg1_);
  public final static native long SBStructuredData_GetStringValue(long jarg1, SBStructuredData jarg1_, String jarg2, long jarg3);
  public final static native long SBStructuredData_GetAsJSON(long jarg1, SBStructuredData jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBStructuredData_GetDescription(long jarg1, SBStructuredData jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBStructuredData_SetFromJSON__SWIG_0(long jarg1, SBStructuredData jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBStructuredData_SetFromJSON__SWIG_1(long jarg1, SBStructuredData jarg1_, String jarg2);
  public final static native long new_SBSymbol__SWIG_0();
  public final static native void delete_SBSymbol(long jarg1);
  public final static native long new_SBSymbol__SWIG_1(long jarg1, SBSymbol jarg1_);
  public final static native boolean SBSymbol_IsValid(long jarg1, SBSymbol jarg1_);
  public final static native String SBSymbol_GetName(long jarg1, SBSymbol jarg1_);
  public final static native String SBSymbol_GetDisplayName(long jarg1, SBSymbol jarg1_);
  public final static native String SBSymbol_GetMangledName(long jarg1, SBSymbol jarg1_);
  public final static native long SBSymbol_GetInstructions__SWIG_0(long jarg1, SBSymbol jarg1_, long jarg2, SBTarget jarg2_);
  public final static native long SBSymbol_GetInstructions__SWIG_1(long jarg1, SBSymbol jarg1_, long jarg2, SBTarget jarg2_, String jarg3);
  public final static native long SBSymbol_GetStartAddress(long jarg1, SBSymbol jarg1_);
  public final static native long SBSymbol_GetEndAddress(long jarg1, SBSymbol jarg1_);
  public final static native java.math.BigInteger SBSymbol_GetValue(long jarg1, SBSymbol jarg1_);
  public final static native java.math.BigInteger SBSymbol_GetSize(long jarg1, SBSymbol jarg1_);
  public final static native long SBSymbol_GetPrologueByteSize(long jarg1, SBSymbol jarg1_);
  public final static native int SBSymbol_GetType(long jarg1, SBSymbol jarg1_);
  public final static native boolean SBSymbol_GetDescription(long jarg1, SBSymbol jarg1_, long jarg2, SBStream jarg2_);
  public final static native boolean SBSymbol_IsExternal(long jarg1, SBSymbol jarg1_);
  public final static native boolean SBSymbol_IsSynthetic(long jarg1, SBSymbol jarg1_);
  public final static native String SBSymbol___repr__(long jarg1, SBSymbol jarg1_);
  public final static native long new_SBSymbolContext__SWIG_0();
  public final static native long new_SBSymbolContext__SWIG_1(long jarg1, SBSymbolContext jarg1_);
  public final static native void delete_SBSymbolContext(long jarg1);
  public final static native boolean SBSymbolContext_IsValid(long jarg1, SBSymbolContext jarg1_);
  public final static native long SBSymbolContext_GetModule(long jarg1, SBSymbolContext jarg1_);
  public final static native long SBSymbolContext_GetCompileUnit(long jarg1, SBSymbolContext jarg1_);
  public final static native long SBSymbolContext_GetFunction(long jarg1, SBSymbolContext jarg1_);
  public final static native long SBSymbolContext_GetBlock(long jarg1, SBSymbolContext jarg1_);
  public final static native long SBSymbolContext_GetLineEntry(long jarg1, SBSymbolContext jarg1_);
  public final static native long SBSymbolContext_GetSymbol(long jarg1, SBSymbolContext jarg1_);
  public final static native void SBSymbolContext_SetModule(long jarg1, SBSymbolContext jarg1_, long jarg2, SBModule jarg2_);
  public final static native void SBSymbolContext_SetCompileUnit(long jarg1, SBSymbolContext jarg1_, long jarg2, SBCompileUnit jarg2_);
  public final static native void SBSymbolContext_SetFunction(long jarg1, SBSymbolContext jarg1_, long jarg2, SBFunction jarg2_);
  public final static native void SBSymbolContext_SetBlock(long jarg1, SBSymbolContext jarg1_, long jarg2, SBBlock jarg2_);
  public final static native void SBSymbolContext_SetLineEntry(long jarg1, SBSymbolContext jarg1_, long jarg2, SBLineEntry jarg2_);
  public final static native void SBSymbolContext_SetSymbol(long jarg1, SBSymbolContext jarg1_, long jarg2, SBSymbol jarg2_);
  public final static native long SBSymbolContext_GetParentOfInlinedScope(long jarg1, SBSymbolContext jarg1_, long jarg2, SBAddress jarg2_, long jarg3, SBAddress jarg3_);
  public final static native boolean SBSymbolContext_GetDescription(long jarg1, SBSymbolContext jarg1_, long jarg2, SBStream jarg2_);
  public final static native String SBSymbolContext___repr__(long jarg1, SBSymbolContext jarg1_);
  public final static native long new_SBSymbolContextList__SWIG_0();
  public final static native long new_SBSymbolContextList__SWIG_1(long jarg1, SBSymbolContextList jarg1_);
  public final static native void delete_SBSymbolContextList(long jarg1);
  public final static native boolean SBSymbolContextList_IsValid(long jarg1, SBSymbolContextList jarg1_);
  public final static native long SBSymbolContextList_GetSize(long jarg1, SBSymbolContextList jarg1_);
  public final static native long SBSymbolContextList_GetContextAtIndex(long jarg1, SBSymbolContextList jarg1_, long jarg2);
  public final static native void SBSymbolContextList_Append__SWIG_0(long jarg1, SBSymbolContextList jarg1_, long jarg2, SBSymbolContext jarg2_);
  public final static native void SBSymbolContextList_Append__SWIG_1(long jarg1, SBSymbolContextList jarg1_, long jarg2, SBSymbolContextList jarg2_);
  public final static native boolean SBSymbolContextList_GetDescription(long jarg1, SBSymbolContextList jarg1_, long jarg2, SBStream jarg2_);
  public final static native void SBSymbolContextList_Clear(long jarg1, SBSymbolContextList jarg1_);
  public final static native String SBSymbolContextList___repr__(long jarg1, SBSymbolContextList jarg1_);
  public final static native int SBTarget_eBroadcastBitBreakpointChanged_get();
  public final static native int SBTarget_eBroadcastBitModulesLoaded_get();
  public final static native int SBTarget_eBroadcastBitModulesUnloaded_get();
  public final static native int SBTarget_eBroadcastBitWatchpointChanged_get();
  public final static native int SBTarget_eBroadcastBitSymbolsLoaded_get();
  public final static native long new_SBTarget__SWIG_0();
  public final static native long new_SBTarget__SWIG_1(long jarg1, SBTarget jarg1_);
  public final static native void delete_SBTarget(long jarg1);
  public final static native String SBTarget_GetBroadcasterClassName();
  public final static native boolean SBTarget_IsValid(long jarg1, SBTarget jarg1_);
  public final static native boolean SBTarget_EventIsTargetEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBTarget_GetTargetFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBTarget_GetNumModulesFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBTarget_GetModuleAtIndexFromEvent(long jarg1, long jarg2, SBEvent jarg2_);
  public final static native long SBTarget_GetProcess(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetPlatform(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_Install(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_Launch__SWIG_0(long jarg1, SBTarget jarg1_, long jarg2, SBListener jarg2_, String[] jarg3, String[] jarg4, String jarg5, String jarg6, String jarg7, String jarg8, long jarg9, boolean jarg10, long jarg11, SBError jarg11_);
  public final static native long SBTarget_LaunchSimple(long jarg1, SBTarget jarg1_, String[] jarg2, String[] jarg3, String jarg4);
  public final static native long SBTarget_Launch__SWIG_1(long jarg1, SBTarget jarg1_, long jarg2, SBLaunchInfo jarg2_, long jarg3, SBError jarg3_);
  public final static native long SBTarget_LoadCore__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long SBTarget_LoadCore__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBError jarg3_);
  public final static native long SBTarget_Attach(long jarg1, SBTarget jarg1_, long jarg2, SBAttachInfo jarg2_, long jarg3, SBError jarg3_);
  public final static native long SBTarget_AttachToProcessWithID(long jarg1, SBTarget jarg1_, long jarg2, SBListener jarg2_, java.math.BigInteger jarg3, long jarg4, SBError jarg4_);
  public final static native long SBTarget_AttachToProcessWithName(long jarg1, SBTarget jarg1_, long jarg2, SBListener jarg2_, String jarg3, boolean jarg4, long jarg5, SBError jarg5_);
  public final static native long SBTarget_ConnectRemote(long jarg1, SBTarget jarg1_, long jarg2, SBListener jarg2_, String jarg3, String jarg4, long jarg5, SBError jarg5_);
  public final static native long SBTarget_GetExecutable(long jarg1, SBTarget jarg1_);
  public final static native void SBTarget_AppendImageSearchPath(long jarg1, SBTarget jarg1_, String jarg2, String jarg3, long jarg4, SBError jarg4_);
  public final static native boolean SBTarget_AddModule__SWIG_0(long jarg1, SBTarget jarg1_, long jarg2, SBModule jarg2_);
  public final static native long SBTarget_AddModule__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native long SBTarget_AddModule__SWIG_2(long jarg1, SBTarget jarg1_, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native long SBTarget_AddModule__SWIG_3(long jarg1, SBTarget jarg1_, long jarg2, SBModuleSpec jarg2_);
  public final static native long SBTarget_GetNumModules(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetModuleAtIndex(long jarg1, SBTarget jarg1_, long jarg2);
  public final static native boolean SBTarget_RemoveModule(long jarg1, SBTarget jarg1_, long jarg2, SBModule jarg2_);
  public final static native long SBTarget_GetDebugger(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_FindModule(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native long SBTarget_FindCompileUnits(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native int SBTarget_GetByteOrder(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetAddressByteSize(long jarg1, SBTarget jarg1_);
  public final static native String SBTarget_GetTriple(long jarg1, SBTarget jarg1_);
  public final static native String SBTarget_GetABIName(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetDataByteSize(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetCodeByteSize(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetMaximumNumberOfChildrenToDisplay(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_SetSectionLoadAddress(long jarg1, SBTarget jarg1_, long jarg2, SBSection jarg2_, java.math.BigInteger jarg3);
  public final static native long SBTarget_ClearSectionLoadAddress(long jarg1, SBTarget jarg1_, long jarg2, SBSection jarg2_);
  public final static native long SBTarget_SetModuleLoadAddress(long jarg1, SBTarget jarg1_, long jarg2, SBModule jarg2_, long jarg3);
  public final static native long SBTarget_ClearModuleLoadAddress(long jarg1, SBTarget jarg1_, long jarg2, SBModule jarg2_);
  public final static native long SBTarget_FindFunctions__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2, long jarg3);
  public final static native long SBTarget_FindFunctions__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long SBTarget_FindFirstType(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long SBTarget_FindTypes(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long SBTarget_GetBasicType(long jarg1, SBTarget jarg1_, int jarg2);
  public final static native long SBTarget_GetSourceManager(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_FindGlobalVariables__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2, long jarg3);
  public final static native long SBTarget_FindFirstGlobalVariable(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long SBTarget_FindGlobalVariables__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, int jarg4);
  public final static native long SBTarget_FindGlobalFunctions(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, int jarg4);
  public final static native void SBTarget_Clear(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_ResolveFileAddress(long jarg1, SBTarget jarg1_, java.math.BigInteger jarg2);
  public final static native long SBTarget_ResolveLoadAddress(long jarg1, SBTarget jarg1_, java.math.BigInteger jarg2);
  public final static native long SBTarget_ResolvePastLoadAddress(long jarg1, SBTarget jarg1_, long jarg2, java.math.BigInteger jarg3);
  public final static native long SBTarget_ResolveSymbolContextForAddress(long jarg1, SBTarget jarg1_, long jarg2, SBAddress jarg2_, long jarg3);
  public final static native long SBTarget_ReadMemory(long jarg1, SBTarget jarg1_, long jarg2, SBAddress jarg2_, long jarg3, long jarg4, long jarg5, SBError jarg5_);
  public final static native long SBTarget_BreakpointCreateByLocation__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2, long jarg3);
  public final static native long SBTarget_BreakpointCreateByLocation__SWIG_1(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3);
  public final static native long SBTarget_BreakpointCreateByLocation__SWIG_2(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, java.math.BigInteger jarg4);
  public final static native long SBTarget_BreakpointCreateByLocation__SWIG_3(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, java.math.BigInteger jarg4, long jarg5, SBFileSpecList jarg5_);
  public final static native long SBTarget_BreakpointCreateByLocation__SWIG_4(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, long jarg4, java.math.BigInteger jarg5, long jarg6, SBFileSpecList jarg6_);
  public final static native long SBTarget_BreakpointCreateByLocation__SWIG_5(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, long jarg4, java.math.BigInteger jarg5, long jarg6, SBFileSpecList jarg6_, boolean jarg7);
  public final static native long SBTarget_BreakpointCreateByName__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2, String jarg3);
  public final static native long SBTarget_BreakpointCreateByName__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long SBTarget_BreakpointCreateByName__SWIG_2(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, long jarg4, SBFileSpecList jarg4_, long jarg5, SBFileSpecList jarg5_);
  public final static native long SBTarget_BreakpointCreateByName__SWIG_3(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, int jarg4, long jarg5, SBFileSpecList jarg5_, long jarg6, SBFileSpecList jarg6_);
  public final static native long SBTarget_BreakpointCreateByNames__SWIG_0(long jarg1, SBTarget jarg1_, String[] jarg2, long jarg3, long jarg4, long jarg5, SBFileSpecList jarg5_, long jarg6, SBFileSpecList jarg6_);
  public final static native long SBTarget_BreakpointCreateByNames__SWIG_1(long jarg1, SBTarget jarg1_, String[] jarg2, long jarg3, long jarg4, int jarg5, long jarg6, SBFileSpecList jarg6_, long jarg7, SBFileSpecList jarg7_);
  public final static native long SBTarget_BreakpointCreateByNames__SWIG_2(long jarg1, SBTarget jarg1_, String[] jarg2, long jarg3, long jarg4, int jarg5, java.math.BigInteger jarg6, long jarg7, SBFileSpecList jarg7_, long jarg8, SBFileSpecList jarg8_);
  public final static native long SBTarget_BreakpointCreateByRegex__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2, String jarg3);
  public final static native long SBTarget_BreakpointCreateByRegex__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long SBTarget_BreakpointCreateByRegex__SWIG_2(long jarg1, SBTarget jarg1_, String jarg2, int jarg3, long jarg4, SBFileSpecList jarg4_, long jarg5, SBFileSpecList jarg5_);
  public final static native long SBTarget_BreakpointCreateBySourceRegex__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBFileSpec jarg3_, String jarg4);
  public final static native long SBTarget_BreakpointCreateBySourceRegex__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBFileSpec jarg3_);
  public final static native long SBTarget_BreakpointCreateBySourceRegex__SWIG_2(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBFileSpecList jarg3_, long jarg4, SBFileSpecList jarg4_);
  public final static native long SBTarget_BreakpointCreateBySourceRegex__SWIG_3(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBFileSpecList jarg3_, long jarg4, SBFileSpecList jarg4_, long jarg5, SBStringList jarg5_);
  public final static native long SBTarget_BreakpointCreateForException(long jarg1, SBTarget jarg1_, int jarg2, boolean jarg3, boolean jarg4);
  public final static native long SBTarget_BreakpointCreateByAddress(long jarg1, SBTarget jarg1_, java.math.BigInteger jarg2);
  public final static native long SBTarget_GetEnvironment(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_BreakpointCreateBySBAddress(long jarg1, SBTarget jarg1_, long jarg2, SBAddress jarg2_);
  public final static native long SBTarget_BreakpointCreateFromScript__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBStructuredData jarg3_, long jarg4, SBFileSpecList jarg4_, long jarg5, SBFileSpecList jarg5_, boolean jarg6);
  public final static native long SBTarget_BreakpointCreateFromScript__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBStructuredData jarg3_, long jarg4, SBFileSpecList jarg4_, long jarg5, SBFileSpecList jarg5_);
  public final static native long SBTarget_GetNumBreakpoints(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetBreakpointAtIndex(long jarg1, SBTarget jarg1_, long jarg2);
  public final static native boolean SBTarget_BreakpointDelete(long jarg1, SBTarget jarg1_, int jarg2);
  public final static native long SBTarget_FindBreakpointByID(long jarg1, SBTarget jarg1_, int jarg2);
  public final static native boolean SBTarget_FindBreakpointsByName(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBBreakpointList jarg3_);
  public final static native void SBTarget_DeleteBreakpointName(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native void SBTarget_GetBreakpointNames(long jarg1, SBTarget jarg1_, long jarg2, SBStringList jarg2_);
  public final static native boolean SBTarget_EnableAllBreakpoints(long jarg1, SBTarget jarg1_);
  public final static native boolean SBTarget_DisableAllBreakpoints(long jarg1, SBTarget jarg1_);
  public final static native boolean SBTarget_DeleteAllBreakpoints(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_BreakpointsCreateFromFile__SWIG_0(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBBreakpointList jarg3_);
  public final static native long SBTarget_BreakpointsCreateFromFile__SWIG_1(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBStringList jarg3_, long jarg4, SBBreakpointList jarg4_);
  public final static native long SBTarget_BreakpointsWriteToFile__SWIG_0(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_);
  public final static native long SBTarget_BreakpointsWriteToFile__SWIG_1(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBBreakpointList jarg3_, boolean jarg4);
  public final static native long SBTarget_BreakpointsWriteToFile__SWIG_2(long jarg1, SBTarget jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3, SBBreakpointList jarg3_);
  public final static native long SBTarget_GetNumWatchpoints(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetWatchpointAtIndex(long jarg1, SBTarget jarg1_, long jarg2);
  public final static native boolean SBTarget_DeleteWatchpoint(long jarg1, SBTarget jarg1_, int jarg2);
  public final static native long SBTarget_FindWatchpointByID(long jarg1, SBTarget jarg1_, int jarg2);
  public final static native boolean SBTarget_EnableAllWatchpoints(long jarg1, SBTarget jarg1_);
  public final static native boolean SBTarget_DisableAllWatchpoints(long jarg1, SBTarget jarg1_);
  public final static native boolean SBTarget_DeleteAllWatchpoints(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_WatchAddress(long jarg1, SBTarget jarg1_, java.math.BigInteger jarg2, long jarg3, boolean jarg4, boolean jarg5, long jarg6, SBError jarg6_);
  public final static native long SBTarget_GetBroadcaster(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_CreateValueFromAddress(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBAddress jarg3_, long jarg4, SBType jarg4_);
  public final static native long SBTarget_CreateValueFromData(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBData jarg3_, long jarg4, SBType jarg4_);
  public final static native long SBTarget_CreateValueFromExpression(long jarg1, SBTarget jarg1_, String jarg2, String jarg3);
  public final static native long SBTarget_ReadInstructions__SWIG_0(long jarg1, SBTarget jarg1_, long jarg2, SBAddress jarg2_, long jarg3);
  public final static native long SBTarget_ReadInstructions__SWIG_1(long jarg1, SBTarget jarg1_, long jarg2, SBAddress jarg2_, long jarg3, String jarg4);
  public final static native long SBTarget_GetInstructions(long jarg1, SBTarget jarg1_, long jarg2, SBAddress jarg2_, long jarg3, long jarg4);
  public final static native long SBTarget_GetInstructionsWithFlavor(long jarg1, SBTarget jarg1_, long jarg2, SBAddress jarg2_, String jarg3, long jarg4, long jarg5);
  public final static native long SBTarget_FindSymbols__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2, int jarg3);
  public final static native long SBTarget_FindSymbols__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native boolean SBTarget_GetDescription(long jarg1, SBTarget jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native java.math.BigInteger SBTarget_GetStackRedZoneSize(long jarg1, SBTarget jarg1_);
  public final static native boolean SBTarget_IsLoaded(long jarg1, SBTarget jarg1_, long jarg2, SBModule jarg2_);
  public final static native long SBTarget_GetLaunchInfo(long jarg1, SBTarget jarg1_);
  public final static native void SBTarget_SetLaunchInfo(long jarg1, SBTarget jarg1_, long jarg2, SBLaunchInfo jarg2_);
  public final static native void SBTarget_SetCollectingStats(long jarg1, SBTarget jarg1_, boolean jarg2);
  public final static native boolean SBTarget_GetCollectingStats(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetStatistics(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_EvaluateExpression__SWIG_0(long jarg1, SBTarget jarg1_, String jarg2);
  public final static native long SBTarget_EvaluateExpression__SWIG_1(long jarg1, SBTarget jarg1_, String jarg2, long jarg3, SBExpressionOptions jarg3_);
  public final static native String SBTarget___repr__(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_GetTrace(long jarg1, SBTarget jarg1_);
  public final static native long SBTarget_CreateTrace(long jarg1, SBTarget jarg1_, long jarg2, SBError jarg2_);
  public final static native int SBThread_eBroadcastBitStackChanged_get();
  public final static native int SBThread_eBroadcastBitThreadSuspended_get();
  public final static native int SBThread_eBroadcastBitThreadResumed_get();
  public final static native int SBThread_eBroadcastBitSelectedFrameChanged_get();
  public final static native int SBThread_eBroadcastBitThreadSelected_get();
  public final static native long new_SBThread__SWIG_0();
  public final static native long new_SBThread__SWIG_1(long jarg1, SBThread jarg1_);
  public final static native void delete_SBThread(long jarg1);
  public final static native String SBThread_GetBroadcasterClassName();
  public final static native boolean SBThread_EventIsThreadEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBThread_GetStackFrameFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBThread_GetThreadFromEvent(long jarg1, SBEvent jarg1_);
  public final static native boolean SBThread_IsValid(long jarg1, SBThread jarg1_);
  public final static native void SBThread_Clear(long jarg1, SBThread jarg1_);
  public final static native int SBThread_GetStopReason(long jarg1, SBThread jarg1_);
  public final static native long SBThread_GetStopReasonDataCount(long jarg1, SBThread jarg1_);
  public final static native java.math.BigInteger SBThread_GetStopReasonDataAtIndex(long jarg1, SBThread jarg1_, long jarg2);
  public final static native boolean SBThread_GetStopReasonExtendedInfoAsJSON(long jarg1, SBThread jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBThread_GetStopReasonExtendedBacktraces(long jarg1, SBThread jarg1_, int jarg2);
  public final static native long SBThread_GetStopDescription(long jarg1, SBThread jarg1_, String jarg2, long jarg3);
  public final static native long SBThread_GetStopReturnValue(long jarg1, SBThread jarg1_);
  public final static native java.math.BigInteger SBThread_GetThreadID(long jarg1, SBThread jarg1_);
  public final static native long SBThread_GetIndexID(long jarg1, SBThread jarg1_);
  public final static native String SBThread_GetName(long jarg1, SBThread jarg1_);
  public final static native String SBThread_GetQueueName(long jarg1, SBThread jarg1_);
  public final static native java.math.BigInteger SBThread_GetQueueID(long jarg1, SBThread jarg1_);
  public final static native boolean SBThread_GetInfoItemByPathAsString(long jarg1, SBThread jarg1_, String jarg2, long jarg3, SBStream jarg3_);
  public final static native long SBThread_GetQueue(long jarg1, SBThread jarg1_);
  public final static native void SBThread_StepOver__SWIG_0(long jarg1, SBThread jarg1_, int jarg2);
  public final static native void SBThread_StepOver__SWIG_1(long jarg1, SBThread jarg1_);
  public final static native void SBThread_StepOver__SWIG_2(long jarg1, SBThread jarg1_, int jarg2, long jarg3, SBError jarg3_);
  public final static native void SBThread_StepInto__SWIG_0(long jarg1, SBThread jarg1_, int jarg2);
  public final static native void SBThread_StepInto__SWIG_1(long jarg1, SBThread jarg1_);
  public final static native void SBThread_StepInto__SWIG_2(long jarg1, SBThread jarg1_, String jarg2, int jarg3);
  public final static native void SBThread_StepInto__SWIG_3(long jarg1, SBThread jarg1_, String jarg2);
  public final static native void SBThread_StepInto__SWIG_4(long jarg1, SBThread jarg1_, String jarg2, long jarg3, long jarg4, SBError jarg4_, int jarg5);
  public final static native void SBThread_StepInto__SWIG_5(long jarg1, SBThread jarg1_, String jarg2, long jarg3, long jarg4, SBError jarg4_);
  public final static native void SBThread_StepOut__SWIG_0(long jarg1, SBThread jarg1_);
  public final static native void SBThread_StepOut__SWIG_1(long jarg1, SBThread jarg1_, long jarg2, SBError jarg2_);
  public final static native void SBThread_StepOutOfFrame__SWIG_0(long jarg1, SBThread jarg1_, long jarg2, SBFrame jarg2_);
  public final static native void SBThread_StepOutOfFrame__SWIG_1(long jarg1, SBThread jarg1_, long jarg2, SBFrame jarg2_, long jarg3, SBError jarg3_);
  public final static native void SBThread_StepInstruction__SWIG_0(long jarg1, SBThread jarg1_, boolean jarg2);
  public final static native void SBThread_StepInstruction__SWIG_1(long jarg1, SBThread jarg1_, boolean jarg2, long jarg3, SBError jarg3_);
  public final static native long SBThread_StepOverUntil(long jarg1, SBThread jarg1_, long jarg2, SBFrame jarg2_, long jarg3, SBFileSpec jarg3_, long jarg4);
  public final static native long SBThread_StepUsingScriptedThreadPlan__SWIG_0(long jarg1, SBThread jarg1_, String jarg2);
  public final static native long SBThread_StepUsingScriptedThreadPlan__SWIG_1(long jarg1, SBThread jarg1_, String jarg2, boolean jarg3);
  public final static native long SBThread_StepUsingScriptedThreadPlan__SWIG_2(long jarg1, SBThread jarg1_, String jarg2, long jarg3, SBStructuredData jarg3_, boolean jarg4);
  public final static native long SBThread_JumpToLine(long jarg1, SBThread jarg1_, long jarg2, SBFileSpec jarg2_, long jarg3);
  public final static native void SBThread_RunToAddress__SWIG_0(long jarg1, SBThread jarg1_, java.math.BigInteger jarg2);
  public final static native void SBThread_RunToAddress__SWIG_1(long jarg1, SBThread jarg1_, java.math.BigInteger jarg2, long jarg3, SBError jarg3_);
  public final static native long SBThread_ReturnFromFrame(long jarg1, SBThread jarg1_, long jarg2, SBFrame jarg2_, long jarg3, SBValue jarg3_);
  public final static native long SBThread_UnwindInnermostExpression(long jarg1, SBThread jarg1_);
  public final static native boolean SBThread_Suspend__SWIG_0(long jarg1, SBThread jarg1_);
  public final static native boolean SBThread_Suspend__SWIG_1(long jarg1, SBThread jarg1_, long jarg2, SBError jarg2_);
  public final static native boolean SBThread_Resume__SWIG_0(long jarg1, SBThread jarg1_);
  public final static native boolean SBThread_Resume__SWIG_1(long jarg1, SBThread jarg1_, long jarg2, SBError jarg2_);
  public final static native boolean SBThread_IsSuspended(long jarg1, SBThread jarg1_);
  public final static native boolean SBThread_IsStopped(long jarg1, SBThread jarg1_);
  public final static native long SBThread_GetNumFrames(long jarg1, SBThread jarg1_);
  public final static native long SBThread_GetFrameAtIndex(long jarg1, SBThread jarg1_, long jarg2);
  public final static native long SBThread_GetSelectedFrame(long jarg1, SBThread jarg1_);
  public final static native long SBThread_SetSelectedFrame(long jarg1, SBThread jarg1_, long jarg2);
  public final static native long SBThread_GetProcess(long jarg1, SBThread jarg1_);
  public final static native boolean SBThread_GetDescription__SWIG_0(long jarg1, SBThread jarg1_, long jarg2, SBStream jarg2_);
  public final static native boolean SBThread_GetDescription__SWIG_1(long jarg1, SBThread jarg1_, long jarg2, SBStream jarg2_, boolean jarg3);
  public final static native boolean SBThread_GetStatus(long jarg1, SBThread jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBThread_GetExtendedBacktraceThread(long jarg1, SBThread jarg1_, String jarg2);
  public final static native long SBThread_GetExtendedBacktraceOriginatingIndexID(long jarg1, SBThread jarg1_);
  public final static native long SBThread_GetCurrentException(long jarg1, SBThread jarg1_);
  public final static native long SBThread_GetCurrentExceptionBacktrace(long jarg1, SBThread jarg1_);
  public final static native boolean SBThread_SafeToCallFunctions(long jarg1, SBThread jarg1_);
  public final static native long SBThread_GetSiginfo(long jarg1, SBThread jarg1_);
  public final static native String SBThread___repr__(long jarg1, SBThread jarg1_);
  public final static native long new_SBThreadCollection__SWIG_0();
  public final static native long new_SBThreadCollection__SWIG_1(long jarg1, SBThreadCollection jarg1_);
  public final static native void delete_SBThreadCollection(long jarg1);
  public final static native boolean SBThreadCollection_IsValid(long jarg1, SBThreadCollection jarg1_);
  public final static native long SBThreadCollection_GetSize(long jarg1, SBThreadCollection jarg1_);
  public final static native long SBThreadCollection_GetThreadAtIndex(long jarg1, SBThreadCollection jarg1_, long jarg2);
  public final static native long new_SBThreadPlan__SWIG_0();
  public final static native long new_SBThreadPlan__SWIG_1(long jarg1, SBThreadPlan jarg1_);
  public final static native long new_SBThreadPlan__SWIG_2(long jarg1);
  public final static native long new_SBThreadPlan__SWIG_3(long jarg1, SBThread jarg1_, String jarg2);
  public final static native void delete_SBThreadPlan(long jarg1);
  public final static native boolean SBThreadPlan_IsValid__SWIG_0(long jarg1, SBThreadPlan jarg1_);
  public final static native void SBThreadPlan_Clear(long jarg1, SBThreadPlan jarg1_);
  public final static native int SBThreadPlan_GetStopReason(long jarg1, SBThreadPlan jarg1_);
  public final static native long SBThreadPlan_GetStopReasonDataCount(long jarg1, SBThreadPlan jarg1_);
  public final static native java.math.BigInteger SBThreadPlan_GetStopReasonDataAtIndex(long jarg1, SBThreadPlan jarg1_, long jarg2);
  public final static native long SBThreadPlan_GetThread(long jarg1, SBThreadPlan jarg1_);
  public final static native boolean SBThreadPlan_GetDescription(long jarg1, SBThreadPlan jarg1_, long jarg2, SBStream jarg2_);
  public final static native void SBThreadPlan_SetPlanComplete(long jarg1, SBThreadPlan jarg1_, boolean jarg2);
  public final static native boolean SBThreadPlan_IsPlanComplete(long jarg1, SBThreadPlan jarg1_);
  public final static native boolean SBThreadPlan_IsPlanStale(long jarg1, SBThreadPlan jarg1_);
  public final static native boolean SBThreadPlan_GetStopOthers(long jarg1, SBThreadPlan jarg1_);
  public final static native void SBThreadPlan_SetStopOthers(long jarg1, SBThreadPlan jarg1_, boolean jarg2);
  public final static native long SBThreadPlan_QueueThreadPlanForStepOverRange(long jarg1, SBThreadPlan jarg1_, long jarg2, SBAddress jarg2_, java.math.BigInteger jarg3);
  public final static native long SBThreadPlan_QueueThreadPlanForStepInRange(long jarg1, SBThreadPlan jarg1_, long jarg2, SBAddress jarg2_, java.math.BigInteger jarg3);
  public final static native long SBThreadPlan_QueueThreadPlanForStepOut__SWIG_0(long jarg1, SBThreadPlan jarg1_, long jarg2, boolean jarg3);
  public final static native long SBThreadPlan_QueueThreadPlanForStepOut__SWIG_1(long jarg1, SBThreadPlan jarg1_, long jarg2);
  public final static native long SBThreadPlan_QueueThreadPlanForRunToAddress(long jarg1, SBThreadPlan jarg1_, long jarg2, SBAddress jarg2_);
  public final static native long SBThreadPlan_QueueThreadPlanForStepScripted__SWIG_0(long jarg1, SBThreadPlan jarg1_, String jarg2);
  public final static native long SBThreadPlan_QueueThreadPlanForStepScripted__SWIG_1(long jarg1, SBThreadPlan jarg1_, String jarg2, long jarg3, SBError jarg3_);
  public final static native long SBThreadPlan_QueueThreadPlanForStepScripted__SWIG_2(long jarg1, SBThreadPlan jarg1_, String jarg2, long jarg3, SBStructuredData jarg3_, long jarg4, SBError jarg4_);
  public final static native long new_SBTrace();
  public final static native long SBTrace_CreateNewCursor(long jarg1, SBTrace jarg1_, long jarg2, SBError jarg2_, long jarg3, SBThread jarg3_);
  public final static native String SBTrace_GetStartConfigurationHelp(long jarg1, SBTrace jarg1_);
  public final static native long SBTrace_SaveToDisk__SWIG_0(long jarg1, SBTrace jarg1_, long jarg2, SBError jarg2_, long jarg3, SBFileSpec jarg3_, boolean jarg4);
  public final static native long SBTrace_SaveToDisk__SWIG_1(long jarg1, SBTrace jarg1_, long jarg2, SBError jarg2_, long jarg3, SBFileSpec jarg3_);
  public final static native long SBTrace_Start__SWIG_0(long jarg1, SBTrace jarg1_, long jarg2, SBStructuredData jarg2_);
  public final static native long SBTrace_Start__SWIG_1(long jarg1, SBTrace jarg1_, long jarg2, SBThread jarg2_, long jarg3, SBStructuredData jarg3_);
  public final static native long SBTrace_Stop__SWIG_0(long jarg1, SBTrace jarg1_);
  public final static native long SBTrace_Stop__SWIG_1(long jarg1, SBTrace jarg1_, long jarg2, SBThread jarg2_);
  public final static native boolean SBTrace_IsValid(long jarg1, SBTrace jarg1_);
  public final static native void delete_SBTrace(long jarg1);
  public final static native long new_SBTraceCursor__SWIG_0();
  public final static native long new_SBTraceCursor__SWIG_1(long jarg1);
  public final static native void SBTraceCursor_SetForwards(long jarg1, SBTraceCursor jarg1_, boolean jarg2);
  public final static native boolean SBTraceCursor_IsForwards(long jarg1, SBTraceCursor jarg1_);
  public final static native void SBTraceCursor_Next(long jarg1, SBTraceCursor jarg1_);
  public final static native boolean SBTraceCursor_HasValue(long jarg1, SBTraceCursor jarg1_);
  public final static native boolean SBTraceCursor_GoToId(long jarg1, SBTraceCursor jarg1_, java.math.BigInteger jarg2);
  public final static native boolean SBTraceCursor_HasId(long jarg1, SBTraceCursor jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger SBTraceCursor_GetId(long jarg1, SBTraceCursor jarg1_);
  public final static native boolean SBTraceCursor_Seek(long jarg1, SBTraceCursor jarg1_, long jarg2, int jarg3);
  public final static native int SBTraceCursor_GetItemKind(long jarg1, SBTraceCursor jarg1_);
  public final static native boolean SBTraceCursor_IsError(long jarg1, SBTraceCursor jarg1_);
  public final static native String SBTraceCursor_GetError(long jarg1, SBTraceCursor jarg1_);
  public final static native boolean SBTraceCursor_IsEvent(long jarg1, SBTraceCursor jarg1_);
  public final static native int SBTraceCursor_GetEventType(long jarg1, SBTraceCursor jarg1_);
  public final static native String SBTraceCursor_GetEventTypeAsString(long jarg1, SBTraceCursor jarg1_);
  public final static native boolean SBTraceCursor_IsInstruction(long jarg1, SBTraceCursor jarg1_);
  public final static native java.math.BigInteger SBTraceCursor_GetLoadAddress(long jarg1, SBTraceCursor jarg1_);
  public final static native long SBTraceCursor_GetCPU(long jarg1, SBTraceCursor jarg1_);
  public final static native boolean SBTraceCursor_IsValid(long jarg1, SBTraceCursor jarg1_);
  public final static native void delete_SBTraceCursor(long jarg1);
  public final static native long new_SBTypeMember__SWIG_0();
  public final static native long new_SBTypeMember__SWIG_1(long jarg1, SBTypeMember jarg1_);
  public final static native void delete_SBTypeMember(long jarg1);
  public final static native boolean SBTypeMember_IsValid(long jarg1, SBTypeMember jarg1_);
  public final static native String SBTypeMember_GetName(long jarg1, SBTypeMember jarg1_);
  public final static native long SBTypeMember_GetType(long jarg1, SBTypeMember jarg1_);
  public final static native java.math.BigInteger SBTypeMember_GetOffsetInBytes(long jarg1, SBTypeMember jarg1_);
  public final static native java.math.BigInteger SBTypeMember_GetOffsetInBits(long jarg1, SBTypeMember jarg1_);
  public final static native boolean SBTypeMember_IsBitfield(long jarg1, SBTypeMember jarg1_);
  public final static native long SBTypeMember_GetBitfieldSizeInBits(long jarg1, SBTypeMember jarg1_);
  public final static native String SBTypeMember___repr__(long jarg1, SBTypeMember jarg1_);
  public final static native long new_SBTypeMemberFunction__SWIG_0();
  public final static native long new_SBTypeMemberFunction__SWIG_1(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native void delete_SBTypeMemberFunction(long jarg1);
  public final static native boolean SBTypeMemberFunction_IsValid(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native String SBTypeMemberFunction_GetName(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native String SBTypeMemberFunction_GetDemangledName(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native String SBTypeMemberFunction_GetMangledName(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native long SBTypeMemberFunction_GetType(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native long SBTypeMemberFunction_GetReturnType(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native long SBTypeMemberFunction_GetNumberOfArguments(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native long SBTypeMemberFunction_GetArgumentTypeAtIndex(long jarg1, SBTypeMemberFunction jarg1_, long jarg2);
  public final static native int SBTypeMemberFunction_GetKind(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native boolean SBTypeMemberFunction_GetDescription(long jarg1, SBTypeMemberFunction jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native String SBTypeMemberFunction___repr__(long jarg1, SBTypeMemberFunction jarg1_);
  public final static native long new_SBType__SWIG_0();
  public final static native long new_SBType__SWIG_1(long jarg1, SBType jarg1_);
  public final static native void delete_SBType(long jarg1);
  public final static native boolean SBType_IsValid(long jarg1, SBType jarg1_);
  public final static native java.math.BigInteger SBType_GetByteSize(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsPointerType(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsReferenceType(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsFunctionType(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsPolymorphicClass(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsArrayType(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsVectorType(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsTypedefType(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsAnonymousType(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsScopedEnumerationType(long jarg1, SBType jarg1_);
  public final static native boolean SBType_IsAggregateType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetPointerType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetPointeeType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetReferenceType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetTypedefedType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetDereferencedType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetUnqualifiedType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetCanonicalType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetEnumerationIntegerType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetArrayElementType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetArrayType(long jarg1, SBType jarg1_, java.math.BigInteger jarg2);
  public final static native long SBType_GetVectorElementType(long jarg1, SBType jarg1_);
  public final static native int SBType_GetBasicType__SWIG_0(long jarg1, SBType jarg1_);
  public final static native long SBType_GetBasicType__SWIG_1(long jarg1, SBType jarg1_, int jarg2);
  public final static native long SBType_GetNumberOfFields(long jarg1, SBType jarg1_);
  public final static native long SBType_GetNumberOfDirectBaseClasses(long jarg1, SBType jarg1_);
  public final static native long SBType_GetNumberOfVirtualBaseClasses(long jarg1, SBType jarg1_);
  public final static native long SBType_GetFieldAtIndex(long jarg1, SBType jarg1_, long jarg2);
  public final static native long SBType_GetDirectBaseClassAtIndex(long jarg1, SBType jarg1_, long jarg2);
  public final static native long SBType_GetVirtualBaseClassAtIndex(long jarg1, SBType jarg1_, long jarg2);
  public final static native long SBType_GetEnumMembers(long jarg1, SBType jarg1_);
  public final static native long SBType_GetModule(long jarg1, SBType jarg1_);
  public final static native String SBType_GetName(long jarg1, SBType jarg1_);
  public final static native String SBType_GetDisplayTypeName(long jarg1, SBType jarg1_);
  public final static native int SBType_GetTypeClass(long jarg1, SBType jarg1_);
  public final static native long SBType_GetNumberOfTemplateArguments(long jarg1, SBType jarg1_);
  public final static native long SBType_GetTemplateArgumentType(long jarg1, SBType jarg1_, long jarg2);
  public final static native int SBType_GetTemplateArgumentKind(long jarg1, SBType jarg1_, long jarg2);
  public final static native long SBType_GetFunctionReturnType(long jarg1, SBType jarg1_);
  public final static native long SBType_GetFunctionArgumentTypes(long jarg1, SBType jarg1_);
  public final static native long SBType_GetNumberOfMemberFunctions(long jarg1, SBType jarg1_);
  public final static native long SBType_GetMemberFunctionAtIndex(long jarg1, SBType jarg1_, long jarg2);
  public final static native boolean SBType_IsTypeComplete(long jarg1, SBType jarg1_);
  public final static native long SBType_GetTypeFlags(long jarg1, SBType jarg1_);
  public final static native String SBType___repr__(long jarg1, SBType jarg1_);
  public final static native long new_SBTypeList();
  public final static native boolean SBTypeList_IsValid(long jarg1, SBTypeList jarg1_);
  public final static native void SBTypeList_Append(long jarg1, SBTypeList jarg1_, long jarg2, SBType jarg2_);
  public final static native long SBTypeList_GetTypeAtIndex(long jarg1, SBTypeList jarg1_, long jarg2);
  public final static native long SBTypeList_GetSize(long jarg1, SBTypeList jarg1_);
  public final static native void delete_SBTypeList(long jarg1);
  public final static native long new_SBTypeCategory__SWIG_0();
  public final static native long new_SBTypeCategory__SWIG_1(long jarg1, SBTypeCategory jarg1_);
  public final static native void delete_SBTypeCategory(long jarg1);
  public final static native boolean SBTypeCategory_IsValid(long jarg1, SBTypeCategory jarg1_);
  public final static native boolean SBTypeCategory_GetEnabled(long jarg1, SBTypeCategory jarg1_);
  public final static native void SBTypeCategory_SetEnabled(long jarg1, SBTypeCategory jarg1_, boolean jarg2);
  public final static native String SBTypeCategory_GetName(long jarg1, SBTypeCategory jarg1_);
  public final static native int SBTypeCategory_GetLanguageAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native long SBTypeCategory_GetNumLanguages(long jarg1, SBTypeCategory jarg1_);
  public final static native void SBTypeCategory_AddLanguage(long jarg1, SBTypeCategory jarg1_, int jarg2);
  public final static native boolean SBTypeCategory_GetDescription(long jarg1, SBTypeCategory jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native long SBTypeCategory_GetNumFormats(long jarg1, SBTypeCategory jarg1_);
  public final static native long SBTypeCategory_GetNumSummaries(long jarg1, SBTypeCategory jarg1_);
  public final static native long SBTypeCategory_GetNumFilters(long jarg1, SBTypeCategory jarg1_);
  public final static native long SBTypeCategory_GetNumSynthetics(long jarg1, SBTypeCategory jarg1_);
  public final static native long SBTypeCategory_GetTypeNameSpecifierForFilterAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native long SBTypeCategory_GetTypeNameSpecifierForFormatAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native long SBTypeCategory_GetTypeNameSpecifierForSummaryAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native long SBTypeCategory_GetTypeNameSpecifierForSyntheticAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native long SBTypeCategory_GetFilterForType(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native long SBTypeCategory_GetFormatForType(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native long SBTypeCategory_GetSummaryForType(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native long SBTypeCategory_GetSyntheticForType(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native long SBTypeCategory_GetFilterAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native long SBTypeCategory_GetFormatAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native long SBTypeCategory_GetSummaryAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native long SBTypeCategory_GetSyntheticAtIndex(long jarg1, SBTypeCategory jarg1_, long jarg2);
  public final static native boolean SBTypeCategory_AddTypeFormat(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_, long jarg3, SBTypeFormat jarg3_);
  public final static native boolean SBTypeCategory_DeleteTypeFormat(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native boolean SBTypeCategory_AddTypeSummary(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_, long jarg3, SBTypeSummary jarg3_);
  public final static native boolean SBTypeCategory_DeleteTypeSummary(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native boolean SBTypeCategory_AddTypeFilter(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_, long jarg3, SBTypeFilter jarg3_);
  public final static native boolean SBTypeCategory_DeleteTypeFilter(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native boolean SBTypeCategory_AddTypeSynthetic(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_, long jarg3, SBTypeSynthetic jarg3_);
  public final static native boolean SBTypeCategory_DeleteTypeSynthetic(long jarg1, SBTypeCategory jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native String SBTypeCategory___repr__(long jarg1, SBTypeCategory jarg1_);
  public final static native long new_SBTypeEnumMember__SWIG_0();
  public final static native long new_SBTypeEnumMember__SWIG_1(long jarg1, SBTypeEnumMember jarg1_);
  public final static native void delete_SBTypeEnumMember(long jarg1);
  public final static native boolean SBTypeEnumMember_IsValid(long jarg1, SBTypeEnumMember jarg1_);
  public final static native long SBTypeEnumMember_GetValueAsSigned(long jarg1, SBTypeEnumMember jarg1_);
  public final static native java.math.BigInteger SBTypeEnumMember_GetValueAsUnsigned(long jarg1, SBTypeEnumMember jarg1_);
  public final static native String SBTypeEnumMember_GetName(long jarg1, SBTypeEnumMember jarg1_);
  public final static native long SBTypeEnumMember_GetType(long jarg1, SBTypeEnumMember jarg1_);
  public final static native boolean SBTypeEnumMember_GetDescription(long jarg1, SBTypeEnumMember jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native String SBTypeEnumMember___repr__(long jarg1, SBTypeEnumMember jarg1_);
  public final static native long new_SBTypeEnumMemberList__SWIG_0();
  public final static native long new_SBTypeEnumMemberList__SWIG_1(long jarg1, SBTypeEnumMemberList jarg1_);
  public final static native void delete_SBTypeEnumMemberList(long jarg1);
  public final static native boolean SBTypeEnumMemberList_IsValid(long jarg1, SBTypeEnumMemberList jarg1_);
  public final static native void SBTypeEnumMemberList_Append(long jarg1, SBTypeEnumMemberList jarg1_, long jarg2, SBTypeEnumMember jarg2_);
  public final static native long SBTypeEnumMemberList_GetTypeEnumMemberAtIndex(long jarg1, SBTypeEnumMemberList jarg1_, long jarg2);
  public final static native long SBTypeEnumMemberList_GetSize(long jarg1, SBTypeEnumMemberList jarg1_);
  public final static native long new_SBTypeFilter__SWIG_0();
  public final static native long new_SBTypeFilter__SWIG_1(long jarg1);
  public final static native long new_SBTypeFilter__SWIG_2(long jarg1, SBTypeFilter jarg1_);
  public final static native void delete_SBTypeFilter(long jarg1);
  public final static native boolean SBTypeFilter_IsValid(long jarg1, SBTypeFilter jarg1_);
  public final static native boolean SBTypeFilter_IsEqualTo(long jarg1, SBTypeFilter jarg1_, long jarg2, SBTypeFilter jarg2_);
  public final static native long SBTypeFilter_GetNumberOfExpressionPaths(long jarg1, SBTypeFilter jarg1_);
  public final static native String SBTypeFilter_GetExpressionPathAtIndex(long jarg1, SBTypeFilter jarg1_, long jarg2);
  public final static native boolean SBTypeFilter_ReplaceExpressionPathAtIndex(long jarg1, SBTypeFilter jarg1_, long jarg2, String jarg3);
  public final static native void SBTypeFilter_AppendExpressionPath(long jarg1, SBTypeFilter jarg1_, String jarg2);
  public final static native void SBTypeFilter_Clear(long jarg1, SBTypeFilter jarg1_);
  public final static native long SBTypeFilter_GetOptions(long jarg1, SBTypeFilter jarg1_);
  public final static native void SBTypeFilter_SetOptions(long jarg1, SBTypeFilter jarg1_, long jarg2);
  public final static native boolean SBTypeFilter_GetDescription(long jarg1, SBTypeFilter jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native String SBTypeFilter___repr__(long jarg1, SBTypeFilter jarg1_);
  public final static native long new_SBTypeFormat__SWIG_0();
  public final static native long new_SBTypeFormat__SWIG_1(int jarg1, long jarg2);
  public final static native long new_SBTypeFormat__SWIG_2(int jarg1);
  public final static native long new_SBTypeFormat__SWIG_3(String jarg1, long jarg2);
  public final static native long new_SBTypeFormat__SWIG_4(String jarg1);
  public final static native long new_SBTypeFormat__SWIG_5(long jarg1, SBTypeFormat jarg1_);
  public final static native void delete_SBTypeFormat(long jarg1);
  public final static native boolean SBTypeFormat_IsValid(long jarg1, SBTypeFormat jarg1_);
  public final static native boolean SBTypeFormat_IsEqualTo(long jarg1, SBTypeFormat jarg1_, long jarg2, SBTypeFormat jarg2_);
  public final static native int SBTypeFormat_GetFormat(long jarg1, SBTypeFormat jarg1_);
  public final static native String SBTypeFormat_GetTypeName(long jarg1, SBTypeFormat jarg1_);
  public final static native long SBTypeFormat_GetOptions(long jarg1, SBTypeFormat jarg1_);
  public final static native void SBTypeFormat_SetFormat(long jarg1, SBTypeFormat jarg1_, int jarg2);
  public final static native void SBTypeFormat_SetTypeName(long jarg1, SBTypeFormat jarg1_, String jarg2);
  public final static native void SBTypeFormat_SetOptions(long jarg1, SBTypeFormat jarg1_, long jarg2);
  public final static native boolean SBTypeFormat_GetDescription(long jarg1, SBTypeFormat jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native String SBTypeFormat___repr__(long jarg1, SBTypeFormat jarg1_);
  public final static native long new_SBTypeNameSpecifier__SWIG_0();
  public final static native long new_SBTypeNameSpecifier__SWIG_1(String jarg1, boolean jarg2);
  public final static native long new_SBTypeNameSpecifier__SWIG_2(String jarg1);
  public final static native long new_SBTypeNameSpecifier__SWIG_3(String jarg1, int jarg2);
  public final static native long new_SBTypeNameSpecifier__SWIG_4(long jarg1, SBType jarg1_);
  public final static native long new_SBTypeNameSpecifier__SWIG_5(long jarg1, SBTypeNameSpecifier jarg1_);
  public final static native void delete_SBTypeNameSpecifier(long jarg1);
  public final static native boolean SBTypeNameSpecifier_IsValid(long jarg1, SBTypeNameSpecifier jarg1_);
  public final static native boolean SBTypeNameSpecifier_IsEqualTo(long jarg1, SBTypeNameSpecifier jarg1_, long jarg2, SBTypeNameSpecifier jarg2_);
  public final static native String SBTypeNameSpecifier_GetName(long jarg1, SBTypeNameSpecifier jarg1_);
  public final static native long SBTypeNameSpecifier_GetType(long jarg1, SBTypeNameSpecifier jarg1_);
  public final static native int SBTypeNameSpecifier_GetMatchType(long jarg1, SBTypeNameSpecifier jarg1_);
  public final static native boolean SBTypeNameSpecifier_IsRegex(long jarg1, SBTypeNameSpecifier jarg1_);
  public final static native boolean SBTypeNameSpecifier_GetDescription(long jarg1, SBTypeNameSpecifier jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native String SBTypeNameSpecifier___repr__(long jarg1, SBTypeNameSpecifier jarg1_);
  public final static native long new_SBTypeSummaryOptions__SWIG_0();
  public final static native long new_SBTypeSummaryOptions__SWIG_1(long jarg1, SBTypeSummaryOptions jarg1_);
  public final static native void delete_SBTypeSummaryOptions(long jarg1);
  public final static native boolean SBTypeSummaryOptions_IsValid(long jarg1, SBTypeSummaryOptions jarg1_);
  public final static native int SBTypeSummaryOptions_GetLanguage(long jarg1, SBTypeSummaryOptions jarg1_);
  public final static native int SBTypeSummaryOptions_GetCapping(long jarg1, SBTypeSummaryOptions jarg1_);
  public final static native void SBTypeSummaryOptions_SetLanguage(long jarg1, SBTypeSummaryOptions jarg1_, int jarg2);
  public final static native void SBTypeSummaryOptions_SetCapping(long jarg1, SBTypeSummaryOptions jarg1_, int jarg2);
  public final static native long new_SBTypeSummary__SWIG_0();
  public final static native long SBTypeSummary_CreateWithSummaryString__SWIG_0(String jarg1, long jarg2);
  public final static native long SBTypeSummary_CreateWithSummaryString__SWIG_1(String jarg1);
  public final static native long SBTypeSummary_CreateWithFunctionName__SWIG_0(String jarg1, long jarg2);
  public final static native long SBTypeSummary_CreateWithFunctionName__SWIG_1(String jarg1);
  public final static native long SBTypeSummary_CreateWithScriptCode__SWIG_0(String jarg1, long jarg2);
  public final static native long SBTypeSummary_CreateWithScriptCode__SWIG_1(String jarg1);
  public final static native long new_SBTypeSummary__SWIG_1(long jarg1, SBTypeSummary jarg1_);
  public final static native void delete_SBTypeSummary(long jarg1);
  public final static native boolean SBTypeSummary_IsValid(long jarg1, SBTypeSummary jarg1_);
  public final static native boolean SBTypeSummary_IsEqualTo(long jarg1, SBTypeSummary jarg1_, long jarg2, SBTypeSummary jarg2_);
  public final static native boolean SBTypeSummary_IsFunctionCode(long jarg1, SBTypeSummary jarg1_);
  public final static native boolean SBTypeSummary_IsFunctionName(long jarg1, SBTypeSummary jarg1_);
  public final static native boolean SBTypeSummary_IsSummaryString(long jarg1, SBTypeSummary jarg1_);
  public final static native String SBTypeSummary_GetData(long jarg1, SBTypeSummary jarg1_);
  public final static native void SBTypeSummary_SetSummaryString(long jarg1, SBTypeSummary jarg1_, String jarg2);
  public final static native void SBTypeSummary_SetFunctionName(long jarg1, SBTypeSummary jarg1_, String jarg2);
  public final static native void SBTypeSummary_SetFunctionCode(long jarg1, SBTypeSummary jarg1_, String jarg2);
  public final static native long SBTypeSummary_GetOptions(long jarg1, SBTypeSummary jarg1_);
  public final static native void SBTypeSummary_SetOptions(long jarg1, SBTypeSummary jarg1_, long jarg2);
  public final static native boolean SBTypeSummary_GetDescription(long jarg1, SBTypeSummary jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native String SBTypeSummary___repr__(long jarg1, SBTypeSummary jarg1_);
  public final static native long new_SBTypeSynthetic__SWIG_0();
  public final static native long SBTypeSynthetic_CreateWithClassName__SWIG_0(String jarg1, long jarg2);
  public final static native long SBTypeSynthetic_CreateWithClassName__SWIG_1(String jarg1);
  public final static native long SBTypeSynthetic_CreateWithScriptCode__SWIG_0(String jarg1, long jarg2);
  public final static native long SBTypeSynthetic_CreateWithScriptCode__SWIG_1(String jarg1);
  public final static native long new_SBTypeSynthetic__SWIG_1(long jarg1, SBTypeSynthetic jarg1_);
  public final static native void delete_SBTypeSynthetic(long jarg1);
  public final static native boolean SBTypeSynthetic_IsValid(long jarg1, SBTypeSynthetic jarg1_);
  public final static native boolean SBTypeSynthetic_IsEqualTo(long jarg1, SBTypeSynthetic jarg1_, long jarg2, SBTypeSynthetic jarg2_);
  public final static native boolean SBTypeSynthetic_IsClassCode(long jarg1, SBTypeSynthetic jarg1_);
  public final static native String SBTypeSynthetic_GetData(long jarg1, SBTypeSynthetic jarg1_);
  public final static native void SBTypeSynthetic_SetClassName(long jarg1, SBTypeSynthetic jarg1_, String jarg2);
  public final static native void SBTypeSynthetic_SetClassCode(long jarg1, SBTypeSynthetic jarg1_, String jarg2);
  public final static native long SBTypeSynthetic_GetOptions(long jarg1, SBTypeSynthetic jarg1_);
  public final static native void SBTypeSynthetic_SetOptions(long jarg1, SBTypeSynthetic jarg1_, long jarg2);
  public final static native boolean SBTypeSynthetic_GetDescription(long jarg1, SBTypeSynthetic jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native String SBTypeSynthetic___repr__(long jarg1, SBTypeSynthetic jarg1_);
  public final static native long new_SBUnixSignals__SWIG_0();
  public final static native long new_SBUnixSignals__SWIG_1(long jarg1, SBUnixSignals jarg1_);
  public final static native void delete_SBUnixSignals(long jarg1);
  public final static native void SBUnixSignals_Clear(long jarg1, SBUnixSignals jarg1_);
  public final static native boolean SBUnixSignals_IsValid(long jarg1, SBUnixSignals jarg1_);
  public final static native String SBUnixSignals_GetSignalAsCString(long jarg1, SBUnixSignals jarg1_, int jarg2);
  public final static native int SBUnixSignals_GetSignalNumberFromName(long jarg1, SBUnixSignals jarg1_, String jarg2);
  public final static native boolean SBUnixSignals_GetShouldSuppress(long jarg1, SBUnixSignals jarg1_, int jarg2);
  public final static native boolean SBUnixSignals_SetShouldSuppress(long jarg1, SBUnixSignals jarg1_, int jarg2, boolean jarg3);
  public final static native boolean SBUnixSignals_GetShouldStop(long jarg1, SBUnixSignals jarg1_, int jarg2);
  public final static native boolean SBUnixSignals_SetShouldStop(long jarg1, SBUnixSignals jarg1_, int jarg2, boolean jarg3);
  public final static native boolean SBUnixSignals_GetShouldNotify(long jarg1, SBUnixSignals jarg1_, int jarg2);
  public final static native boolean SBUnixSignals_SetShouldNotify(long jarg1, SBUnixSignals jarg1_, int jarg2, boolean jarg3);
  public final static native int SBUnixSignals_GetNumSignals(long jarg1, SBUnixSignals jarg1_);
  public final static native int SBUnixSignals_GetSignalAtIndex(long jarg1, SBUnixSignals jarg1_, int jarg2);
  public final static native long new_SBValue__SWIG_0();
  public final static native long new_SBValue__SWIG_1(long jarg1, SBValue jarg1_);
  public final static native void delete_SBValue(long jarg1);
  public final static native boolean SBValue_IsValid(long jarg1, SBValue jarg1_);
  public final static native void SBValue_Clear(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetError(long jarg1, SBValue jarg1_);
  public final static native java.math.BigInteger SBValue_GetID(long jarg1, SBValue jarg1_);
  public final static native String SBValue_GetName(long jarg1, SBValue jarg1_);
  public final static native String SBValue_GetTypeName(long jarg1, SBValue jarg1_);
  public final static native String SBValue_GetDisplayTypeName(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetByteSize(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_IsInScope(long jarg1, SBValue jarg1_);
  public final static native int SBValue_GetFormat(long jarg1, SBValue jarg1_);
  public final static native void SBValue_SetFormat(long jarg1, SBValue jarg1_, int jarg2);
  public final static native String SBValue_GetValue(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetValueAsSigned__SWIG_0(long jarg1, SBValue jarg1_, long jarg2, SBError jarg2_, long jarg3);
  public final static native long SBValue_GetValueAsSigned__SWIG_1(long jarg1, SBValue jarg1_, long jarg2, SBError jarg2_);
  public final static native java.math.BigInteger SBValue_GetValueAsUnsigned__SWIG_0(long jarg1, SBValue jarg1_, long jarg2, SBError jarg2_, java.math.BigInteger jarg3);
  public final static native java.math.BigInteger SBValue_GetValueAsUnsigned__SWIG_1(long jarg1, SBValue jarg1_, long jarg2, SBError jarg2_);
  public final static native long SBValue_GetValueAsSigned__SWIG_2(long jarg1, SBValue jarg1_, long jarg2);
  public final static native long SBValue_GetValueAsSigned__SWIG_3(long jarg1, SBValue jarg1_);
  public final static native java.math.BigInteger SBValue_GetValueAsUnsigned__SWIG_2(long jarg1, SBValue jarg1_, java.math.BigInteger jarg2);
  public final static native java.math.BigInteger SBValue_GetValueAsUnsigned__SWIG_3(long jarg1, SBValue jarg1_);
  public final static native int SBValue_GetValueType(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_GetValueDidChange(long jarg1, SBValue jarg1_);
  public final static native String SBValue_GetSummary__SWIG_0(long jarg1, SBValue jarg1_);
  public final static native String SBValue_GetSummary__SWIG_1(long jarg1, SBValue jarg1_, long jarg2, SBStream jarg2_, long jarg3, SBTypeSummaryOptions jarg3_);
  public final static native String SBValue_GetObjectDescription(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetDynamicValue(long jarg1, SBValue jarg1_, int jarg2);
  public final static native long SBValue_GetStaticValue(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetNonSyntheticValue(long jarg1, SBValue jarg1_);
  public final static native int SBValue_GetPreferDynamicValue(long jarg1, SBValue jarg1_);
  public final static native void SBValue_SetPreferDynamicValue(long jarg1, SBValue jarg1_, int jarg2);
  public final static native boolean SBValue_GetPreferSyntheticValue(long jarg1, SBValue jarg1_);
  public final static native void SBValue_SetPreferSyntheticValue(long jarg1, SBValue jarg1_, boolean jarg2);
  public final static native boolean SBValue_IsDynamic(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_IsSynthetic(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_IsSyntheticChildrenGenerated(long jarg1, SBValue jarg1_);
  public final static native void SBValue_SetSyntheticChildrenGenerated(long jarg1, SBValue jarg1_, boolean jarg2);
  public final static native String SBValue_GetLocation(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_SetValueFromCString__SWIG_0(long jarg1, SBValue jarg1_, String jarg2);
  public final static native boolean SBValue_SetValueFromCString__SWIG_1(long jarg1, SBValue jarg1_, String jarg2, long jarg3, SBError jarg3_);
  public final static native long SBValue_GetTypeFormat(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetTypeSummary(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetTypeFilter(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetTypeSynthetic(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetChildAtIndex__SWIG_0(long jarg1, SBValue jarg1_, long jarg2);
  public final static native long SBValue_GetChildAtIndex__SWIG_1(long jarg1, SBValue jarg1_, long jarg2, int jarg3, boolean jarg4);
  public final static native long SBValue_CreateChildAtOffset(long jarg1, SBValue jarg1_, String jarg2, long jarg3, long jarg4, SBType jarg4_);
  public final static native long SBValue_Cast(long jarg1, SBValue jarg1_, long jarg2, SBType jarg2_);
  public final static native long SBValue_CreateValueFromExpression__SWIG_0(long jarg1, SBValue jarg1_, String jarg2, String jarg3);
  public final static native long SBValue_CreateValueFromExpression__SWIG_1(long jarg1, SBValue jarg1_, String jarg2, String jarg3, long jarg4, SBExpressionOptions jarg4_);
  public final static native long SBValue_CreateValueFromAddress(long jarg1, SBValue jarg1_, String jarg2, java.math.BigInteger jarg3, long jarg4, SBType jarg4_);
  public final static native long SBValue_CreateValueFromData(long jarg1, SBValue jarg1_, String jarg2, long jarg3, SBData jarg3_, long jarg4, SBType jarg4_);
  public final static native long SBValue_GetType(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetIndexOfChildWithName(long jarg1, SBValue jarg1_, String jarg2);
  public final static native long SBValue_GetChildMemberWithName__SWIG_0(long jarg1, SBValue jarg1_, String jarg2);
  public final static native long SBValue_GetChildMemberWithName__SWIG_1(long jarg1, SBValue jarg1_, String jarg2, int jarg3);
  public final static native long SBValue_GetValueForExpressionPath(long jarg1, SBValue jarg1_, String jarg2);
  public final static native long SBValue_GetDeclaration(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_MightHaveChildren(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_IsRuntimeSupportValue(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetNumChildren__SWIG_0(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetNumChildren__SWIG_1(long jarg1, SBValue jarg1_, long jarg2);
  public final static native long SBValue_GetOpaqueType(long jarg1, SBValue jarg1_);
  public final static native long SBValue_Dereference(long jarg1, SBValue jarg1_);
  public final static native long SBValue_AddressOf(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_TypeIsPointerType(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetTarget(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetProcess(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetThread(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetFrame(long jarg1, SBValue jarg1_);
  public final static native long SBValue_Watch(long jarg1, SBValue jarg1_, boolean jarg2, boolean jarg3, boolean jarg4, long jarg5, SBError jarg5_);
  public final static native long SBValue_WatchPointee(long jarg1, SBValue jarg1_, boolean jarg2, boolean jarg3, boolean jarg4, long jarg5, SBError jarg5_);
  public final static native boolean SBValue_GetDescription(long jarg1, SBValue jarg1_, long jarg2, SBStream jarg2_);
  public final static native boolean SBValue_GetExpressionPath__SWIG_0(long jarg1, SBValue jarg1_, long jarg2, SBStream jarg2_);
  public final static native long SBValue_GetPointeeData__SWIG_0(long jarg1, SBValue jarg1_, long jarg2, long jarg3);
  public final static native long SBValue_GetPointeeData__SWIG_1(long jarg1, SBValue jarg1_, long jarg2);
  public final static native long SBValue_GetPointeeData__SWIG_2(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetData(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_SetData(long jarg1, SBValue jarg1_, long jarg2, SBData jarg2_, long jarg3, SBError jarg3_);
  public final static native long SBValue_Clone(long jarg1, SBValue jarg1_, String jarg2);
  public final static native java.math.BigInteger SBValue_GetLoadAddress(long jarg1, SBValue jarg1_);
  public final static native long SBValue_GetAddress(long jarg1, SBValue jarg1_);
  public final static native long SBValue_Persist(long jarg1, SBValue jarg1_);
  public final static native boolean SBValue_GetExpressionPath__SWIG_1(long jarg1, SBValue jarg1_, long jarg2, SBStream jarg2_, boolean jarg3);
  public final static native long SBValue_EvaluateExpression__SWIG_0(long jarg1, SBValue jarg1_, String jarg2);
  public final static native long SBValue_EvaluateExpression__SWIG_1(long jarg1, SBValue jarg1_, String jarg2, long jarg3, SBExpressionOptions jarg3_);
  public final static native long SBValue_EvaluateExpression__SWIG_2(long jarg1, SBValue jarg1_, String jarg2, long jarg3, SBExpressionOptions jarg3_, String jarg4);
  public final static native String SBValue___repr__(long jarg1, SBValue jarg1_);
  public final static native long new_SBValueList__SWIG_0();
  public final static native long new_SBValueList__SWIG_1(long jarg1, SBValueList jarg1_);
  public final static native void delete_SBValueList(long jarg1);
  public final static native boolean SBValueList_IsValid(long jarg1, SBValueList jarg1_);
  public final static native void SBValueList_Clear(long jarg1, SBValueList jarg1_);
  public final static native void SBValueList_Append__SWIG_0(long jarg1, SBValueList jarg1_, long jarg2, SBValue jarg2_);
  public final static native void SBValueList_Append__SWIG_1(long jarg1, SBValueList jarg1_, long jarg2, SBValueList jarg2_);
  public final static native long SBValueList_GetSize(long jarg1, SBValueList jarg1_);
  public final static native long SBValueList_GetValueAtIndex(long jarg1, SBValueList jarg1_, long jarg2);
  public final static native long SBValueList_FindValueObjectByUID(long jarg1, SBValueList jarg1_, java.math.BigInteger jarg2);
  public final static native long SBValueList_GetFirstValueByName(long jarg1, SBValueList jarg1_, String jarg2);
  public final static native long SBValueList_GetError(long jarg1, SBValueList jarg1_);
  public final static native String SBValueList___str__(long jarg1, SBValueList jarg1_);
  public final static native long new_SBVariablesOptions__SWIG_0();
  public final static native long new_SBVariablesOptions__SWIG_1(long jarg1, SBVariablesOptions jarg1_);
  public final static native void delete_SBVariablesOptions(long jarg1);
  public final static native boolean SBVariablesOptions_IsValid(long jarg1, SBVariablesOptions jarg1_);
  public final static native boolean SBVariablesOptions_GetIncludeArguments(long jarg1, SBVariablesOptions jarg1_);
  public final static native void SBVariablesOptions_SetIncludeArguments(long jarg1, SBVariablesOptions jarg1_, boolean jarg2);
  public final static native boolean SBVariablesOptions_GetIncludeRecognizedArguments(long jarg1, SBVariablesOptions jarg1_, long jarg2, SBTarget jarg2_);
  public final static native void SBVariablesOptions_SetIncludeRecognizedArguments(long jarg1, SBVariablesOptions jarg1_, boolean jarg2);
  public final static native boolean SBVariablesOptions_GetIncludeLocals(long jarg1, SBVariablesOptions jarg1_);
  public final static native void SBVariablesOptions_SetIncludeLocals(long jarg1, SBVariablesOptions jarg1_, boolean jarg2);
  public final static native boolean SBVariablesOptions_GetIncludeStatics(long jarg1, SBVariablesOptions jarg1_);
  public final static native void SBVariablesOptions_SetIncludeStatics(long jarg1, SBVariablesOptions jarg1_, boolean jarg2);
  public final static native boolean SBVariablesOptions_GetInScopeOnly(long jarg1, SBVariablesOptions jarg1_);
  public final static native void SBVariablesOptions_SetInScopeOnly(long jarg1, SBVariablesOptions jarg1_, boolean jarg2);
  public final static native boolean SBVariablesOptions_GetIncludeRuntimeSupportValues(long jarg1, SBVariablesOptions jarg1_);
  public final static native void SBVariablesOptions_SetIncludeRuntimeSupportValues(long jarg1, SBVariablesOptions jarg1_, boolean jarg2);
  public final static native int SBVariablesOptions_GetUseDynamic(long jarg1, SBVariablesOptions jarg1_);
  public final static native void SBVariablesOptions_SetUseDynamic(long jarg1, SBVariablesOptions jarg1_, int jarg2);
  public final static native long new_SBWatchpoint__SWIG_0();
  public final static native long new_SBWatchpoint__SWIG_1(long jarg1, SBWatchpoint jarg1_);
  public final static native void delete_SBWatchpoint(long jarg1);
  public final static native boolean SBWatchpoint_IsValid(long jarg1, SBWatchpoint jarg1_);
  public final static native long SBWatchpoint_GetError(long jarg1, SBWatchpoint jarg1_);
  public final static native int SBWatchpoint_GetID(long jarg1, SBWatchpoint jarg1_);
  public final static native int SBWatchpoint_GetHardwareIndex(long jarg1, SBWatchpoint jarg1_);
  public final static native java.math.BigInteger SBWatchpoint_GetWatchAddress(long jarg1, SBWatchpoint jarg1_);
  public final static native long SBWatchpoint_GetWatchSize(long jarg1, SBWatchpoint jarg1_);
  public final static native void SBWatchpoint_SetEnabled(long jarg1, SBWatchpoint jarg1_, boolean jarg2);
  public final static native boolean SBWatchpoint_IsEnabled(long jarg1, SBWatchpoint jarg1_);
  public final static native long SBWatchpoint_GetHitCount(long jarg1, SBWatchpoint jarg1_);
  public final static native long SBWatchpoint_GetIgnoreCount(long jarg1, SBWatchpoint jarg1_);
  public final static native void SBWatchpoint_SetIgnoreCount(long jarg1, SBWatchpoint jarg1_, long jarg2);
  public final static native String SBWatchpoint_GetCondition(long jarg1, SBWatchpoint jarg1_);
  public final static native void SBWatchpoint_SetCondition(long jarg1, SBWatchpoint jarg1_, String jarg2);
  public final static native boolean SBWatchpoint_GetDescription(long jarg1, SBWatchpoint jarg1_, long jarg2, SBStream jarg2_, int jarg3);
  public final static native boolean SBWatchpoint_EventIsWatchpointEvent(long jarg1, SBEvent jarg1_);
  public final static native int SBWatchpoint_GetWatchpointEventTypeFromEvent(long jarg1, SBEvent jarg1_);
  public final static native long SBWatchpoint_GetWatchpointFromEvent(long jarg1, SBEvent jarg1_);
  public final static native String SBWatchpoint___repr__(long jarg1, SBWatchpoint jarg1_);
}
