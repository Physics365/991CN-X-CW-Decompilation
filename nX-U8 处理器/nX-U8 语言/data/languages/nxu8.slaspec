define endian=little;
define alignment=2;
define space ram type=ram_space size=2;
define space rom type=ram_space size=3 default;
define space register type=register_space size=1;
define register offset=0 size=8
    [QR0 QR8];
define register offset=0 size=4
    [XR0 XR4 XR8 XR12];
define register offset=0 size=2
    [ER0 ER2 ER4 ER6 ER8 ER10 ER12 ER14];
define register offset=0 size=1
    [R0 R1 R2 R3 R4 R5 R6 R7 R8
     R9 R10 R11 R12 R13 R14 R15];
define register offset=0x10 size=1
    [PSW EPSW1 EPSW2 EPSW3];
define bitrange #ELEVEL=PSW[0,2]
                #HCF   =PSW[2,1]
                #MIE   =PSW[3,1]
                OVF   =PSW[4,1]
                SF    =PSW[5,1]
                ZF    =PSW[6,1]
                CF    =PSW[7,1];
define register offset=0x14 size=2
    [SP EA];
define register offset=0x18 size=1
    [DSR];
define register offset=0x20 size=3
    [_PC _LR _ELR1 _ELR2 _ELR3];


define token byte(8)
    a = (7,7)
    b = (6,6)
    ab = (6,7)
    cd = (4,5)
    bc = (5,6)
    d = (4,4)
    h = (0,0)
    gh = (0,1)
    fgh = (0,2)
    abcdef = (2,7)
    abcde = (3,7)
    abcd = (4,7)
    defg = (1,4)
    defgh = (0,4)
    efgh = (0,3)
    abcdefg = (1,7)
    efg = (1,3)
    def = (2,4)
    code = (0,7)
    
    reg1 = (0,3)
    ereg1 = (1,3)
    xreg = (2,3)
    qreg = (3,3)
    imm8 = (0,7)
    disp8= (0,7) signed
    imm7 = (0,6) signed
    wid = (4,6) dec
    disp6 = (0,5) signed
    snum = (0,5)
    reg2 = (4,7)
    ereg2 = (5,7)
	last=(0,3)
	next=(0,3);
define token data16(16)
    imm16 = (0,15)
    sign16 = (15,15)
    disp16 = (0,15) signed;
attach variables [reg1 reg2] [R0 R1 R2 R3 R4 R5 R6
     R7 R8 R9 R10 R11 R12 R13 R14 R15];
attach variables [ereg1 ereg2] 
     [ER0 ER2 ER4 ER6 ER8 ER10 ER12 ER14];
attach variables [xreg] [XR0 XR4 XR8 XR12];
attach variables [qreg] [QR0 QR8];

macro setZSFlags(result) {
    ZF = (result == 0);
    SF = (result s< 0);
}

relbpfp: disp6"[BP]" is b=0 & disp6 { local tmp:2 = ER12+disp6; export tmp; }
relbpfp: disp6"[FP]" is b=1 & disp6 { local tmp:2 = ER14+disp6; export tmp; }
macro l1(reg, p) {
	local ptr:2 = p;
	reg = *[ram]:1 ptr;
	setZSFlags(reg);
}
macro st1(reg, p) {
	local ptr:2 = p;
	*[ram]:1 ptr = reg;
}

:L  reg1, "[EA]" is code=0x30; abcd=0x9 & reg1 { l1 (reg1, EA); }
:ST reg1, "[EA]" is code=0x31; abcd=0x9 & reg1 { st1(reg1, EA); }

:L  reg1, "[EA+]" is code=0x50; abcd=0x9 & reg1 { l1 (reg1, EA); EA=EA+1; }
:ST reg1, "[EA+]" is code=0x51; abcd=0x9 & reg1 { st1(reg1, EA); EA=EA+1; }

:L  reg1, [ereg2] is ereg2 & defgh=0x0; abcd=0x9 & reg1 { l1 (reg1, ereg2); }
:ST reg1, [ereg2] is ereg2 & defgh=0x1; abcd=0x9 & reg1 { st1(reg1, ereg2); }

:L  reg1, disp16[ereg2] is ereg2 & defgh=0x8; abcd=0x9 & reg1; disp16 { l1 (reg1, ereg2+disp16); }
:ST reg1, disp16[ereg2] is ereg2 & defgh=0x9; abcd=0x9 & reg1; disp16 { st1(reg1, ereg2+disp16); }

:L  reg1, relbpfp is a=0 & relbpfp; abcd=0xD & reg1 { l1 (reg1, relbpfp);}
:ST reg1, relbpfp is a=1 & relbpfp; abcd=0xD & reg1 { st1(reg1, relbpfp);}

:L  reg1, imm16 is code=0x10; abcd=0x9 & reg1; imm16 { l1 (reg1, imm16);}
:ST reg1, imm16 is code=0x11; abcd=0x9 & reg1; imm16 { st1(reg1, imm16);}

macro l2(reg, p) {
	local ptr:2 = p;
	reg = *[ram]:2 ptr;
	setZSFlags(reg);
}
macro st2(reg, p) {
	local ptr:2 = p;
	*[ram]:2 ptr = reg;
}

:L  ereg1, "[EA]" is code=0x32; abcd=0x9 & ereg1 & h=0x0 { l2 (     ereg1, EA); }
:ST ereg1, "[EA]" is code=0x33; abcd=0x9 & ereg1 & h=0x0 { st2(     ereg1, EA); }

:L  ereg1, "[EA+]" is code=0x52; abcd=0x9 & ereg1 & h=0x0 { l2 (     ereg1, EA); EA=EA+2; }
:ST ereg1, "[EA+]" is code=0x53; abcd=0x9 & ereg1 & h=0x0 { st2(     ereg1, EA); EA=EA+2; }

:L  ereg1, [ereg2] is ereg2 & defgh=0x2; abcd=0x9 & ereg1 & h=0x0 { l2 (     ereg1, ereg2); }
:ST ereg1, [ereg2] is ereg2 & defgh=0x3; abcd=0x9 & ereg1 & h=0x0 { st2(     ereg1, ereg2); }

:L  ereg1, disp16[ereg2] is ereg2 & defgh=0x8; abcd=0xA & ereg1 & h=0x0; disp16 { l2 (     ereg1, ereg2+disp16); }
:ST ereg1, disp16[ereg2] is ereg2 & defgh=0x9; abcd=0xA & ereg1 & h=0x0; disp16 { st2(     ereg1, ereg2+disp16); }

:L  ereg1, relbpfp is a=0 & relbpfp; abcd=0xB & ereg1 { l2 (ereg1, relbpfp);}
:ST ereg1, relbpfp is a=1 & relbpfp; abcd=0xB & ereg1 { st2(ereg1, relbpfp);}

:L  ereg1, imm16 is code=0x12; abcd=0x9 & ereg1 & h=0x0; imm16 { l2 (     ereg1, imm16);}
:ST ereg1, imm16 is code=0x13; abcd=0x9 & ereg1 & h=0x0; imm16 { st2(     ereg1, imm16);}

macro l4ea(xr) {
	local ptr:2 = EA;
	xr = *[ram]:4 ptr;
	setZSFlags(xr);
}
:L xreg, "[EA]" is code=0x34; abcd=9 & xreg & gh=0 {
	l4ea(xreg);
}
:L xreg, "[EA+]" is code=0x54; abcd=9 & xreg & gh=0 {
	l4ea(xreg);
	EA = EA+4;
}

macro st4ea(xr) {
	local ptr:2 = EA;
	*[ram]:4 ptr = xr;
}
:ST xreg, "[EA]" is code=0x35; abcd=9 & xreg & gh=0 {
	st4ea(xreg);
}
:ST xreg, "[EA+]" is code=0x55; abcd=9 & xreg & gh=0 {
	st4ea(xreg);
	EA = EA+4;
}

macro l8ea(qr) {
	local ptr:2 = EA;
	qr = *[ram]:8 ptr;
	setZSFlags(qr);
}
:L qreg, "[EA]" is code=0x36; abcd=9 & qreg & fgh=0 {
	l8ea(qreg);
}
:L qreg, "[EA+]" is code=0x56; abcd=9 & qreg & fgh=0 {
	l8ea(qreg);
	EA = EA+8;
}

macro st8ea(qr) {
	local ptr:2 = EA;
	*[ram]:8 ptr = qr;
}
:ST qreg, "[EA]" is code=0x37; abcd=9 & qreg & fgh=0 {
	st8ea(qreg);
}
:ST qreg, "[EA+]" is code=0x57; abcd=9 & qreg & fgh=0 {
	st8ea(qreg);
	EA = EA+8;
}

:TB reg1"."wid is a=0 & wid & efgh=0x1; abcd=0xA & reg1 {
	ZF = ((reg1&(1<<wid)) ==0);
}
:TB imm16"."wid is a=1 & wid & efgh=0x1; code=0xA0; imm16 {
	local p:2 = imm16;
	local tmp:1 = *[ram]:1 p;
	ZF = ((tmp&(1<<wid)) ==0);
}
:RB reg1"."wid is a=0 & wid & efgh=0x2; abcd=0xA & reg1 {
	local mask:1 = 1<<wid;
	ZF = ((reg1&mask) ==0);
	reg1 = reg1 & (~mask);
}
:RB imm16"."wid is a=1 & wid & efgh=0x2; code=0xA0; imm16 {
	local p:2 = imm16;
	local tmp:1 = *[ram]:1 p;
	local mask:1 = 1<<wid;
	ZF = ((tmp&mask) ==0);
	*[ram]:1 p = tmp & (~mask);
}
:SB reg1"."wid is a=0 & wid & efgh=0x0; abcd=0xA & reg1 {
	local mask:1 = 1<<wid;
	ZF = ((reg1&mask) ==0);
	reg1 = reg1 | mask;
}
:SB imm16"."wid is a=1 & wid & efgh=0x0; code=0xA0; imm16 {
	local p:2 = imm16;
	local tmp:1 = *[ram]:1 p;
	local mask:1 = 1<<wid;
	ZF = ((tmp&mask) ==0);
	*[ram]:1 p = tmp | mask;
}

radr: reloc is disp8 [ reloc=inst_next + disp8*2; ] { export *[rom]:2 reloc; }
cc: "GE"            is efgh=0x0    { local c:1 = (CF == 0); export c; }
cc: "LT"            is efgh=0x1    { local c:1 = (CF == 1); export c; }
cc: "GT"            is efgh=0x2    { local c:1 = (CF == 0 && ZF == 0); export c; }
cc: "LE"            is efgh=0x3    { local c:1 = (CF == 1 || ZF == 1); export c; }
cc: "GES"           is efgh=0x4    { local c:1 = ((OVF^SF) == 0); export c; }
cc: "LTS"           is efgh=0x5    { local c:1 = ((OVF^SF) == 1); export c; }
cc: "GTS"           is efgh=0x6    { local c:1 = ((OVF^SF|ZF) == 0); export c; }
cc: "LES"           is efgh=0x7    { local c:1 = ((OVF^SF|ZF) == 1); export c; }
cc: "NE"            is efgh=0x8    { local c:1 = (ZF == 0); export c; }
cc: "EQ"            is efgh=0x9    { local c:1 = (ZF == 1); export c; }
cc: "NV"            is efgh=0xA    { local c:1 = (OVF == 0); export c; }
cc: "OV"            is efgh=0xB    { local c:1 = (OVF == 1); export c; }
cc: "PS"            is efgh=0xC    { local c:1 = (SF == 0); export c; }
cc: "NS"            is efgh=0xD    { local c:1 = (SF == 1); export c; }
:BC "AL", radr is radr ; code=0xCE {
	goto radr;
}
:BC cc, radr is radr ; abcd=0xC & cc {
	if (cc) goto radr;
}

macro push1(reg) {
	SP = SP - 2;
	*[ram]:1 SP = reg;
}
macro push2(reg) {
	SP = SP - 2;
	*[ram]:2 SP = reg;
}
:PUSH reg1 is code=0x4E; abcd=0xF & reg1 {
	push1(reg1);
}
:PUSH ereg1 is code=0x5E; abcd=0xF & ereg1 & h=0 {
	push2(ereg1);
}
:PUSH xreg is code=0x6E; abcd=0xF & xreg & gh=0 {
	SP = SP - 4;
	*[ram]:4 SP = xreg;
}
:PUSH qreg is code=0x7E; abcd=0xF & qreg & fgh=0 {
	SP = SP - 8;
	*[ram]:8 SP = qreg;
}
:PUSH "LR" is code=0xCE; code=0xF8 {
	SP = SP - 4;
	*[ram]:3 SP = _LR;
}
:PUSH "EA" is code=0xCE; code=0xF1 {
	push2(EA);
}
:PUSH "LR, EA" is code=0xCE; code=0xF9 {
	SP = SP - 4;
	*[ram]:3 SP = _LR;
	push2(EA);
}
macro pop1(reg) {
	reg = *[ram]:1 SP;
	SP = SP + 2;
}
macro pop2(reg) {
	reg = *[ram]:2 SP;
	SP = SP + 2;
}
:POP reg1 is code=0x0E; abcd=0xF & reg1 {
	pop1(reg1);
}
:POP ereg1 is code=0x1E; abcd=0xF & ereg1 & h=0 {
	pop2(ereg1);
}
:POP xreg is code=0x2E; abcd=0xF & xreg & gh=0 {
	xreg = *[ram]:4 SP;
	SP = SP + 4;
}
:POP qreg is code=0x3E; abcd=0xF & qreg & fgh=0 {
	qreg = *[ram]:8 SP;
	SP = SP + 8;
}
:POP "PC" is code=0x8E; code=0xF2 {
	local tmp:3 = *[ram]:3 SP;
	SP = SP + 4;
	return [tmp];
}
:POP "EA" is code=0x8E; code=0xF1 {
	pop2(EA);
}
:RT is code=0x1F; code=0xFE {
	return [_LR];
}


macro add(opa, opb) {
    CF = carry(opa, opb);
    OVF = scarry(opa, opb);
    opa = opa + opb;
    setZSFlags(opa);
}
:ADD reg1, reg2 is reg2 & efgh=0x1 ; abcd=0x8 & reg1{
    add(reg1, reg2);
}
:ADD reg1, imm8 is imm8 ; abcd=0x1 & reg1{
    add(reg1, imm8);
}
:ADD ereg1, ereg2 is ereg2 & defgh=0x6 ; abcd=0xF & ereg1 & h=0 {
    add(ereg1, ereg2);
}
:ADD ereg1, imm7 is a=1 & imm7 ; abcd=0xE & ereg1 & h=0{
    add(ereg1, imm7);
}
:ADD "SP", disp8 is disp8 ; code=0xE1 {
    SP = SP + disp8;
}
macro sub(opa, opb) {
    CF = (opa < opb);
    OVF = sborrow(opa, opb);
    opa = opa - opb;
    setZSFlags(opa);
}
macro cmp(opa, opb) {
    CF = (opa < opb);
    OVF = sborrow(opa, opb);
    ZF = (opa == opb);
    SF = ((opa-opb) s< 0);
}
:SUB reg1, reg2 is reg2 & efgh=0x8 ; abcd=0x8 & reg1{
    sub(reg1, reg2);
}
:CMP reg1, reg2 is reg2 & efgh=0x7 ; abcd=0x8 & reg1{
    cmp(reg1, reg2);
}
:CMP reg1, imm8 is imm8 ; abcd=0x7 & reg1{
    cmp(reg1, imm8);
}
:CMP ereg1, ereg2 is ereg2 & defgh=0x7 ; abcd=0xF & ereg1 & h=0 {
    cmp(ereg1, ereg2);
}
:NEG reg1 is code=0x5F; abcd=0x8 & reg1 {
	CF = (reg1==-1); #??? I can't understand what the instruction manual says
    OVF = (reg1==-0x80); #??? The same as above
    reg1 = -reg1;
    setZSFlags(reg1);
}
macro addc(opa,opb) {
	local tmp:2 = zext(opa) + zext(opb) + zext(CF);
	CF = tmp(1);
	local result = tmp:1;
	OVF = ((result^opa)&(result^opb))>>7;
    ZF = (ZF && result==0);
    SF = (result s< 0);
	opa = result;
}
:ADDC reg1, reg2 is  reg2 & efgh=0x6 ; abcd=0x8 & reg1 {
    addc(reg1, reg2);
}
:ADDC reg1, imm8 is  imm8 ; abcd=0x6 & reg1 {
    addc(reg1, imm8:1);
}
macro subc(opa, opb) {
	local tmp:2 = zext(opa) - zext(opb) - zext(CF);
	CF = tmp(1);
	local result = tmp:1;
	OVF = ((result^opa)&(~result^opb))>>7;
    ZF = (ZF && result==0);
    SF = (result s< 0);
	opa = result;
}
macro cmpc(opa, opb) {
	local tmp:2 = zext(opa) - zext(opb) - zext(CF);
	CF = tmp(1);
	local result = tmp:1;
	OVF = ((result^opa)&(~result^opb))>>7;
    ZF = (ZF && result==0);
    SF = (result s< 0);
}
:SUBC reg1, reg2 is  reg2 & efgh=0x9 ; abcd=0x8 & reg1 {
	subc(reg1, reg2);
}
:CMPC reg1, reg2 is reg2 & efgh=0x5 ; abcd=0x8 & reg1 {
	cmpc(reg1, reg2);
}
:CMPC reg1, imm8 is imm8 ; abcd=0x5 & reg1{
    cmpc(reg1, imm8:1);
}

macro and(opa, opb) {
    opa = opa&opb;
    setZSFlags(opa);
}
:AND reg1, reg2 is reg2 & efgh=0x2 ; abcd=0x8 & reg1 {
    and(reg1, reg2);
}
:AND reg1, imm8 is imm8 ; abcd=0x2 & reg1 {
    and(reg1, imm8);
}
macro or(opa, opb) {
    opa = opa|opb;
    setZSFlags(opa);
}
:OR reg1, reg2 is reg2 & efgh=0x3 ; abcd=0x8 & reg1 {
    or(reg1, reg2);
}
:OR reg1, imm8 is imm8 ; abcd=0x3 & reg1 {
    or(reg1, imm8);
}
macro xor(opa, opb) {
    opa = opa^opb;
    setZSFlags(opa);
}
:XOR reg1, reg2 is reg2 & efgh=0x4 ; abcd=0x8 & reg1 {
    xor(reg1, reg2);
}
:XOR reg1, imm8 is imm8 ; abcd=0x4 & reg1 {
    xor(reg1, imm8);
}

define pcodeop daa;
define pcodeop das;
define pcodeop nop;
:DAA reg1 is code=0x1F; abcd = 0x8 & reg1 {
	reg1 = daa(reg1);
}
:DAS reg1 is code=0x3F; abcd = 0x8 & reg1 {
	reg1 = das(reg1);
}
:NOP is code=0x8F; code=0xFE {
	nop();
}
:DEC "[EA]" is code=0x3F; code=0xFE{
	local tmp:1 = *[ram]:1 EA;
	OVF = sborrow(tmp, 1);
    tmp = tmp - 1;
	*[ram]:1 EA = tmp;
    setZSFlags(tmp);
}
:INC "[EA]" is code=0x2F; code=0xFE{
	local tmp:1 = *[ram]:1 EA;
	OVF = scarry(tmp, 1);
    tmp = tmp + 1;
	*[ram]:1 EA = tmp;
    setZSFlags(tmp);
}

:EXTBW ereg1 is ereg1 & efgh=0xF; abcd=0x8 {
	ereg1 = sext(ereg1:1);
}

:DIV ereg1, reg2 is reg2 & efgh=0x9; abcd=0xF & ereg1 & h=0 {
	ZF = (ereg1==0);
	CF = (reg2==0);
	if (CF) goto inst_next;
	local di:2 = zext(reg2);
	local ans:2 = ereg1/di;
	local mod:2 = ereg1%di;
	ereg1 = ans;
	reg2 = mod:1;
}
:MUL ereg1, reg2 is reg2 & efgh=0x4; abcd=0xF & ereg1 & h=0 {
	local mu:2 = zext(reg2);
	ereg1 = (ereg1&0xFF) * mu;
	ZF = (ereg1==0);
}

cadr: a is efgh; imm16 [a = (efgh<<16) + imm16; ]{ export *[rom]:2 a;}
:B cadr is code = 0x00 ; abcd = 0xF ... & cadr {
    goto cadr;
}
:B ereg2 is ereg2 & defgh=0x2 ; code = 0xF0 {
    local tmp = inst_start & 0xF0000 + ereg2;
    goto [tmp];
}
:BL cadr is code = 0x01 ; abcd = 0xF ... & cadr {
    _LR = inst_next;
    call cadr;
}
:BL ereg2 is ereg2 & defgh=0x3 ; code = 0xF0 {
    _LR = inst_next;
    local tmp = inst_start & 0xF0000 + ereg2;
    call [tmp];
}
macro mov(opa, opb) {
	opa = opb;
	setZSFlags(opa);
}
:MOV ereg1, ereg2 is ereg2 & d=0 & efgh=0x5 ; abcd=0xF & ereg1 & h=0 {
    mov(ereg1, ereg2);
}
:MOV ereg1, imm7 is a=0 & imm7 ; abcd=0xE & ereg1 & h=0{
    mov(ereg1, imm7);
}
:MOV reg1, reg2 is reg2 & efgh=0x0 ; abcd=0x8 & reg1{
    mov(reg1, reg2);
}
:MOV reg1, imm8 is imm8 ; abcd=0x0 & reg1{
    mov(reg1, imm8);
}
:MOV "SP", ereg2 is ereg2 & defgh=0xA; code=0xA1 {
	SP = ereg2;
}
:MOV ereg1, "SP" is code=0x1A; abcd=0xA & ereg1 & h=0 {
	ereg1 = SP;
}
:MOV reg1, "PSW" is code=0x03; abcd=0xA & reg1 {
	reg1 = PSW;
}
:MOV "PSW", reg2 is reg2 & efgh=0xB; code=0xA0 {
	PSW = reg2;
}
:MOV "PSW", imm8 is imm8; code=0xE9 {
	PSW = imm8;
}

:LEA [ereg2] is ereg2 & defgh=0xA; code=0xF0 {
	EA = ereg2;
}
:LEA disp16[ereg2] is ereg2 & defgh=0xB; code=0xF0; disp16 {
	EA = ereg2 + disp16;
}
:LEA imm16 is code=0x0C; code=0xF0; imm16 {
	EA = imm16;
}
macro sll(reg, wid) {
	CF = (reg>>(8-wid))&1;
	reg = reg<<wid;
}
macro sllc(reg, reg2, wid) {
	CF = (reg>>(8-wid))&1;
	local tmp:2 = (zext(reg)<<8)+zext(reg2);
	tmp = tmp<<wid;
	reg = tmp(1);
}
macro sra(reg, wid) {
	CF = (reg>>(wid-1))&1;
	reg = reg s>> wid;
}
macro srl(reg, wid) {
	CF = (reg>>(wid-1))&1;
	reg = reg>>wid;
}
macro srlc(reg, reg2, wid) {
	CF = (reg>>(wid-1))&1;
	local tmp:2 = (zext(reg2)<<8)+zext(reg);
	tmp = tmp>>wid;
	reg = tmp:1;
}


attach variables [last] [R15 R0 R1 R2 R3 R4 R5 R6
     R7 R8 R9 R10 R11 R12 R13 R14];
attach variables [next] [R1 R2 R3 R4 R5 R6
     R7 R8 R9 R10 R11 R12 R13 R14 R15 R0];
:SLL reg1, reg2 is reg2 & efgh=0xA; abcd=0x8 & reg1 {
	sll(reg1, reg2&7);
}
:SLL reg1, wid is a=0 & wid & efgh=0xA; abcd=0x9 & reg1 {
	sll(reg1, wid);
}
:SLLC reg1, reg2 is reg2 & efgh=0xB; abcd=0x8 & reg1 & last {
	sllc(reg1, last, reg2&7);
}
:SLLC reg1, wid is a=0 & wid & efgh=0xB; abcd=0x9 & reg1 & last {
	sllc(reg1, last, wid);
}
:SRA reg1, reg2 is reg2 & efgh=0xE; abcd=0x8 & reg1 {
	sra(reg1, reg2&7);
}
:SRA reg1, wid is a=0 & wid & efgh=0xE; abcd=0x9 & reg1 {
	sra(reg1, wid);
}
:SRL reg1, reg2 is reg2 & efgh=0xC; abcd=0x8 & reg1 {
	srl(reg1, reg2&7);
}
:SRL reg1, wid is a=0 & wid & efgh=0xC; abcd=0x9 & reg1 {
	srl(reg1, wid);
}
:SRLC reg1, reg2 is reg2 & efgh=0xD; abcd=0x8 & reg1 & next {
	srlc(reg1, next, reg2&7);
}
:SRLC reg1, wid is a=0 & wid & efgh=0xD; abcd=0x9 & reg1 & next {
	srlc(reg1, next, wid);
}

:SC is code=0x80; code=0xED {
	CF = 1;
}
:RC is code=0x7F; code=0xEB {
	CF = 0;
}
:CPLC is code=0xCF; code=0xFE {
	CF = !CF;
}
define pcodeop enable_maskable_interrupts;
define pcodeop disable_maskable_interrupts;
:EI is code=0x08; code=0xED {
	enable_maskable_interrupts();
}
:DI is code=0xF7; code=0xEB {
	disable_maskable_interrupts();
}

dsr: "DSR:" is (code=0x9F; code=0xFE) { export DSR; }
dsr: reg2":" is (reg2 & efgh=0xF; code=0x90) { DSR=reg2; export reg2; }
dsr: imm8":" is (imm8; code=0xE3) { DSR=imm8; export DSR; }
macro l1dsr(dsr, reg, p) {
	local p2:2 = p;
	local ptr:3 = zext(dsr<<16) + zext(p2);
	reg = *[rom]:1 ptr;
	setZSFlags(reg);
}
macro st1dsr(dsr, reg, p) {
	local p2:2 = p;
	local ptr:3 = zext(dsr<<16) + zext(p2);
	*[rom]:1 ptr = reg;
}
macro l2dsr(dsr, reg, p) {
	local p2:2 = p;
	local ptr:3 = zext(dsr<<16) + zext(p2);
	reg = *[rom]:2 ptr;
	setZSFlags(reg);
}
macro st2dsr(dsr, reg, p) {
	local p2:2 = p;
	local ptr:3 = zext(dsr<<16) + zext(p2);
	*[rom]:2 ptr = reg;
}
:L  reg1, dsr^"[EA]" is dsr; code=0x30; abcd=0x9 & reg1 { l1dsr (dsr, reg1, EA); }
:ST reg1, dsr^"[EA]" is dsr; code=0x31; abcd=0x9 & reg1 { st1dsr(dsr, reg1, EA); }
:L  reg1, dsr^"[EA+]" is dsr; code=0x50; abcd=0x9 & reg1 { l1dsr (dsr, reg1, EA); EA=EA+1; }
:ST reg1, dsr^"[EA+]" is dsr; code=0x51; abcd=0x9 & reg1 { st1dsr(dsr, reg1, EA); EA=EA+1; }
:L  reg1, dsr^[ereg2] is dsr; ereg2 & defgh=0x0; abcd=0x9 & reg1 { l1dsr (dsr, reg1, ereg2); }
:ST reg1, dsr^[ereg2] is dsr; ereg2 & defgh=0x1; abcd=0x9 & reg1 { st1dsr(dsr, reg1, ereg2); }
:L  reg1, dsr^disp16[ereg2] is dsr; ereg2 & defgh=0x8; abcd=0x9 & reg1; disp16 { l1dsr (dsr, reg1, ereg2+disp16); }
:ST reg1, dsr^disp16[ereg2] is dsr; ereg2 & defgh=0x9; abcd=0x9 & reg1; disp16 { st1dsr(dsr, reg1, ereg2+disp16); }
:L  reg1, dsr^relbpfp is dsr; a=0 & relbpfp; abcd=0xD & reg1 { l1dsr (dsr, reg1, relbpfp);}
:ST reg1, dsr^relbpfp is dsr; a=1 & relbpfp; abcd=0xD & reg1 { st1dsr(dsr, reg1, relbpfp);}
:L  reg1, dsr^imm16 is dsr; code=0x10; abcd=0x9 & reg1; imm16 { l1dsr (dsr, reg1, imm16);}
:ST reg1, dsr^imm16 is dsr; code=0x11; abcd=0x9 & reg1; imm16 { st1dsr(dsr, reg1, imm16);}
:L  ereg1, dsr^"[EA]" is dsr; code=0x32; abcd=0x9 & ereg1 & h=0x0 { l2dsr (dsr, ereg1, EA); }
:ST ereg1, dsr^"[EA]" is dsr; code=0x33; abcd=0x9 & ereg1 & h=0x0 { st2dsr(dsr, ereg1, EA); }
:L  ereg1, dsr^"[EA+]" is dsr; code=0x52; abcd=0x9 & ereg1 & h=0x0 { l2dsr (dsr, ereg1, EA); EA=EA+2; }
:ST ereg1, dsr^"[EA+]" is dsr; code=0x53; abcd=0x9 & ereg1 & h=0x0 { st2dsr(dsr, ereg1, EA); EA=EA+2; }
:L  ereg1, dsr^[ereg2] is dsr; ereg2 & defgh=0x2; abcd=0x9 & ereg1 & h=0x0 { l2dsr (dsr, ereg1, ereg2); }
:ST ereg1, dsr^[ereg2] is dsr; ereg2 & defgh=0x3; abcd=0x9 & ereg1 & h=0x0 { st2dsr(dsr, ereg1, ereg2); }
:L  ereg1, dsr^disp16[ereg2] is dsr; ereg2 & defgh=0x8; abcd=0xA & ereg1 & h=0x0; disp16 { l2dsr (dsr, ereg1, ereg2+disp16); }
:ST ereg1, dsr^disp16[ereg2] is dsr; ereg2 & defgh=0x9; abcd=0xA & ereg1 & h=0x0; disp16 { st2dsr(dsr, ereg1, ereg2+disp16); }
:L  ereg1, dsr^relbpfp is dsr; a=0 & relbpfp; abcd=0xB & ereg1 { l2dsr (dsr, ereg1, relbpfp);}
:ST ereg1, dsr^relbpfp is dsr; a=1 & relbpfp; abcd=0xB & ereg1 { st2dsr(dsr, ereg1, relbpfp);}
:L  ereg1, dsr^imm16 is dsr; code=0x12; abcd=0x9 & ereg1 & h=0x0; imm16 { l2dsr (dsr, ereg1, imm16);}
:ST ereg1, dsr^imm16 is dsr; code=0x13; abcd=0x9 & ereg1 & h=0x0; imm16 { st2dsr(dsr, ereg1, imm16);}
